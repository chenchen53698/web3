{
  "0x5cc19e53268867901b877a7e8f813cb71129610c7db8a34b8de1da8e90aa9ee1": {
    "name": "WrappedMyToken",
    "deployment": {
      "_format": "hh-sol-artifact-1",
      "contractName": "WrappedMyToken",
      "sourceName": "contracts/WrappedMyToken.sol",
      "abi": [
        {
          "inputs": [
            {
              "internalType": "string",
              "name": "tokenName",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "tokenSymbol",
              "type": "string"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "constructor"
        },
        {
          "inputs": [],
          "name": "ERC721EnumerableForbiddenBatchMint",
          "type": "error"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "sender",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            }
          ],
          "name": "ERC721IncorrectOwner",
          "type": "error"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "operator",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            }
          ],
          "name": "ERC721InsufficientApproval",
          "type": "error"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "approver",
              "type": "address"
            }
          ],
          "name": "ERC721InvalidApprover",
          "type": "error"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "operator",
              "type": "address"
            }
          ],
          "name": "ERC721InvalidOperator",
          "type": "error"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            }
          ],
          "name": "ERC721InvalidOwner",
          "type": "error"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "receiver",
              "type": "address"
            }
          ],
          "name": "ERC721InvalidReceiver",
          "type": "error"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "sender",
              "type": "address"
            }
          ],
          "name": "ERC721InvalidSender",
          "type": "error"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            }
          ],
          "name": "ERC721NonexistentToken",
          "type": "error"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "index",
              "type": "uint256"
            }
          ],
          "name": "ERC721OutOfBoundsIndex",
          "type": "error"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            }
          ],
          "name": "OwnableInvalidOwner",
          "type": "error"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            }
          ],
          "name": "OwnableUnauthorizedAccount",
          "type": "error"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "indexed": true,
              "internalType": "address",
              "name": "approved",
              "type": "address"
            },
            {
              "indexed": true,
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            }
          ],
          "name": "Approval",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "indexed": true,
              "internalType": "address",
              "name": "operator",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "bool",
              "name": "approved",
              "type": "bool"
            }
          ],
          "name": "ApprovalForAll",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "_fromTokenId",
              "type": "uint256"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "_toTokenId",
              "type": "uint256"
            }
          ],
          "name": "BatchMetadataUpdate",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "_tokenId",
              "type": "uint256"
            }
          ],
          "name": "MetadataUpdate",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "address",
              "name": "previousOwner",
              "type": "address"
            },
            {
              "indexed": true,
              "internalType": "address",
              "name": "newOwner",
              "type": "address"
            }
          ],
          "name": "OwnershipTransferred",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "indexed": true,
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "indexed": true,
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            }
          ],
          "name": "Transfer",
          "type": "event"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            }
          ],
          "name": "approve",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            }
          ],
          "name": "balanceOf",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            }
          ],
          "name": "burn",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            }
          ],
          "name": "getApproved",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "operator",
              "type": "address"
            }
          ],
          "name": "isApprovedForAll",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "_tokenId",
              "type": "uint256"
            }
          ],
          "name": "mintWithSpecificTokenId",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "name",
          "outputs": [
            {
              "internalType": "string",
              "name": "",
              "type": "string"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "owner",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            }
          ],
          "name": "ownerOf",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "renounceOwnership",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            }
          ],
          "name": "safeMint",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            }
          ],
          "name": "safeTransferFrom",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            }
          ],
          "name": "safeTransferFrom",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "operator",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "approved",
              "type": "bool"
            }
          ],
          "name": "setApprovalForAll",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "bytes4",
              "name": "interfaceId",
              "type": "bytes4"
            }
          ],
          "name": "supportsInterface",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "symbol",
          "outputs": [
            {
              "internalType": "string",
              "name": "",
              "type": "string"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "index",
              "type": "uint256"
            }
          ],
          "name": "tokenByIndex",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "index",
              "type": "uint256"
            }
          ],
          "name": "tokenOfOwnerByIndex",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            }
          ],
          "name": "tokenURI",
          "outputs": [
            {
              "internalType": "string",
              "name": "",
              "type": "string"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "totalSupply",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "from",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "to",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            }
          ],
          "name": "transferFrom",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "newOwner",
              "type": "address"
            }
          ],
          "name": "transferOwnership",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        }
      ],
      "bytecode": "0x608060405234801561001057600080fd5b506040516133f43803806133f48339818101604052810190610032919061031f565b8181338282816000908161004691906105b8565b50806001908161005691906105b8565b505050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036100cb5760006040517f1e4fbdf70000000000000000000000000000000000000000000000000000000081526004016100c291906106cb565b60405180910390fd5b6100da816100e460201b60201c565b50505050506106e6565b6000600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600b60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610211826101c8565b810181811067ffffffffffffffff821117156102305761022f6101d9565b5b80604052505050565b60006102436101aa565b905061024f8282610208565b919050565b600067ffffffffffffffff82111561026f5761026e6101d9565b5b610278826101c8565b9050602081019050919050565b60005b838110156102a3578082015181840152602081019050610288565b60008484015250505050565b60006102c26102bd84610254565b610239565b9050828152602081018484840111156102de576102dd6101c3565b5b6102e9848285610285565b509392505050565b600082601f830112610306576103056101be565b5b81516103168482602086016102af565b91505092915050565b60008060408385031215610336576103356101b4565b5b600083015167ffffffffffffffff811115610354576103536101b9565b5b610360858286016102f1565b925050602083015167ffffffffffffffff811115610381576103806101b9565b5b61038d858286016102f1565b9150509250929050565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806103e957607f821691505b6020821081036103fc576103fb6103a2565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026104647fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82610427565b61046e8683610427565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b60006104b56104b06104ab84610486565b610490565b610486565b9050919050565b6000819050919050565b6104cf8361049a565b6104e36104db826104bc565b848454610434565b825550505050565b600090565b6104f86104eb565b6105038184846104c6565b505050565b5b818110156105275761051c6000826104f0565b600181019050610509565b5050565b601f82111561056c5761053d81610402565b61054684610417565b81016020851015610555578190505b61056961056185610417565b830182610508565b50505b505050565b600082821c905092915050565b600061058f60001984600802610571565b1980831691505092915050565b60006105a8838361057e565b9150826002028217905092915050565b6105c182610397565b67ffffffffffffffff8111156105da576105d96101d9565b5b6105e482546103d1565b6105ef82828561052b565b600060209050601f8311600181146106225760008415610610578287015190505b61061a858261059c565b865550610682565b601f19841661063086610402565b60005b8281101561065857848901518255600182019150602085019450602081019050610633565b868310156106755784890151610671601f89168261057e565b8355505b6001600288020188555050505b505050505050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006106b58261068a565b9050919050565b6106c5816106aa565b82525050565b60006020820190506106e060008301846106bc565b92915050565b612cff806106f56000396000f3fe608060405234801561001057600080fd5b50600436106101425760003560e01c80634f6ccce7116100b857806395d89b411161007c57806395d89b4114610387578063a22cb465146103a5578063b88d4fde146103c1578063c87b56dd146103dd578063e985e9c51461040d578063f2fde38b1461043d57610142565b80634f6ccce7146102cf5780636352211e146102ff57806370a082311461032f578063715018a61461035f5780638da5cb5b1461036957610142565b806323b872dd1161010a57806323b872dd146101ff5780632f745c591461021b57806330b2c5961461024b57806340d097c31461026757806342842e0e1461029757806342966c68146102b357610142565b806301ffc9a71461014757806306fdde0314610177578063081812fc14610195578063095ea7b3146101c557806318160ddd146101e1575b600080fd5b610161600480360381019061015c919061218d565b610459565b60405161016e91906121d5565b60405180910390f35b61017f61046b565b60405161018c9190612280565b60405180910390f35b6101af60048036038101906101aa91906122d8565b6104fd565b6040516101bc9190612346565b60405180910390f35b6101df60048036038101906101da919061238d565b610519565b005b6101e961052f565b6040516101f691906123dc565b60405180910390f35b610219600480360381019061021491906123f7565b61053c565b005b6102356004803603810190610230919061238d565b61063e565b60405161024291906123dc565b60405180910390f35b6102656004803603810190610260919061238d565b6106e7565b005b610281600480360381019061027c919061244a565b6106f5565b60405161028e91906123dc565b60405180910390f35b6102b160048036038101906102ac91906123f7565b61074f565b005b6102cd60048036038101906102c891906122d8565b61076f565b005b6102e960048036038101906102e491906122d8565b610786565b6040516102f691906123dc565b60405180910390f35b610319600480360381019061031491906122d8565b6107fc565b6040516103269190612346565b60405180910390f35b6103496004803603810190610344919061244a565b61080e565b60405161035691906123dc565b60405180910390f35b6103676108c8565b005b6103716108dc565b60405161037e9190612346565b60405180910390f35b61038f610906565b60405161039c9190612280565b60405180910390f35b6103bf60048036038101906103ba91906124a3565b610998565b005b6103db60048036038101906103d69190612618565b6109ae565b005b6103f760048036038101906103f291906122d8565b6109d3565b6040516104049190612280565b60405180910390f35b6104276004803603810190610422919061269b565b6109e5565b60405161043491906121d5565b60405180910390f35b6104576004803603810190610452919061244a565b610a79565b005b600061046482610aff565b9050919050565b60606000805461047a9061270a565b80601f01602080910402602001604051908101604052809291908181526020018280546104a69061270a565b80156104f35780601f106104c8576101008083540402835291602001916104f3565b820191906000526020600020905b8154815290600101906020018083116104d657829003601f168201915b5050505050905090565b600061050882610b60565b5061051282610be8565b9050919050565b61052b8282610526610c25565b610c2d565b5050565b6000600880549050905090565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036105ae5760006040517f64a0ae920000000000000000000000000000000000000000000000000000000081526004016105a59190612346565b60405180910390fd5b60006105c283836105bd610c25565b610c3f565b90508373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610638578382826040517f64283d7b00000000000000000000000000000000000000000000000000000000815260040161062f9392919061273b565b60405180910390fd5b50505050565b60006106498361080e565b821061068e5782826040517fa57d13dc000000000000000000000000000000000000000000000000000000008152600401610685929190612772565b60405180910390fd5b600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002054905092915050565b6106f18282610c55565b5050565b60006106ff610c73565b6000600c6000815480929190610714906127ca565b9190505590506107248382610c55565b61074681604051806060016040528060358152602001612c9560359139610cfa565b80915050919050565b61076a838383604051806020016040528060008152506109ae565b505050565b61078260008261077d610c25565b610c3f565b5050565b600061079061052f565b82106107d6576000826040517fa57d13dc0000000000000000000000000000000000000000000000000000000081526004016107cd929190612772565b60405180910390fd5b600882815481106107ea576107e9612812565b5b90600052602060002001549050919050565b600061080782610b60565b9050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036108815760006040517f89c62b640000000000000000000000000000000000000000000000000000000081526004016108789190612346565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6108d0610c73565b6108da6000610d56565b565b6000600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6060600180546109159061270a565b80601f01602080910402602001604051908101604052809291908181526020018280546109419061270a565b801561098e5780601f106109635761010080835404028352916020019161098e565b820191906000526020600020905b81548152906001019060200180831161097157829003601f168201915b5050505050905090565b6109aa6109a3610c25565b8383610e1c565b5050565b6109b984848461053c565b6109cd6109c4610c25565b85858585610f8b565b50505050565b60606109de8261113c565b9050919050565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b610a81610c73565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610af35760006040517f1e4fbdf7000000000000000000000000000000000000000000000000000000008152600401610aea9190612346565b60405180910390fd5b610afc81610d56565b50565b6000634906490660e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480610b595750610b588261124f565b5b9050919050565b600080610b6c836112c9565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610bdf57826040517f7e273289000000000000000000000000000000000000000000000000000000008152600401610bd691906123dc565b60405180910390fd5b80915050919050565b60006004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600033905090565b610c3a8383836001611306565b505050565b6000610c4c8484846114cb565b90509392505050565b610c6f8282604051806020016040528060008152506115e8565b5050565b610c7b610c25565b73ffffffffffffffffffffffffffffffffffffffff16610c996108dc565b73ffffffffffffffffffffffffffffffffffffffff1614610cf857610cbc610c25565b6040517f118cdaa7000000000000000000000000000000000000000000000000000000008152600401610cef9190612346565b60405180910390fd5b565b80600a60008481526020019081526020016000209081610d1a91906129ed565b507ff8e1a15aba9398e019f0b49df1a4fde98ee17ae345cb5f6b5e2c27f5033e8ce782604051610d4a91906123dc565b60405180910390a15050565b6000600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600b60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610e8d57816040517f5b08ba18000000000000000000000000000000000000000000000000000000008152600401610e849190612346565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051610f7e91906121d5565b60405180910390a3505050565b60008373ffffffffffffffffffffffffffffffffffffffff163b1115611135578273ffffffffffffffffffffffffffffffffffffffff1663150b7a02868685856040518563ffffffff1660e01b8152600401610fea9493929190612b14565b6020604051808303816000875af192505050801561102657506040513d601f19601f820116820180604052508101906110239190612b75565b60015b6110aa573d8060008114611056576040519150601f19603f3d011682016040523d82523d6000602084013e61105b565b606091505b5060008151036110a257836040517f64a0ae920000000000000000000000000000000000000000000000000000000081526004016110999190612346565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161461113357836040517f64a0ae9200000000000000000000000000000000000000000000000000000000815260040161112a9190612346565b60405180910390fd5b505b5050505050565b606061114782610b60565b506000600a600084815260200190815260200160002080546111689061270a565b80601f01602080910402602001604051908101604052809291908181526020018280546111949061270a565b80156111e15780601f106111b6576101008083540402835291602001916111e1565b820191906000526020600020905b8154815290600101906020018083116111c457829003601f168201915b5050505050905060006111f261160c565b9050600081510361120757819250505061124a565b60008251111561123c578082604051602001611224929190612bde565b6040516020818303038152906040529250505061124a565b61124584611623565b925050505b919050565b60007f780e9d63000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806112c257506112c18261168c565b5b9050919050565b60006002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b808061133f5750600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614155b1561147357600061134f84610b60565b9050600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141580156113ba57508273ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614155b80156113cd57506113cb81846109e5565b155b1561140f57826040517fa9fbf51f0000000000000000000000000000000000000000000000000000000081526004016114069190612346565b60405180910390fd5b811561147157838573ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45b505b836004600085815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050505050565b6000806114d985858561176e565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361151d5761151884611988565b61155c565b8473ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161461155b5761155a81856119d1565b5b5b600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff160361159e5761159984611abc565b6115dd565b8473ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146115dc576115db8585611b8d565b5b5b809150509392505050565b6115f28383611c18565b6116076115fd610c25565b6000858585610f8b565b505050565b606060405180602001604052806000815250905090565b606061162e82610b60565b50600061163961160c565b905060008151116116595760405180602001604052806000815250611684565b8061166384611d11565b604051602001611674929190612bde565b6040516020818303038152906040525b915050919050565b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061175757507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80611767575061176682611ddf565b5b9050919050565b60008061177a846112c9565b9050600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16146117bc576117bb818486611e49565b5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161461184d576117fe600085600080611306565b6001600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055505b600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16146118d0576001600360008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055505b846002600086815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550838573ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4809150509392505050565b6008805490506009600083815260200190815260200160002081905550600881908060018154018082558091505060019003906000526020600020016000909190919091505550565b60006119dc8361080e565b90506000600760008481526020019081526020016000205490506000600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050828214611a885760008160008581526020019081526020016000205490508082600085815260200190815260200160002081905550826007600083815260200190815260200160002081905550505b6007600085815260200190815260200160002060009055806000848152602001908152602001600020600090555050505050565b60006001600880549050611ad09190612c02565b9050600060096000848152602001908152602001600020549050600060088381548110611b0057611aff612812565b5b906000526020600020015490508060088381548110611b2257611b21612812565b5b906000526020600020018190555081600960008381526020019081526020016000208190555060096000858152602001908152602001600020600090556008805480611b7157611b70612c36565b5b6001900381819060005260206000200160009055905550505050565b60006001611b9a8461080e565b611ba49190612c02565b905081600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002081905550806007600084815260200190815260200160002081905550505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611c8a5760006040517f64a0ae92000000000000000000000000000000000000000000000000000000008152600401611c819190612346565b60405180910390fd5b6000611c9883836000610c3f565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614611d0c5760006040517f73c6ac6e000000000000000000000000000000000000000000000000000000008152600401611d039190612346565b60405180910390fd5b505050565b606060006001611d2084611f0d565b01905060008167ffffffffffffffff811115611d3f57611d3e6124ed565b5b6040519080825280601f01601f191660200182016040528015611d715781602001600182028036833780820191505090505b509050600082602001820190505b600115611dd4578080600190039150507f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a8581611dc857611dc7612c65565b5b04945060008503611d7f575b819350505050919050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b611e54838383612060565b611f0857600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603611ec957806040517f7e273289000000000000000000000000000000000000000000000000000000008152600401611ec091906123dc565b60405180910390fd5b81816040517f177e802f000000000000000000000000000000000000000000000000000000008152600401611eff929190612772565b60405180910390fd5b505050565b600080600090507a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008310611f6b577a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008381611f6157611f60612c65565b5b0492506040810190505b6d04ee2d6d415b85acef81000000008310611fa8576d04ee2d6d415b85acef81000000008381611f9e57611f9d612c65565b5b0492506020810190505b662386f26fc100008310611fd757662386f26fc100008381611fcd57611fcc612c65565b5b0492506010810190505b6305f5e1008310612000576305f5e1008381611ff657611ff5612c65565b5b0492506008810190505b612710831061202557612710838161201b5761201a612c65565b5b0492506004810190505b60648310612048576064838161203e5761203d612c65565b5b0492506002810190505b600a8310612057576001810190505b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415801561211857508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614806120d957506120d884846109e5565b5b8061211757508273ffffffffffffffffffffffffffffffffffffffff166120ff83610be8565b73ffffffffffffffffffffffffffffffffffffffff16145b5b90509392505050565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b61216a81612135565b811461217557600080fd5b50565b60008135905061218781612161565b92915050565b6000602082840312156121a3576121a261212b565b5b60006121b184828501612178565b91505092915050565b60008115159050919050565b6121cf816121ba565b82525050565b60006020820190506121ea60008301846121c6565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561222a57808201518184015260208101905061220f565b60008484015250505050565b6000601f19601f8301169050919050565b6000612252826121f0565b61225c81856121fb565b935061226c81856020860161220c565b61227581612236565b840191505092915050565b6000602082019050818103600083015261229a8184612247565b905092915050565b6000819050919050565b6122b5816122a2565b81146122c057600080fd5b50565b6000813590506122d2816122ac565b92915050565b6000602082840312156122ee576122ed61212b565b5b60006122fc848285016122c3565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061233082612305565b9050919050565b61234081612325565b82525050565b600060208201905061235b6000830184612337565b92915050565b61236a81612325565b811461237557600080fd5b50565b60008135905061238781612361565b92915050565b600080604083850312156123a4576123a361212b565b5b60006123b285828601612378565b92505060206123c3858286016122c3565b9150509250929050565b6123d6816122a2565b82525050565b60006020820190506123f160008301846123cd565b92915050565b6000806000606084860312156124105761240f61212b565b5b600061241e86828701612378565b935050602061242f86828701612378565b9250506040612440868287016122c3565b9150509250925092565b6000602082840312156124605761245f61212b565b5b600061246e84828501612378565b91505092915050565b612480816121ba565b811461248b57600080fd5b50565b60008135905061249d81612477565b92915050565b600080604083850312156124ba576124b961212b565b5b60006124c885828601612378565b92505060206124d98582860161248e565b9150509250929050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61252582612236565b810181811067ffffffffffffffff82111715612544576125436124ed565b5b80604052505050565b6000612557612121565b9050612563828261251c565b919050565b600067ffffffffffffffff821115612583576125826124ed565b5b61258c82612236565b9050602081019050919050565b82818337600083830152505050565b60006125bb6125b684612568565b61254d565b9050828152602081018484840111156125d7576125d66124e8565b5b6125e2848285612599565b509392505050565b600082601f8301126125ff576125fe6124e3565b5b813561260f8482602086016125a8565b91505092915050565b600080600080608085870312156126325761263161212b565b5b600061264087828801612378565b945050602061265187828801612378565b9350506040612662878288016122c3565b925050606085013567ffffffffffffffff81111561268357612682612130565b5b61268f878288016125ea565b91505092959194509250565b600080604083850312156126b2576126b161212b565b5b60006126c085828601612378565b92505060206126d185828601612378565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061272257607f821691505b602082108103612735576127346126db565b5b50919050565b60006060820190506127506000830186612337565b61275d60208301856123cd565b61276a6040830184612337565b949350505050565b60006040820190506127876000830185612337565b61279460208301846123cd565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006127d5826122a2565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036128075761280661279b565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026128a37fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82612866565b6128ad8683612866565b95508019841693508086168417925050509392505050565b6000819050919050565b60006128ea6128e56128e0846122a2565b6128c5565b6122a2565b9050919050565b6000819050919050565b612904836128cf565b612918612910826128f1565b848454612873565b825550505050565b600090565b61292d612920565b6129388184846128fb565b505050565b5b8181101561295c57612951600082612925565b60018101905061293e565b5050565b601f8211156129a15761297281612841565b61297b84612856565b8101602085101561298a578190505b61299e61299685612856565b83018261293d565b50505b505050565b600082821c905092915050565b60006129c4600019846008026129a6565b1980831691505092915050565b60006129dd83836129b3565b9150826002028217905092915050565b6129f6826121f0565b67ffffffffffffffff811115612a0f57612a0e6124ed565b5b612a19825461270a565b612a24828285612960565b600060209050601f831160018114612a575760008415612a45578287015190505b612a4f85826129d1565b865550612ab7565b601f198416612a6586612841565b60005b82811015612a8d57848901518255600182019150602085019450602081019050612a68565b86831015612aaa5784890151612aa6601f8916826129b3565b8355505b6001600288020188555050505b505050505050565b600081519050919050565b600082825260208201905092915050565b6000612ae682612abf565b612af08185612aca565b9350612b0081856020860161220c565b612b0981612236565b840191505092915050565b6000608082019050612b296000830187612337565b612b366020830186612337565b612b4360408301856123cd565b8181036060830152612b558184612adb565b905095945050505050565b600081519050612b6f81612161565b92915050565b600060208284031215612b8b57612b8a61212b565b5b6000612b9984828501612b60565b91505092915050565b600081905092915050565b6000612bb8826121f0565b612bc28185612ba2565b9350612bd281856020860161220c565b80840191505092915050565b6000612bea8285612bad565b9150612bf68284612bad565b91508190509392505050565b6000612c0d826122a2565b9150612c18836122a2565b9250828203905081811115612c3057612c2f61279b565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fdfe697066733a2f2f516d62464b31593269633248325558767978476d51697962417179416b5050656743624c6f644a47573362714d66a2646970667358221220b83569333861773d1457ad47106fd59db66ac713987444b5a148145cd98df5e864736f6c634300081c0033",
      "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101425760003560e01c80634f6ccce7116100b857806395d89b411161007c57806395d89b4114610387578063a22cb465146103a5578063b88d4fde146103c1578063c87b56dd146103dd578063e985e9c51461040d578063f2fde38b1461043d57610142565b80634f6ccce7146102cf5780636352211e146102ff57806370a082311461032f578063715018a61461035f5780638da5cb5b1461036957610142565b806323b872dd1161010a57806323b872dd146101ff5780632f745c591461021b57806330b2c5961461024b57806340d097c31461026757806342842e0e1461029757806342966c68146102b357610142565b806301ffc9a71461014757806306fdde0314610177578063081812fc14610195578063095ea7b3146101c557806318160ddd146101e1575b600080fd5b610161600480360381019061015c919061218d565b610459565b60405161016e91906121d5565b60405180910390f35b61017f61046b565b60405161018c9190612280565b60405180910390f35b6101af60048036038101906101aa91906122d8565b6104fd565b6040516101bc9190612346565b60405180910390f35b6101df60048036038101906101da919061238d565b610519565b005b6101e961052f565b6040516101f691906123dc565b60405180910390f35b610219600480360381019061021491906123f7565b61053c565b005b6102356004803603810190610230919061238d565b61063e565b60405161024291906123dc565b60405180910390f35b6102656004803603810190610260919061238d565b6106e7565b005b610281600480360381019061027c919061244a565b6106f5565b60405161028e91906123dc565b60405180910390f35b6102b160048036038101906102ac91906123f7565b61074f565b005b6102cd60048036038101906102c891906122d8565b61076f565b005b6102e960048036038101906102e491906122d8565b610786565b6040516102f691906123dc565b60405180910390f35b610319600480360381019061031491906122d8565b6107fc565b6040516103269190612346565b60405180910390f35b6103496004803603810190610344919061244a565b61080e565b60405161035691906123dc565b60405180910390f35b6103676108c8565b005b6103716108dc565b60405161037e9190612346565b60405180910390f35b61038f610906565b60405161039c9190612280565b60405180910390f35b6103bf60048036038101906103ba91906124a3565b610998565b005b6103db60048036038101906103d69190612618565b6109ae565b005b6103f760048036038101906103f291906122d8565b6109d3565b6040516104049190612280565b60405180910390f35b6104276004803603810190610422919061269b565b6109e5565b60405161043491906121d5565b60405180910390f35b6104576004803603810190610452919061244a565b610a79565b005b600061046482610aff565b9050919050565b60606000805461047a9061270a565b80601f01602080910402602001604051908101604052809291908181526020018280546104a69061270a565b80156104f35780601f106104c8576101008083540402835291602001916104f3565b820191906000526020600020905b8154815290600101906020018083116104d657829003601f168201915b5050505050905090565b600061050882610b60565b5061051282610be8565b9050919050565b61052b8282610526610c25565b610c2d565b5050565b6000600880549050905090565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036105ae5760006040517f64a0ae920000000000000000000000000000000000000000000000000000000081526004016105a59190612346565b60405180910390fd5b60006105c283836105bd610c25565b610c3f565b90508373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610638578382826040517f64283d7b00000000000000000000000000000000000000000000000000000000815260040161062f9392919061273b565b60405180910390fd5b50505050565b60006106498361080e565b821061068e5782826040517fa57d13dc000000000000000000000000000000000000000000000000000000008152600401610685929190612772565b60405180910390fd5b600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002054905092915050565b6106f18282610c55565b5050565b60006106ff610c73565b6000600c6000815480929190610714906127ca565b9190505590506107248382610c55565b61074681604051806060016040528060358152602001612c9560359139610cfa565b80915050919050565b61076a838383604051806020016040528060008152506109ae565b505050565b61078260008261077d610c25565b610c3f565b5050565b600061079061052f565b82106107d6576000826040517fa57d13dc0000000000000000000000000000000000000000000000000000000081526004016107cd929190612772565b60405180910390fd5b600882815481106107ea576107e9612812565b5b90600052602060002001549050919050565b600061080782610b60565b9050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036108815760006040517f89c62b640000000000000000000000000000000000000000000000000000000081526004016108789190612346565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6108d0610c73565b6108da6000610d56565b565b6000600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6060600180546109159061270a565b80601f01602080910402602001604051908101604052809291908181526020018280546109419061270a565b801561098e5780601f106109635761010080835404028352916020019161098e565b820191906000526020600020905b81548152906001019060200180831161097157829003601f168201915b5050505050905090565b6109aa6109a3610c25565b8383610e1c565b5050565b6109b984848461053c565b6109cd6109c4610c25565b85858585610f8b565b50505050565b60606109de8261113c565b9050919050565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b610a81610c73565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610af35760006040517f1e4fbdf7000000000000000000000000000000000000000000000000000000008152600401610aea9190612346565b60405180910390fd5b610afc81610d56565b50565b6000634906490660e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480610b595750610b588261124f565b5b9050919050565b600080610b6c836112c9565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610bdf57826040517f7e273289000000000000000000000000000000000000000000000000000000008152600401610bd691906123dc565b60405180910390fd5b80915050919050565b60006004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600033905090565b610c3a8383836001611306565b505050565b6000610c4c8484846114cb565b90509392505050565b610c6f8282604051806020016040528060008152506115e8565b5050565b610c7b610c25565b73ffffffffffffffffffffffffffffffffffffffff16610c996108dc565b73ffffffffffffffffffffffffffffffffffffffff1614610cf857610cbc610c25565b6040517f118cdaa7000000000000000000000000000000000000000000000000000000008152600401610cef9190612346565b60405180910390fd5b565b80600a60008481526020019081526020016000209081610d1a91906129ed565b507ff8e1a15aba9398e019f0b49df1a4fde98ee17ae345cb5f6b5e2c27f5033e8ce782604051610d4a91906123dc565b60405180910390a15050565b6000600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600b60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610e8d57816040517f5b08ba18000000000000000000000000000000000000000000000000000000008152600401610e849190612346565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051610f7e91906121d5565b60405180910390a3505050565b60008373ffffffffffffffffffffffffffffffffffffffff163b1115611135578273ffffffffffffffffffffffffffffffffffffffff1663150b7a02868685856040518563ffffffff1660e01b8152600401610fea9493929190612b14565b6020604051808303816000875af192505050801561102657506040513d601f19601f820116820180604052508101906110239190612b75565b60015b6110aa573d8060008114611056576040519150601f19603f3d011682016040523d82523d6000602084013e61105b565b606091505b5060008151036110a257836040517f64a0ae920000000000000000000000000000000000000000000000000000000081526004016110999190612346565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161461113357836040517f64a0ae9200000000000000000000000000000000000000000000000000000000815260040161112a9190612346565b60405180910390fd5b505b5050505050565b606061114782610b60565b506000600a600084815260200190815260200160002080546111689061270a565b80601f01602080910402602001604051908101604052809291908181526020018280546111949061270a565b80156111e15780601f106111b6576101008083540402835291602001916111e1565b820191906000526020600020905b8154815290600101906020018083116111c457829003601f168201915b5050505050905060006111f261160c565b9050600081510361120757819250505061124a565b60008251111561123c578082604051602001611224929190612bde565b6040516020818303038152906040529250505061124a565b61124584611623565b925050505b919050565b60007f780e9d63000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806112c257506112c18261168c565b5b9050919050565b60006002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b808061133f5750600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614155b1561147357600061134f84610b60565b9050600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141580156113ba57508273ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614155b80156113cd57506113cb81846109e5565b155b1561140f57826040517fa9fbf51f0000000000000000000000000000000000000000000000000000000081526004016114069190612346565b60405180910390fd5b811561147157838573ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45b505b836004600085815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050505050565b6000806114d985858561176e565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361151d5761151884611988565b61155c565b8473ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161461155b5761155a81856119d1565b5b5b600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff160361159e5761159984611abc565b6115dd565b8473ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146115dc576115db8585611b8d565b5b5b809150509392505050565b6115f28383611c18565b6116076115fd610c25565b6000858585610f8b565b505050565b606060405180602001604052806000815250905090565b606061162e82610b60565b50600061163961160c565b905060008151116116595760405180602001604052806000815250611684565b8061166384611d11565b604051602001611674929190612bde565b6040516020818303038152906040525b915050919050565b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061175757507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80611767575061176682611ddf565b5b9050919050565b60008061177a846112c9565b9050600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16146117bc576117bb818486611e49565b5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161461184d576117fe600085600080611306565b6001600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055505b600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16146118d0576001600360008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055505b846002600086815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550838573ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4809150509392505050565b6008805490506009600083815260200190815260200160002081905550600881908060018154018082558091505060019003906000526020600020016000909190919091505550565b60006119dc8361080e565b90506000600760008481526020019081526020016000205490506000600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050828214611a885760008160008581526020019081526020016000205490508082600085815260200190815260200160002081905550826007600083815260200190815260200160002081905550505b6007600085815260200190815260200160002060009055806000848152602001908152602001600020600090555050505050565b60006001600880549050611ad09190612c02565b9050600060096000848152602001908152602001600020549050600060088381548110611b0057611aff612812565b5b906000526020600020015490508060088381548110611b2257611b21612812565b5b906000526020600020018190555081600960008381526020019081526020016000208190555060096000858152602001908152602001600020600090556008805480611b7157611b70612c36565b5b6001900381819060005260206000200160009055905550505050565b60006001611b9a8461080e565b611ba49190612c02565b905081600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002081905550806007600084815260200190815260200160002081905550505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611c8a5760006040517f64a0ae92000000000000000000000000000000000000000000000000000000008152600401611c819190612346565b60405180910390fd5b6000611c9883836000610c3f565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614611d0c5760006040517f73c6ac6e000000000000000000000000000000000000000000000000000000008152600401611d039190612346565b60405180910390fd5b505050565b606060006001611d2084611f0d565b01905060008167ffffffffffffffff811115611d3f57611d3e6124ed565b5b6040519080825280601f01601f191660200182016040528015611d715781602001600182028036833780820191505090505b509050600082602001820190505b600115611dd4578080600190039150507f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a8581611dc857611dc7612c65565b5b04945060008503611d7f575b819350505050919050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b611e54838383612060565b611f0857600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603611ec957806040517f7e273289000000000000000000000000000000000000000000000000000000008152600401611ec091906123dc565b60405180910390fd5b81816040517f177e802f000000000000000000000000000000000000000000000000000000008152600401611eff929190612772565b60405180910390fd5b505050565b600080600090507a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008310611f6b577a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008381611f6157611f60612c65565b5b0492506040810190505b6d04ee2d6d415b85acef81000000008310611fa8576d04ee2d6d415b85acef81000000008381611f9e57611f9d612c65565b5b0492506020810190505b662386f26fc100008310611fd757662386f26fc100008381611fcd57611fcc612c65565b5b0492506010810190505b6305f5e1008310612000576305f5e1008381611ff657611ff5612c65565b5b0492506008810190505b612710831061202557612710838161201b5761201a612c65565b5b0492506004810190505b60648310612048576064838161203e5761203d612c65565b5b0492506002810190505b600a8310612057576001810190505b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415801561211857508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614806120d957506120d884846109e5565b5b8061211757508273ffffffffffffffffffffffffffffffffffffffff166120ff83610be8565b73ffffffffffffffffffffffffffffffffffffffff16145b5b90509392505050565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b61216a81612135565b811461217557600080fd5b50565b60008135905061218781612161565b92915050565b6000602082840312156121a3576121a261212b565b5b60006121b184828501612178565b91505092915050565b60008115159050919050565b6121cf816121ba565b82525050565b60006020820190506121ea60008301846121c6565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561222a57808201518184015260208101905061220f565b60008484015250505050565b6000601f19601f8301169050919050565b6000612252826121f0565b61225c81856121fb565b935061226c81856020860161220c565b61227581612236565b840191505092915050565b6000602082019050818103600083015261229a8184612247565b905092915050565b6000819050919050565b6122b5816122a2565b81146122c057600080fd5b50565b6000813590506122d2816122ac565b92915050565b6000602082840312156122ee576122ed61212b565b5b60006122fc848285016122c3565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061233082612305565b9050919050565b61234081612325565b82525050565b600060208201905061235b6000830184612337565b92915050565b61236a81612325565b811461237557600080fd5b50565b60008135905061238781612361565b92915050565b600080604083850312156123a4576123a361212b565b5b60006123b285828601612378565b92505060206123c3858286016122c3565b9150509250929050565b6123d6816122a2565b82525050565b60006020820190506123f160008301846123cd565b92915050565b6000806000606084860312156124105761240f61212b565b5b600061241e86828701612378565b935050602061242f86828701612378565b9250506040612440868287016122c3565b9150509250925092565b6000602082840312156124605761245f61212b565b5b600061246e84828501612378565b91505092915050565b612480816121ba565b811461248b57600080fd5b50565b60008135905061249d81612477565b92915050565b600080604083850312156124ba576124b961212b565b5b60006124c885828601612378565b92505060206124d98582860161248e565b9150509250929050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61252582612236565b810181811067ffffffffffffffff82111715612544576125436124ed565b5b80604052505050565b6000612557612121565b9050612563828261251c565b919050565b600067ffffffffffffffff821115612583576125826124ed565b5b61258c82612236565b9050602081019050919050565b82818337600083830152505050565b60006125bb6125b684612568565b61254d565b9050828152602081018484840111156125d7576125d66124e8565b5b6125e2848285612599565b509392505050565b600082601f8301126125ff576125fe6124e3565b5b813561260f8482602086016125a8565b91505092915050565b600080600080608085870312156126325761263161212b565b5b600061264087828801612378565b945050602061265187828801612378565b9350506040612662878288016122c3565b925050606085013567ffffffffffffffff81111561268357612682612130565b5b61268f878288016125ea565b91505092959194509250565b600080604083850312156126b2576126b161212b565b5b60006126c085828601612378565b92505060206126d185828601612378565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061272257607f821691505b602082108103612735576127346126db565b5b50919050565b60006060820190506127506000830186612337565b61275d60208301856123cd565b61276a6040830184612337565b949350505050565b60006040820190506127876000830185612337565b61279460208301846123cd565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006127d5826122a2565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036128075761280661279b565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026128a37fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82612866565b6128ad8683612866565b95508019841693508086168417925050509392505050565b6000819050919050565b60006128ea6128e56128e0846122a2565b6128c5565b6122a2565b9050919050565b6000819050919050565b612904836128cf565b612918612910826128f1565b848454612873565b825550505050565b600090565b61292d612920565b6129388184846128fb565b505050565b5b8181101561295c57612951600082612925565b60018101905061293e565b5050565b601f8211156129a15761297281612841565b61297b84612856565b8101602085101561298a578190505b61299e61299685612856565b83018261293d565b50505b505050565b600082821c905092915050565b60006129c4600019846008026129a6565b1980831691505092915050565b60006129dd83836129b3565b9150826002028217905092915050565b6129f6826121f0565b67ffffffffffffffff811115612a0f57612a0e6124ed565b5b612a19825461270a565b612a24828285612960565b600060209050601f831160018114612a575760008415612a45578287015190505b612a4f85826129d1565b865550612ab7565b601f198416612a6586612841565b60005b82811015612a8d57848901518255600182019150602085019450602081019050612a68565b86831015612aaa5784890151612aa6601f8916826129b3565b8355505b6001600288020188555050505b505050505050565b600081519050919050565b600082825260208201905092915050565b6000612ae682612abf565b612af08185612aca565b9350612b0081856020860161220c565b612b0981612236565b840191505092915050565b6000608082019050612b296000830187612337565b612b366020830186612337565b612b4360408301856123cd565b8181036060830152612b558184612adb565b905095945050505050565b600081519050612b6f81612161565b92915050565b600060208284031215612b8b57612b8a61212b565b5b6000612b9984828501612b60565b91505092915050565b600081905092915050565b6000612bb8826121f0565b612bc28185612ba2565b9350612bd281856020860161220c565b80840191505092915050565b6000612bea8285612bad565b9150612bf68284612bad565b91508190509392505050565b6000612c0d826122a2565b9150612c18836122a2565b9250828203905081811115612c3057612c2f61279b565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fdfe697066733a2f2f516d62464b31593269633248325558767978476d51697962417179416b5050656743624c6f644a47573362714d66a2646970667358221220b83569333861773d1457ad47106fd59db66ac713987444b5a148145cd98df5e864736f6c634300081c0033",
      "linkReferences": {},
      "deployedLinkReferences": {},
      "devdoc": {
        "errors": {
          "ERC721EnumerableForbiddenBatchMint()": [
            {
              "details": "Batch mint is not allowed."
            }
          ],
          "ERC721IncorrectOwner(address,uint256,address)": [
            {
              "details": "Indicates an error related to the ownership over a particular token. Used in transfers.",
              "params": {
                "owner": "Address of the current owner of a token.",
                "sender": "Address whose tokens are being transferred.",
                "tokenId": "Identifier number of a token."
              }
            }
          ],
          "ERC721InsufficientApproval(address,uint256)": [
            {
              "details": "Indicates a failure with the `operator`’s approval. Used in transfers.",
              "params": {
                "operator": "Address that may be allowed to operate on tokens without being their owner.",
                "tokenId": "Identifier number of a token."
              }
            }
          ],
          "ERC721InvalidApprover(address)": [
            {
              "details": "Indicates a failure with the `approver` of a token to be approved. Used in approvals.",
              "params": {
                "approver": "Address initiating an approval operation."
              }
            }
          ],
          "ERC721InvalidOperator(address)": [
            {
              "details": "Indicates a failure with the `operator` to be approved. Used in approvals.",
              "params": {
                "operator": "Address that may be allowed to operate on tokens without being their owner."
              }
            }
          ],
          "ERC721InvalidOwner(address)": [
            {
              "details": "Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in ERC-20. Used in balance queries.",
              "params": {
                "owner": "Address of the current owner of a token."
              }
            }
          ],
          "ERC721InvalidReceiver(address)": [
            {
              "details": "Indicates a failure with the token `receiver`. Used in transfers.",
              "params": {
                "receiver": "Address to which tokens are being transferred."
              }
            }
          ],
          "ERC721InvalidSender(address)": [
            {
              "details": "Indicates a failure with the token `sender`. Used in transfers.",
              "params": {
                "sender": "Address whose tokens are being transferred."
              }
            }
          ],
          "ERC721NonexistentToken(uint256)": [
            {
              "details": "Indicates a `tokenId` whose `owner` is the zero address.",
              "params": {
                "tokenId": "Identifier number of a token."
              }
            }
          ],
          "ERC721OutOfBoundsIndex(address,uint256)": [
            {
              "details": "An `owner`'s token query was out of bounds for `index`. NOTE: The owner being `address(0)` indicates a global out of bounds index."
            }
          ],
          "OwnableInvalidOwner(address)": [
            {
              "details": "The owner is not a valid owner account. (eg. `address(0)`)"
            }
          ],
          "OwnableUnauthorizedAccount(address)": [
            {
              "details": "The caller account is not authorized to perform an operation."
            }
          ]
        },
        "events": {
          "Approval(address,address,uint256)": {
            "details": "Emitted when `owner` enables `approved` to manage the `tokenId` token."
          },
          "ApprovalForAll(address,address,bool)": {
            "details": "Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."
          },
          "BatchMetadataUpdate(uint256,uint256)": {
            "details": "This event emits when the metadata of a range of tokens is changed. So that the third-party platforms such as NFT market could timely update the images and related attributes of the NFTs."
          },
          "MetadataUpdate(uint256)": {
            "details": "This event emits when the metadata of a token is changed. So that the third-party platforms such as NFT market could timely update the images and related attributes of the NFT."
          },
          "Transfer(address,address,uint256)": {
            "details": "Emitted when `tokenId` token is transferred from `from` to `to`."
          }
        },
        "kind": "dev",
        "methods": {
          "approve(address,uint256)": {
            "details": "See {IERC721-approve}."
          },
          "balanceOf(address)": {
            "details": "See {IERC721-balanceOf}."
          },
          "burn(uint256)": {
            "details": "Burns `tokenId`. See {ERC721-_burn}. Requirements: - The caller must own `tokenId` or be an approved operator."
          },
          "getApproved(uint256)": {
            "details": "See {IERC721-getApproved}."
          },
          "isApprovedForAll(address,address)": {
            "details": "See {IERC721-isApprovedForAll}."
          },
          "name()": {
            "details": "See {IERC721Metadata-name}."
          },
          "owner()": {
            "details": "Returns the address of the current owner."
          },
          "ownerOf(uint256)": {
            "details": "See {IERC721-ownerOf}."
          },
          "renounceOwnership()": {
            "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
          },
          "safeTransferFrom(address,address,uint256)": {
            "details": "See {IERC721-safeTransferFrom}."
          },
          "safeTransferFrom(address,address,uint256,bytes)": {
            "details": "See {IERC721-safeTransferFrom}."
          },
          "setApprovalForAll(address,bool)": {
            "details": "See {IERC721-setApprovalForAll}."
          },
          "symbol()": {
            "details": "See {IERC721Metadata-symbol}."
          },
          "tokenByIndex(uint256)": {
            "details": "See {IERC721Enumerable-tokenByIndex}."
          },
          "tokenOfOwnerByIndex(address,uint256)": {
            "details": "See {IERC721Enumerable-tokenOfOwnerByIndex}."
          },
          "totalSupply()": {
            "details": "See {IERC721Enumerable-totalSupply}."
          },
          "transferFrom(address,address,uint256)": {
            "details": "See {IERC721-transferFrom}."
          },
          "transferOwnership(address)": {
            "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
          }
        },
        "version": 1
      },
      "evm": {
        "bytecode": {
          "functionDebugData": {
            "@_12884": {
              "entryPoint": null,
              "id": 12884,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "@_13897": {
              "entryPoint": null,
              "id": 13897,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "@_5968": {
              "entryPoint": null,
              "id": 5968,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "@_6304": {
              "entryPoint": null,
              "id": 6304,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "@_transferOwnership_6064": {
              "entryPoint": 228,
              "id": 6064,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "abi_decode_available_length_t_string_memory_ptr_fromMemory": {
              "entryPoint": 687,
              "id": null,
              "parameterSlots": 3,
              "returnSlots": 1
            },
            "abi_decode_t_string_memory_ptr_fromMemory": {
              "entryPoint": 753,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_tuple_t_string_memory_ptrt_string_memory_ptr_fromMemory": {
              "entryPoint": 799,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 2
            },
            "abi_encode_t_address_to_t_address_fromStack": {
              "entryPoint": 1724,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "abi_encode_tuple_t_address__to_t_address__fromStack_reversed": {
              "entryPoint": 1739,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "allocate_memory": {
              "entryPoint": 569,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "allocate_unbounded": {
              "entryPoint": 426,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 1
            },
            "array_allocation_size_t_string_memory_ptr": {
              "entryPoint": 596,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "array_dataslot_t_string_storage": {
              "entryPoint": 1026,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "array_length_t_string_memory_ptr": {
              "entryPoint": 919,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "clean_up_bytearray_end_slots_t_string_storage": {
              "entryPoint": 1323,
              "id": null,
              "parameterSlots": 3,
              "returnSlots": 0
            },
            "cleanup_t_address": {
              "entryPoint": 1706,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "cleanup_t_uint160": {
              "entryPoint": 1674,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "cleanup_t_uint256": {
              "entryPoint": 1158,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "clear_storage_range_t_bytes1": {
              "entryPoint": 1288,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "convert_t_uint256_to_t_uint256": {
              "entryPoint": 1178,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage": {
              "entryPoint": 1464,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "copy_memory_to_memory_with_cleanup": {
              "entryPoint": 645,
              "id": null,
              "parameterSlots": 3,
              "returnSlots": 0
            },
            "divide_by_32_ceil": {
              "entryPoint": 1047,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "extract_byte_array_length": {
              "entryPoint": 977,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "extract_used_part_and_set_length_of_short_byte_array": {
              "entryPoint": 1436,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "finalize_allocation": {
              "entryPoint": 520,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "identity": {
              "entryPoint": 1168,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "mask_bytes_dynamic": {
              "entryPoint": 1406,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "panic_error_0x22": {
              "entryPoint": 930,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "panic_error_0x41": {
              "entryPoint": 473,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "prepare_store_t_uint256": {
              "entryPoint": 1212,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d": {
              "entryPoint": 446,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae": {
              "entryPoint": 451,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db": {
              "entryPoint": 441,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b": {
              "entryPoint": 436,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "round_up_to_mul_of_32": {
              "entryPoint": 456,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "shift_left_dynamic": {
              "entryPoint": 1063,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "shift_right_unsigned_dynamic": {
              "entryPoint": 1393,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "storage_set_to_zero_t_uint256": {
              "entryPoint": 1264,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "update_byte_slice_dynamic32": {
              "entryPoint": 1076,
              "id": null,
              "parameterSlots": 3,
              "returnSlots": 1
            },
            "update_storage_value_t_uint256_to_t_uint256": {
              "entryPoint": 1222,
              "id": null,
              "parameterSlots": 3,
              "returnSlots": 0
            },
            "zero_value_for_split_t_uint256": {
              "entryPoint": 1259,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 1
            }
          },
          "generatedSources": [
            {
              "ast": {
                "nativeSrc": "0:9162:67",
                "nodeType": "YulBlock",
                "src": "0:9162:67",
                "statements": [
                  {
                    "body": {
                      "nativeSrc": "47:35:67",
                      "nodeType": "YulBlock",
                      "src": "47:35:67",
                      "statements": [
                        {
                          "nativeSrc": "57:19:67",
                          "nodeType": "YulAssignment",
                          "src": "57:19:67",
                          "value": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nativeSrc": "73:2:67",
                                "nodeType": "YulLiteral",
                                "src": "73:2:67",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nativeSrc": "67:5:67",
                              "nodeType": "YulIdentifier",
                              "src": "67:5:67"
                            },
                            "nativeSrc": "67:9:67",
                            "nodeType": "YulFunctionCall",
                            "src": "67:9:67"
                          },
                          "variableNames": [
                            {
                              "name": "memPtr",
                              "nativeSrc": "57:6:67",
                              "nodeType": "YulIdentifier",
                              "src": "57:6:67"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "allocate_unbounded",
                    "nativeSrc": "7:75:67",
                    "nodeType": "YulFunctionDefinition",
                    "returnVariables": [
                      {
                        "name": "memPtr",
                        "nativeSrc": "40:6:67",
                        "nodeType": "YulTypedName",
                        "src": "40:6:67",
                        "type": ""
                      }
                    ],
                    "src": "7:75:67"
                  },
                  {
                    "body": {
                      "nativeSrc": "177:28:67",
                      "nodeType": "YulBlock",
                      "src": "177:28:67",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nativeSrc": "194:1:67",
                                "nodeType": "YulLiteral",
                                "src": "194:1:67",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "197:1:67",
                                "nodeType": "YulLiteral",
                                "src": "197:1:67",
                                "type": "",
                                "value": "0"
                              }
                            ],
                            "functionName": {
                              "name": "revert",
                              "nativeSrc": "187:6:67",
                              "nodeType": "YulIdentifier",
                              "src": "187:6:67"
                            },
                            "nativeSrc": "187:12:67",
                            "nodeType": "YulFunctionCall",
                            "src": "187:12:67"
                          },
                          "nativeSrc": "187:12:67",
                          "nodeType": "YulExpressionStatement",
                          "src": "187:12:67"
                        }
                      ]
                    },
                    "name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
                    "nativeSrc": "88:117:67",
                    "nodeType": "YulFunctionDefinition",
                    "src": "88:117:67"
                  },
                  {
                    "body": {
                      "nativeSrc": "300:28:67",
                      "nodeType": "YulBlock",
                      "src": "300:28:67",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nativeSrc": "317:1:67",
                                "nodeType": "YulLiteral",
                                "src": "317:1:67",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "320:1:67",
                                "nodeType": "YulLiteral",
                                "src": "320:1:67",
                                "type": "",
                                "value": "0"
                              }
                            ],
                            "functionName": {
                              "name": "revert",
                              "nativeSrc": "310:6:67",
                              "nodeType": "YulIdentifier",
                              "src": "310:6:67"
                            },
                            "nativeSrc": "310:12:67",
                            "nodeType": "YulFunctionCall",
                            "src": "310:12:67"
                          },
                          "nativeSrc": "310:12:67",
                          "nodeType": "YulExpressionStatement",
                          "src": "310:12:67"
                        }
                      ]
                    },
                    "name": "revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db",
                    "nativeSrc": "211:117:67",
                    "nodeType": "YulFunctionDefinition",
                    "src": "211:117:67"
                  },
                  {
                    "body": {
                      "nativeSrc": "423:28:67",
                      "nodeType": "YulBlock",
                      "src": "423:28:67",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nativeSrc": "440:1:67",
                                "nodeType": "YulLiteral",
                                "src": "440:1:67",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "443:1:67",
                                "nodeType": "YulLiteral",
                                "src": "443:1:67",
                                "type": "",
                                "value": "0"
                              }
                            ],
                            "functionName": {
                              "name": "revert",
                              "nativeSrc": "433:6:67",
                              "nodeType": "YulIdentifier",
                              "src": "433:6:67"
                            },
                            "nativeSrc": "433:12:67",
                            "nodeType": "YulFunctionCall",
                            "src": "433:12:67"
                          },
                          "nativeSrc": "433:12:67",
                          "nodeType": "YulExpressionStatement",
                          "src": "433:12:67"
                        }
                      ]
                    },
                    "name": "revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d",
                    "nativeSrc": "334:117:67",
                    "nodeType": "YulFunctionDefinition",
                    "src": "334:117:67"
                  },
                  {
                    "body": {
                      "nativeSrc": "546:28:67",
                      "nodeType": "YulBlock",
                      "src": "546:28:67",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nativeSrc": "563:1:67",
                                "nodeType": "YulLiteral",
                                "src": "563:1:67",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "566:1:67",
                                "nodeType": "YulLiteral",
                                "src": "566:1:67",
                                "type": "",
                                "value": "0"
                              }
                            ],
                            "functionName": {
                              "name": "revert",
                              "nativeSrc": "556:6:67",
                              "nodeType": "YulIdentifier",
                              "src": "556:6:67"
                            },
                            "nativeSrc": "556:12:67",
                            "nodeType": "YulFunctionCall",
                            "src": "556:12:67"
                          },
                          "nativeSrc": "556:12:67",
                          "nodeType": "YulExpressionStatement",
                          "src": "556:12:67"
                        }
                      ]
                    },
                    "name": "revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae",
                    "nativeSrc": "457:117:67",
                    "nodeType": "YulFunctionDefinition",
                    "src": "457:117:67"
                  },
                  {
                    "body": {
                      "nativeSrc": "628:54:67",
                      "nodeType": "YulBlock",
                      "src": "628:54:67",
                      "statements": [
                        {
                          "nativeSrc": "638:38:67",
                          "nodeType": "YulAssignment",
                          "src": "638:38:67",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nativeSrc": "656:5:67",
                                    "nodeType": "YulIdentifier",
                                    "src": "656:5:67"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "663:2:67",
                                    "nodeType": "YulLiteral",
                                    "src": "663:2:67",
                                    "type": "",
                                    "value": "31"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "652:3:67",
                                  "nodeType": "YulIdentifier",
                                  "src": "652:3:67"
                                },
                                "nativeSrc": "652:14:67",
                                "nodeType": "YulFunctionCall",
                                "src": "652:14:67"
                              },
                              {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nativeSrc": "672:2:67",
                                    "nodeType": "YulLiteral",
                                    "src": "672:2:67",
                                    "type": "",
                                    "value": "31"
                                  }
                                ],
                                "functionName": {
                                  "name": "not",
                                  "nativeSrc": "668:3:67",
                                  "nodeType": "YulIdentifier",
                                  "src": "668:3:67"
                                },
                                "nativeSrc": "668:7:67",
                                "nodeType": "YulFunctionCall",
                                "src": "668:7:67"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nativeSrc": "648:3:67",
                              "nodeType": "YulIdentifier",
                              "src": "648:3:67"
                            },
                            "nativeSrc": "648:28:67",
                            "nodeType": "YulFunctionCall",
                            "src": "648:28:67"
                          },
                          "variableNames": [
                            {
                              "name": "result",
                              "nativeSrc": "638:6:67",
                              "nodeType": "YulIdentifier",
                              "src": "638:6:67"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "round_up_to_mul_of_32",
                    "nativeSrc": "580:102:67",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nativeSrc": "611:5:67",
                        "nodeType": "YulTypedName",
                        "src": "611:5:67",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "result",
                        "nativeSrc": "621:6:67",
                        "nodeType": "YulTypedName",
                        "src": "621:6:67",
                        "type": ""
                      }
                    ],
                    "src": "580:102:67"
                  },
                  {
                    "body": {
                      "nativeSrc": "716:152:67",
                      "nodeType": "YulBlock",
                      "src": "716:152:67",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nativeSrc": "733:1:67",
                                "nodeType": "YulLiteral",
                                "src": "733:1:67",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "736:77:67",
                                "nodeType": "YulLiteral",
                                "src": "736:77:67",
                                "type": "",
                                "value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nativeSrc": "726:6:67",
                              "nodeType": "YulIdentifier",
                              "src": "726:6:67"
                            },
                            "nativeSrc": "726:88:67",
                            "nodeType": "YulFunctionCall",
                            "src": "726:88:67"
                          },
                          "nativeSrc": "726:88:67",
                          "nodeType": "YulExpressionStatement",
                          "src": "726:88:67"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nativeSrc": "830:1:67",
                                "nodeType": "YulLiteral",
                                "src": "830:1:67",
                                "type": "",
                                "value": "4"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "833:4:67",
                                "nodeType": "YulLiteral",
                                "src": "833:4:67",
                                "type": "",
                                "value": "0x41"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nativeSrc": "823:6:67",
                              "nodeType": "YulIdentifier",
                              "src": "823:6:67"
                            },
                            "nativeSrc": "823:15:67",
                            "nodeType": "YulFunctionCall",
                            "src": "823:15:67"
                          },
                          "nativeSrc": "823:15:67",
                          "nodeType": "YulExpressionStatement",
                          "src": "823:15:67"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nativeSrc": "854:1:67",
                                "nodeType": "YulLiteral",
                                "src": "854:1:67",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "857:4:67",
                                "nodeType": "YulLiteral",
                                "src": "857:4:67",
                                "type": "",
                                "value": "0x24"
                              }
                            ],
                            "functionName": {
                              "name": "revert",
                              "nativeSrc": "847:6:67",
                              "nodeType": "YulIdentifier",
                              "src": "847:6:67"
                            },
                            "nativeSrc": "847:15:67",
                            "nodeType": "YulFunctionCall",
                            "src": "847:15:67"
                          },
                          "nativeSrc": "847:15:67",
                          "nodeType": "YulExpressionStatement",
                          "src": "847:15:67"
                        }
                      ]
                    },
                    "name": "panic_error_0x41",
                    "nativeSrc": "688:180:67",
                    "nodeType": "YulFunctionDefinition",
                    "src": "688:180:67"
                  },
                  {
                    "body": {
                      "nativeSrc": "917:238:67",
                      "nodeType": "YulBlock",
                      "src": "917:238:67",
                      "statements": [
                        {
                          "nativeSrc": "927:58:67",
                          "nodeType": "YulVariableDeclaration",
                          "src": "927:58:67",
                          "value": {
                            "arguments": [
                              {
                                "name": "memPtr",
                                "nativeSrc": "949:6:67",
                                "nodeType": "YulIdentifier",
                                "src": "949:6:67"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "size",
                                    "nativeSrc": "979:4:67",
                                    "nodeType": "YulIdentifier",
                                    "src": "979:4:67"
                                  }
                                ],
                                "functionName": {
                                  "name": "round_up_to_mul_of_32",
                                  "nativeSrc": "957:21:67",
                                  "nodeType": "YulIdentifier",
                                  "src": "957:21:67"
                                },
                                "nativeSrc": "957:27:67",
                                "nodeType": "YulFunctionCall",
                                "src": "957:27:67"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nativeSrc": "945:3:67",
                              "nodeType": "YulIdentifier",
                              "src": "945:3:67"
                            },
                            "nativeSrc": "945:40:67",
                            "nodeType": "YulFunctionCall",
                            "src": "945:40:67"
                          },
                          "variables": [
                            {
                              "name": "newFreePtr",
                              "nativeSrc": "931:10:67",
                              "nodeType": "YulTypedName",
                              "src": "931:10:67",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nativeSrc": "1096:22:67",
                            "nodeType": "YulBlock",
                            "src": "1096:22:67",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x41",
                                    "nativeSrc": "1098:16:67",
                                    "nodeType": "YulIdentifier",
                                    "src": "1098:16:67"
                                  },
                                  "nativeSrc": "1098:18:67",
                                  "nodeType": "YulFunctionCall",
                                  "src": "1098:18:67"
                                },
                                "nativeSrc": "1098:18:67",
                                "nodeType": "YulExpressionStatement",
                                "src": "1098:18:67"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "newFreePtr",
                                    "nativeSrc": "1039:10:67",
                                    "nodeType": "YulIdentifier",
                                    "src": "1039:10:67"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "1051:18:67",
                                    "nodeType": "YulLiteral",
                                    "src": "1051:18:67",
                                    "type": "",
                                    "value": "0xffffffffffffffff"
                                  }
                                ],
                                "functionName": {
                                  "name": "gt",
                                  "nativeSrc": "1036:2:67",
                                  "nodeType": "YulIdentifier",
                                  "src": "1036:2:67"
                                },
                                "nativeSrc": "1036:34:67",
                                "nodeType": "YulFunctionCall",
                                "src": "1036:34:67"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "newFreePtr",
                                    "nativeSrc": "1075:10:67",
                                    "nodeType": "YulIdentifier",
                                    "src": "1075:10:67"
                                  },
                                  {
                                    "name": "memPtr",
                                    "nativeSrc": "1087:6:67",
                                    "nodeType": "YulIdentifier",
                                    "src": "1087:6:67"
                                  }
                                ],
                                "functionName": {
                                  "name": "lt",
                                  "nativeSrc": "1072:2:67",
                                  "nodeType": "YulIdentifier",
                                  "src": "1072:2:67"
                                },
                                "nativeSrc": "1072:22:67",
                                "nodeType": "YulFunctionCall",
                                "src": "1072:22:67"
                              }
                            ],
                            "functionName": {
                              "name": "or",
                              "nativeSrc": "1033:2:67",
                              "nodeType": "YulIdentifier",
                              "src": "1033:2:67"
                            },
                            "nativeSrc": "1033:62:67",
                            "nodeType": "YulFunctionCall",
                            "src": "1033:62:67"
                          },
                          "nativeSrc": "1030:88:67",
                          "nodeType": "YulIf",
                          "src": "1030:88:67"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nativeSrc": "1134:2:67",
                                "nodeType": "YulLiteral",
                                "src": "1134:2:67",
                                "type": "",
                                "value": "64"
                              },
                              {
                                "name": "newFreePtr",
                                "nativeSrc": "1138:10:67",
                                "nodeType": "YulIdentifier",
                                "src": "1138:10:67"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nativeSrc": "1127:6:67",
                              "nodeType": "YulIdentifier",
                              "src": "1127:6:67"
                            },
                            "nativeSrc": "1127:22:67",
                            "nodeType": "YulFunctionCall",
                            "src": "1127:22:67"
                          },
                          "nativeSrc": "1127:22:67",
                          "nodeType": "YulExpressionStatement",
                          "src": "1127:22:67"
                        }
                      ]
                    },
                    "name": "finalize_allocation",
                    "nativeSrc": "874:281:67",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "memPtr",
                        "nativeSrc": "903:6:67",
                        "nodeType": "YulTypedName",
                        "src": "903:6:67",
                        "type": ""
                      },
                      {
                        "name": "size",
                        "nativeSrc": "911:4:67",
                        "nodeType": "YulTypedName",
                        "src": "911:4:67",
                        "type": ""
                      }
                    ],
                    "src": "874:281:67"
                  },
                  {
                    "body": {
                      "nativeSrc": "1202:88:67",
                      "nodeType": "YulBlock",
                      "src": "1202:88:67",
                      "statements": [
                        {
                          "nativeSrc": "1212:30:67",
                          "nodeType": "YulAssignment",
                          "src": "1212:30:67",
                          "value": {
                            "arguments": [],
                            "functionName": {
                              "name": "allocate_unbounded",
                              "nativeSrc": "1222:18:67",
                              "nodeType": "YulIdentifier",
                              "src": "1222:18:67"
                            },
                            "nativeSrc": "1222:20:67",
                            "nodeType": "YulFunctionCall",
                            "src": "1222:20:67"
                          },
                          "variableNames": [
                            {
                              "name": "memPtr",
                              "nativeSrc": "1212:6:67",
                              "nodeType": "YulIdentifier",
                              "src": "1212:6:67"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "memPtr",
                                "nativeSrc": "1271:6:67",
                                "nodeType": "YulIdentifier",
                                "src": "1271:6:67"
                              },
                              {
                                "name": "size",
                                "nativeSrc": "1279:4:67",
                                "nodeType": "YulIdentifier",
                                "src": "1279:4:67"
                              }
                            ],
                            "functionName": {
                              "name": "finalize_allocation",
                              "nativeSrc": "1251:19:67",
                              "nodeType": "YulIdentifier",
                              "src": "1251:19:67"
                            },
                            "nativeSrc": "1251:33:67",
                            "nodeType": "YulFunctionCall",
                            "src": "1251:33:67"
                          },
                          "nativeSrc": "1251:33:67",
                          "nodeType": "YulExpressionStatement",
                          "src": "1251:33:67"
                        }
                      ]
                    },
                    "name": "allocate_memory",
                    "nativeSrc": "1161:129:67",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "size",
                        "nativeSrc": "1186:4:67",
                        "nodeType": "YulTypedName",
                        "src": "1186:4:67",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "memPtr",
                        "nativeSrc": "1195:6:67",
                        "nodeType": "YulTypedName",
                        "src": "1195:6:67",
                        "type": ""
                      }
                    ],
                    "src": "1161:129:67"
                  },
                  {
                    "body": {
                      "nativeSrc": "1363:241:67",
                      "nodeType": "YulBlock",
                      "src": "1363:241:67",
                      "statements": [
                        {
                          "body": {
                            "nativeSrc": "1468:22:67",
                            "nodeType": "YulBlock",
                            "src": "1468:22:67",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x41",
                                    "nativeSrc": "1470:16:67",
                                    "nodeType": "YulIdentifier",
                                    "src": "1470:16:67"
                                  },
                                  "nativeSrc": "1470:18:67",
                                  "nodeType": "YulFunctionCall",
                                  "src": "1470:18:67"
                                },
                                "nativeSrc": "1470:18:67",
                                "nodeType": "YulExpressionStatement",
                                "src": "1470:18:67"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "length",
                                "nativeSrc": "1440:6:67",
                                "nodeType": "YulIdentifier",
                                "src": "1440:6:67"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "1448:18:67",
                                "nodeType": "YulLiteral",
                                "src": "1448:18:67",
                                "type": "",
                                "value": "0xffffffffffffffff"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nativeSrc": "1437:2:67",
                              "nodeType": "YulIdentifier",
                              "src": "1437:2:67"
                            },
                            "nativeSrc": "1437:30:67",
                            "nodeType": "YulFunctionCall",
                            "src": "1437:30:67"
                          },
                          "nativeSrc": "1434:56:67",
                          "nodeType": "YulIf",
                          "src": "1434:56:67"
                        },
                        {
                          "nativeSrc": "1500:37:67",
                          "nodeType": "YulAssignment",
                          "src": "1500:37:67",
                          "value": {
                            "arguments": [
                              {
                                "name": "length",
                                "nativeSrc": "1530:6:67",
                                "nodeType": "YulIdentifier",
                                "src": "1530:6:67"
                              }
                            ],
                            "functionName": {
                              "name": "round_up_to_mul_of_32",
                              "nativeSrc": "1508:21:67",
                              "nodeType": "YulIdentifier",
                              "src": "1508:21:67"
                            },
                            "nativeSrc": "1508:29:67",
                            "nodeType": "YulFunctionCall",
                            "src": "1508:29:67"
                          },
                          "variableNames": [
                            {
                              "name": "size",
                              "nativeSrc": "1500:4:67",
                              "nodeType": "YulIdentifier",
                              "src": "1500:4:67"
                            }
                          ]
                        },
                        {
                          "nativeSrc": "1574:23:67",
                          "nodeType": "YulAssignment",
                          "src": "1574:23:67",
                          "value": {
                            "arguments": [
                              {
                                "name": "size",
                                "nativeSrc": "1586:4:67",
                                "nodeType": "YulIdentifier",
                                "src": "1586:4:67"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "1592:4:67",
                                "nodeType": "YulLiteral",
                                "src": "1592:4:67",
                                "type": "",
                                "value": "0x20"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nativeSrc": "1582:3:67",
                              "nodeType": "YulIdentifier",
                              "src": "1582:3:67"
                            },
                            "nativeSrc": "1582:15:67",
                            "nodeType": "YulFunctionCall",
                            "src": "1582:15:67"
                          },
                          "variableNames": [
                            {
                              "name": "size",
                              "nativeSrc": "1574:4:67",
                              "nodeType": "YulIdentifier",
                              "src": "1574:4:67"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "array_allocation_size_t_string_memory_ptr",
                    "nativeSrc": "1296:308:67",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "length",
                        "nativeSrc": "1347:6:67",
                        "nodeType": "YulTypedName",
                        "src": "1347:6:67",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "size",
                        "nativeSrc": "1358:4:67",
                        "nodeType": "YulTypedName",
                        "src": "1358:4:67",
                        "type": ""
                      }
                    ],
                    "src": "1296:308:67"
                  },
                  {
                    "body": {
                      "nativeSrc": "1672:186:67",
                      "nodeType": "YulBlock",
                      "src": "1672:186:67",
                      "statements": [
                        {
                          "nativeSrc": "1683:10:67",
                          "nodeType": "YulVariableDeclaration",
                          "src": "1683:10:67",
                          "value": {
                            "kind": "number",
                            "nativeSrc": "1692:1:67",
                            "nodeType": "YulLiteral",
                            "src": "1692:1:67",
                            "type": "",
                            "value": "0"
                          },
                          "variables": [
                            {
                              "name": "i",
                              "nativeSrc": "1687:1:67",
                              "nodeType": "YulTypedName",
                              "src": "1687:1:67",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nativeSrc": "1752:63:67",
                            "nodeType": "YulBlock",
                            "src": "1752:63:67",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "arguments": [
                                        {
                                          "name": "dst",
                                          "nativeSrc": "1777:3:67",
                                          "nodeType": "YulIdentifier",
                                          "src": "1777:3:67"
                                        },
                                        {
                                          "name": "i",
                                          "nativeSrc": "1782:1:67",
                                          "nodeType": "YulIdentifier",
                                          "src": "1782:1:67"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nativeSrc": "1773:3:67",
                                        "nodeType": "YulIdentifier",
                                        "src": "1773:3:67"
                                      },
                                      "nativeSrc": "1773:11:67",
                                      "nodeType": "YulFunctionCall",
                                      "src": "1773:11:67"
                                    },
                                    {
                                      "arguments": [
                                        {
                                          "arguments": [
                                            {
                                              "name": "src",
                                              "nativeSrc": "1796:3:67",
                                              "nodeType": "YulIdentifier",
                                              "src": "1796:3:67"
                                            },
                                            {
                                              "name": "i",
                                              "nativeSrc": "1801:1:67",
                                              "nodeType": "YulIdentifier",
                                              "src": "1801:1:67"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "add",
                                            "nativeSrc": "1792:3:67",
                                            "nodeType": "YulIdentifier",
                                            "src": "1792:3:67"
                                          },
                                          "nativeSrc": "1792:11:67",
                                          "nodeType": "YulFunctionCall",
                                          "src": "1792:11:67"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "mload",
                                        "nativeSrc": "1786:5:67",
                                        "nodeType": "YulIdentifier",
                                        "src": "1786:5:67"
                                      },
                                      "nativeSrc": "1786:18:67",
                                      "nodeType": "YulFunctionCall",
                                      "src": "1786:18:67"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nativeSrc": "1766:6:67",
                                    "nodeType": "YulIdentifier",
                                    "src": "1766:6:67"
                                  },
                                  "nativeSrc": "1766:39:67",
                                  "nodeType": "YulFunctionCall",
                                  "src": "1766:39:67"
                                },
                                "nativeSrc": "1766:39:67",
                                "nodeType": "YulExpressionStatement",
                                "src": "1766:39:67"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "i",
                                "nativeSrc": "1713:1:67",
                                "nodeType": "YulIdentifier",
                                "src": "1713:1:67"
                              },
                              {
                                "name": "length",
                                "nativeSrc": "1716:6:67",
                                "nodeType": "YulIdentifier",
                                "src": "1716:6:67"
                              }
                            ],
                            "functionName": {
                              "name": "lt",
                              "nativeSrc": "1710:2:67",
                              "nodeType": "YulIdentifier",
                              "src": "1710:2:67"
                            },
                            "nativeSrc": "1710:13:67",
                            "nodeType": "YulFunctionCall",
                            "src": "1710:13:67"
                          },
                          "nativeSrc": "1702:113:67",
                          "nodeType": "YulForLoop",
                          "post": {
                            "nativeSrc": "1724:19:67",
                            "nodeType": "YulBlock",
                            "src": "1724:19:67",
                            "statements": [
                              {
                                "nativeSrc": "1726:15:67",
                                "nodeType": "YulAssignment",
                                "src": "1726:15:67",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "i",
                                      "nativeSrc": "1735:1:67",
                                      "nodeType": "YulIdentifier",
                                      "src": "1735:1:67"
                                    },
                                    {
                                      "kind": "number",
                                      "nativeSrc": "1738:2:67",
                                      "nodeType": "YulLiteral",
                                      "src": "1738:2:67",
                                      "type": "",
                                      "value": "32"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nativeSrc": "1731:3:67",
                                    "nodeType": "YulIdentifier",
                                    "src": "1731:3:67"
                                  },
                                  "nativeSrc": "1731:10:67",
                                  "nodeType": "YulFunctionCall",
                                  "src": "1731:10:67"
                                },
                                "variableNames": [
                                  {
                                    "name": "i",
                                    "nativeSrc": "1726:1:67",
                                    "nodeType": "YulIdentifier",
                                    "src": "1726:1:67"
                                  }
                                ]
                              }
                            ]
                          },
                          "pre": {
                            "nativeSrc": "1706:3:67",
                            "nodeType": "YulBlock",
                            "src": "1706:3:67",
                            "statements": []
                          },
                          "src": "1702:113:67"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dst",
                                    "nativeSrc": "1835:3:67",
                                    "nodeType": "YulIdentifier",
                                    "src": "1835:3:67"
                                  },
                                  {
                                    "name": "length",
                                    "nativeSrc": "1840:6:67",
                                    "nodeType": "YulIdentifier",
                                    "src": "1840:6:67"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "1831:3:67",
                                  "nodeType": "YulIdentifier",
                                  "src": "1831:3:67"
                                },
                                "nativeSrc": "1831:16:67",
                                "nodeType": "YulFunctionCall",
                                "src": "1831:16:67"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "1849:1:67",
                                "nodeType": "YulLiteral",
                                "src": "1849:1:67",
                                "type": "",
                                "value": "0"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nativeSrc": "1824:6:67",
                              "nodeType": "YulIdentifier",
                              "src": "1824:6:67"
                            },
                            "nativeSrc": "1824:27:67",
                            "nodeType": "YulFunctionCall",
                            "src": "1824:27:67"
                          },
                          "nativeSrc": "1824:27:67",
                          "nodeType": "YulExpressionStatement",
                          "src": "1824:27:67"
                        }
                      ]
                    },
                    "name": "copy_memory_to_memory_with_cleanup",
                    "nativeSrc": "1610:248:67",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "src",
                        "nativeSrc": "1654:3:67",
                        "nodeType": "YulTypedName",
                        "src": "1654:3:67",
                        "type": ""
                      },
                      {
                        "name": "dst",
                        "nativeSrc": "1659:3:67",
                        "nodeType": "YulTypedName",
                        "src": "1659:3:67",
                        "type": ""
                      },
                      {
                        "name": "length",
                        "nativeSrc": "1664:6:67",
                        "nodeType": "YulTypedName",
                        "src": "1664:6:67",
                        "type": ""
                      }
                    ],
                    "src": "1610:248:67"
                  },
                  {
                    "body": {
                      "nativeSrc": "1959:339:67",
                      "nodeType": "YulBlock",
                      "src": "1959:339:67",
                      "statements": [
                        {
                          "nativeSrc": "1969:75:67",
                          "nodeType": "YulAssignment",
                          "src": "1969:75:67",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "length",
                                    "nativeSrc": "2036:6:67",
                                    "nodeType": "YulIdentifier",
                                    "src": "2036:6:67"
                                  }
                                ],
                                "functionName": {
                                  "name": "array_allocation_size_t_string_memory_ptr",
                                  "nativeSrc": "1994:41:67",
                                  "nodeType": "YulIdentifier",
                                  "src": "1994:41:67"
                                },
                                "nativeSrc": "1994:49:67",
                                "nodeType": "YulFunctionCall",
                                "src": "1994:49:67"
                              }
                            ],
                            "functionName": {
                              "name": "allocate_memory",
                              "nativeSrc": "1978:15:67",
                              "nodeType": "YulIdentifier",
                              "src": "1978:15:67"
                            },
                            "nativeSrc": "1978:66:67",
                            "nodeType": "YulFunctionCall",
                            "src": "1978:66:67"
                          },
                          "variableNames": [
                            {
                              "name": "array",
                              "nativeSrc": "1969:5:67",
                              "nodeType": "YulIdentifier",
                              "src": "1969:5:67"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "array",
                                "nativeSrc": "2060:5:67",
                                "nodeType": "YulIdentifier",
                                "src": "2060:5:67"
                              },
                              {
                                "name": "length",
                                "nativeSrc": "2067:6:67",
                                "nodeType": "YulIdentifier",
                                "src": "2067:6:67"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nativeSrc": "2053:6:67",
                              "nodeType": "YulIdentifier",
                              "src": "2053:6:67"
                            },
                            "nativeSrc": "2053:21:67",
                            "nodeType": "YulFunctionCall",
                            "src": "2053:21:67"
                          },
                          "nativeSrc": "2053:21:67",
                          "nodeType": "YulExpressionStatement",
                          "src": "2053:21:67"
                        },
                        {
                          "nativeSrc": "2083:27:67",
                          "nodeType": "YulVariableDeclaration",
                          "src": "2083:27:67",
                          "value": {
                            "arguments": [
                              {
                                "name": "array",
                                "nativeSrc": "2098:5:67",
                                "nodeType": "YulIdentifier",
                                "src": "2098:5:67"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "2105:4:67",
                                "nodeType": "YulLiteral",
                                "src": "2105:4:67",
                                "type": "",
                                "value": "0x20"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nativeSrc": "2094:3:67",
                              "nodeType": "YulIdentifier",
                              "src": "2094:3:67"
                            },
                            "nativeSrc": "2094:16:67",
                            "nodeType": "YulFunctionCall",
                            "src": "2094:16:67"
                          },
                          "variables": [
                            {
                              "name": "dst",
                              "nativeSrc": "2087:3:67",
                              "nodeType": "YulTypedName",
                              "src": "2087:3:67",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nativeSrc": "2148:83:67",
                            "nodeType": "YulBlock",
                            "src": "2148:83:67",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae",
                                    "nativeSrc": "2150:77:67",
                                    "nodeType": "YulIdentifier",
                                    "src": "2150:77:67"
                                  },
                                  "nativeSrc": "2150:79:67",
                                  "nodeType": "YulFunctionCall",
                                  "src": "2150:79:67"
                                },
                                "nativeSrc": "2150:79:67",
                                "nodeType": "YulExpressionStatement",
                                "src": "2150:79:67"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "src",
                                    "nativeSrc": "2129:3:67",
                                    "nodeType": "YulIdentifier",
                                    "src": "2129:3:67"
                                  },
                                  {
                                    "name": "length",
                                    "nativeSrc": "2134:6:67",
                                    "nodeType": "YulIdentifier",
                                    "src": "2134:6:67"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "2125:3:67",
                                  "nodeType": "YulIdentifier",
                                  "src": "2125:3:67"
                                },
                                "nativeSrc": "2125:16:67",
                                "nodeType": "YulFunctionCall",
                                "src": "2125:16:67"
                              },
                              {
                                "name": "end",
                                "nativeSrc": "2143:3:67",
                                "nodeType": "YulIdentifier",
                                "src": "2143:3:67"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nativeSrc": "2122:2:67",
                              "nodeType": "YulIdentifier",
                              "src": "2122:2:67"
                            },
                            "nativeSrc": "2122:25:67",
                            "nodeType": "YulFunctionCall",
                            "src": "2122:25:67"
                          },
                          "nativeSrc": "2119:112:67",
                          "nodeType": "YulIf",
                          "src": "2119:112:67"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "src",
                                "nativeSrc": "2275:3:67",
                                "nodeType": "YulIdentifier",
                                "src": "2275:3:67"
                              },
                              {
                                "name": "dst",
                                "nativeSrc": "2280:3:67",
                                "nodeType": "YulIdentifier",
                                "src": "2280:3:67"
                              },
                              {
                                "name": "length",
                                "nativeSrc": "2285:6:67",
                                "nodeType": "YulIdentifier",
                                "src": "2285:6:67"
                              }
                            ],
                            "functionName": {
                              "name": "copy_memory_to_memory_with_cleanup",
                              "nativeSrc": "2240:34:67",
                              "nodeType": "YulIdentifier",
                              "src": "2240:34:67"
                            },
                            "nativeSrc": "2240:52:67",
                            "nodeType": "YulFunctionCall",
                            "src": "2240:52:67"
                          },
                          "nativeSrc": "2240:52:67",
                          "nodeType": "YulExpressionStatement",
                          "src": "2240:52:67"
                        }
                      ]
                    },
                    "name": "abi_decode_available_length_t_string_memory_ptr_fromMemory",
                    "nativeSrc": "1864:434:67",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "src",
                        "nativeSrc": "1932:3:67",
                        "nodeType": "YulTypedName",
                        "src": "1932:3:67",
                        "type": ""
                      },
                      {
                        "name": "length",
                        "nativeSrc": "1937:6:67",
                        "nodeType": "YulTypedName",
                        "src": "1937:6:67",
                        "type": ""
                      },
                      {
                        "name": "end",
                        "nativeSrc": "1945:3:67",
                        "nodeType": "YulTypedName",
                        "src": "1945:3:67",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "array",
                        "nativeSrc": "1953:5:67",
                        "nodeType": "YulTypedName",
                        "src": "1953:5:67",
                        "type": ""
                      }
                    ],
                    "src": "1864:434:67"
                  },
                  {
                    "body": {
                      "nativeSrc": "2391:282:67",
                      "nodeType": "YulBlock",
                      "src": "2391:282:67",
                      "statements": [
                        {
                          "body": {
                            "nativeSrc": "2440:83:67",
                            "nodeType": "YulBlock",
                            "src": "2440:83:67",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d",
                                    "nativeSrc": "2442:77:67",
                                    "nodeType": "YulIdentifier",
                                    "src": "2442:77:67"
                                  },
                                  "nativeSrc": "2442:79:67",
                                  "nodeType": "YulFunctionCall",
                                  "src": "2442:79:67"
                                },
                                "nativeSrc": "2442:79:67",
                                "nodeType": "YulExpressionStatement",
                                "src": "2442:79:67"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "offset",
                                        "nativeSrc": "2419:6:67",
                                        "nodeType": "YulIdentifier",
                                        "src": "2419:6:67"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "2427:4:67",
                                        "nodeType": "YulLiteral",
                                        "src": "2427:4:67",
                                        "type": "",
                                        "value": "0x1f"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "2415:3:67",
                                      "nodeType": "YulIdentifier",
                                      "src": "2415:3:67"
                                    },
                                    "nativeSrc": "2415:17:67",
                                    "nodeType": "YulFunctionCall",
                                    "src": "2415:17:67"
                                  },
                                  {
                                    "name": "end",
                                    "nativeSrc": "2434:3:67",
                                    "nodeType": "YulIdentifier",
                                    "src": "2434:3:67"
                                  }
                                ],
                                "functionName": {
                                  "name": "slt",
                                  "nativeSrc": "2411:3:67",
                                  "nodeType": "YulIdentifier",
                                  "src": "2411:3:67"
                                },
                                "nativeSrc": "2411:27:67",
                                "nodeType": "YulFunctionCall",
                                "src": "2411:27:67"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nativeSrc": "2404:6:67",
                              "nodeType": "YulIdentifier",
                              "src": "2404:6:67"
                            },
                            "nativeSrc": "2404:35:67",
                            "nodeType": "YulFunctionCall",
                            "src": "2404:35:67"
                          },
                          "nativeSrc": "2401:122:67",
                          "nodeType": "YulIf",
                          "src": "2401:122:67"
                        },
                        {
                          "nativeSrc": "2532:27:67",
                          "nodeType": "YulVariableDeclaration",
                          "src": "2532:27:67",
                          "value": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nativeSrc": "2552:6:67",
                                "nodeType": "YulIdentifier",
                                "src": "2552:6:67"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nativeSrc": "2546:5:67",
                              "nodeType": "YulIdentifier",
                              "src": "2546:5:67"
                            },
                            "nativeSrc": "2546:13:67",
                            "nodeType": "YulFunctionCall",
                            "src": "2546:13:67"
                          },
                          "variables": [
                            {
                              "name": "length",
                              "nativeSrc": "2536:6:67",
                              "nodeType": "YulTypedName",
                              "src": "2536:6:67",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nativeSrc": "2568:99:67",
                          "nodeType": "YulAssignment",
                          "src": "2568:99:67",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "offset",
                                    "nativeSrc": "2640:6:67",
                                    "nodeType": "YulIdentifier",
                                    "src": "2640:6:67"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "2648:4:67",
                                    "nodeType": "YulLiteral",
                                    "src": "2648:4:67",
                                    "type": "",
                                    "value": "0x20"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "2636:3:67",
                                  "nodeType": "YulIdentifier",
                                  "src": "2636:3:67"
                                },
                                "nativeSrc": "2636:17:67",
                                "nodeType": "YulFunctionCall",
                                "src": "2636:17:67"
                              },
                              {
                                "name": "length",
                                "nativeSrc": "2655:6:67",
                                "nodeType": "YulIdentifier",
                                "src": "2655:6:67"
                              },
                              {
                                "name": "end",
                                "nativeSrc": "2663:3:67",
                                "nodeType": "YulIdentifier",
                                "src": "2663:3:67"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_available_length_t_string_memory_ptr_fromMemory",
                              "nativeSrc": "2577:58:67",
                              "nodeType": "YulIdentifier",
                              "src": "2577:58:67"
                            },
                            "nativeSrc": "2577:90:67",
                            "nodeType": "YulFunctionCall",
                            "src": "2577:90:67"
                          },
                          "variableNames": [
                            {
                              "name": "array",
                              "nativeSrc": "2568:5:67",
                              "nodeType": "YulIdentifier",
                              "src": "2568:5:67"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_t_string_memory_ptr_fromMemory",
                    "nativeSrc": "2318:355:67",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "offset",
                        "nativeSrc": "2369:6:67",
                        "nodeType": "YulTypedName",
                        "src": "2369:6:67",
                        "type": ""
                      },
                      {
                        "name": "end",
                        "nativeSrc": "2377:3:67",
                        "nodeType": "YulTypedName",
                        "src": "2377:3:67",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "array",
                        "nativeSrc": "2385:5:67",
                        "nodeType": "YulTypedName",
                        "src": "2385:5:67",
                        "type": ""
                      }
                    ],
                    "src": "2318:355:67"
                  },
                  {
                    "body": {
                      "nativeSrc": "2793:739:67",
                      "nodeType": "YulBlock",
                      "src": "2793:739:67",
                      "statements": [
                        {
                          "body": {
                            "nativeSrc": "2839:83:67",
                            "nodeType": "YulBlock",
                            "src": "2839:83:67",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
                                    "nativeSrc": "2841:77:67",
                                    "nodeType": "YulIdentifier",
                                    "src": "2841:77:67"
                                  },
                                  "nativeSrc": "2841:79:67",
                                  "nodeType": "YulFunctionCall",
                                  "src": "2841:79:67"
                                },
                                "nativeSrc": "2841:79:67",
                                "nodeType": "YulExpressionStatement",
                                "src": "2841:79:67"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nativeSrc": "2814:7:67",
                                    "nodeType": "YulIdentifier",
                                    "src": "2814:7:67"
                                  },
                                  {
                                    "name": "headStart",
                                    "nativeSrc": "2823:9:67",
                                    "nodeType": "YulIdentifier",
                                    "src": "2823:9:67"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nativeSrc": "2810:3:67",
                                  "nodeType": "YulIdentifier",
                                  "src": "2810:3:67"
                                },
                                "nativeSrc": "2810:23:67",
                                "nodeType": "YulFunctionCall",
                                "src": "2810:23:67"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "2835:2:67",
                                "nodeType": "YulLiteral",
                                "src": "2835:2:67",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nativeSrc": "2806:3:67",
                              "nodeType": "YulIdentifier",
                              "src": "2806:3:67"
                            },
                            "nativeSrc": "2806:32:67",
                            "nodeType": "YulFunctionCall",
                            "src": "2806:32:67"
                          },
                          "nativeSrc": "2803:119:67",
                          "nodeType": "YulIf",
                          "src": "2803:119:67"
                        },
                        {
                          "nativeSrc": "2932:291:67",
                          "nodeType": "YulBlock",
                          "src": "2932:291:67",
                          "statements": [
                            {
                              "nativeSrc": "2947:38:67",
                              "nodeType": "YulVariableDeclaration",
                              "src": "2947:38:67",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nativeSrc": "2971:9:67",
                                        "nodeType": "YulIdentifier",
                                        "src": "2971:9:67"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "2982:1:67",
                                        "nodeType": "YulLiteral",
                                        "src": "2982:1:67",
                                        "type": "",
                                        "value": "0"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "2967:3:67",
                                      "nodeType": "YulIdentifier",
                                      "src": "2967:3:67"
                                    },
                                    "nativeSrc": "2967:17:67",
                                    "nodeType": "YulFunctionCall",
                                    "src": "2967:17:67"
                                  }
                                ],
                                "functionName": {
                                  "name": "mload",
                                  "nativeSrc": "2961:5:67",
                                  "nodeType": "YulIdentifier",
                                  "src": "2961:5:67"
                                },
                                "nativeSrc": "2961:24:67",
                                "nodeType": "YulFunctionCall",
                                "src": "2961:24:67"
                              },
                              "variables": [
                                {
                                  "name": "offset",
                                  "nativeSrc": "2951:6:67",
                                  "nodeType": "YulTypedName",
                                  "src": "2951:6:67",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "body": {
                                "nativeSrc": "3032:83:67",
                                "nodeType": "YulBlock",
                                "src": "3032:83:67",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [],
                                      "functionName": {
                                        "name": "revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db",
                                        "nativeSrc": "3034:77:67",
                                        "nodeType": "YulIdentifier",
                                        "src": "3034:77:67"
                                      },
                                      "nativeSrc": "3034:79:67",
                                      "nodeType": "YulFunctionCall",
                                      "src": "3034:79:67"
                                    },
                                    "nativeSrc": "3034:79:67",
                                    "nodeType": "YulExpressionStatement",
                                    "src": "3034:79:67"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "name": "offset",
                                    "nativeSrc": "3004:6:67",
                                    "nodeType": "YulIdentifier",
                                    "src": "3004:6:67"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "3012:18:67",
                                    "nodeType": "YulLiteral",
                                    "src": "3012:18:67",
                                    "type": "",
                                    "value": "0xffffffffffffffff"
                                  }
                                ],
                                "functionName": {
                                  "name": "gt",
                                  "nativeSrc": "3001:2:67",
                                  "nodeType": "YulIdentifier",
                                  "src": "3001:2:67"
                                },
                                "nativeSrc": "3001:30:67",
                                "nodeType": "YulFunctionCall",
                                "src": "3001:30:67"
                              },
                              "nativeSrc": "2998:117:67",
                              "nodeType": "YulIf",
                              "src": "2998:117:67"
                            },
                            {
                              "nativeSrc": "3129:84:67",
                              "nodeType": "YulAssignment",
                              "src": "3129:84:67",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nativeSrc": "3185:9:67",
                                        "nodeType": "YulIdentifier",
                                        "src": "3185:9:67"
                                      },
                                      {
                                        "name": "offset",
                                        "nativeSrc": "3196:6:67",
                                        "nodeType": "YulIdentifier",
                                        "src": "3196:6:67"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "3181:3:67",
                                      "nodeType": "YulIdentifier",
                                      "src": "3181:3:67"
                                    },
                                    "nativeSrc": "3181:22:67",
                                    "nodeType": "YulFunctionCall",
                                    "src": "3181:22:67"
                                  },
                                  {
                                    "name": "dataEnd",
                                    "nativeSrc": "3205:7:67",
                                    "nodeType": "YulIdentifier",
                                    "src": "3205:7:67"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_decode_t_string_memory_ptr_fromMemory",
                                  "nativeSrc": "3139:41:67",
                                  "nodeType": "YulIdentifier",
                                  "src": "3139:41:67"
                                },
                                "nativeSrc": "3139:74:67",
                                "nodeType": "YulFunctionCall",
                                "src": "3139:74:67"
                              },
                              "variableNames": [
                                {
                                  "name": "value0",
                                  "nativeSrc": "3129:6:67",
                                  "nodeType": "YulIdentifier",
                                  "src": "3129:6:67"
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "nativeSrc": "3233:292:67",
                          "nodeType": "YulBlock",
                          "src": "3233:292:67",
                          "statements": [
                            {
                              "nativeSrc": "3248:39:67",
                              "nodeType": "YulVariableDeclaration",
                              "src": "3248:39:67",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nativeSrc": "3272:9:67",
                                        "nodeType": "YulIdentifier",
                                        "src": "3272:9:67"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "3283:2:67",
                                        "nodeType": "YulLiteral",
                                        "src": "3283:2:67",
                                        "type": "",
                                        "value": "32"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "3268:3:67",
                                      "nodeType": "YulIdentifier",
                                      "src": "3268:3:67"
                                    },
                                    "nativeSrc": "3268:18:67",
                                    "nodeType": "YulFunctionCall",
                                    "src": "3268:18:67"
                                  }
                                ],
                                "functionName": {
                                  "name": "mload",
                                  "nativeSrc": "3262:5:67",
                                  "nodeType": "YulIdentifier",
                                  "src": "3262:5:67"
                                },
                                "nativeSrc": "3262:25:67",
                                "nodeType": "YulFunctionCall",
                                "src": "3262:25:67"
                              },
                              "variables": [
                                {
                                  "name": "offset",
                                  "nativeSrc": "3252:6:67",
                                  "nodeType": "YulTypedName",
                                  "src": "3252:6:67",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "body": {
                                "nativeSrc": "3334:83:67",
                                "nodeType": "YulBlock",
                                "src": "3334:83:67",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [],
                                      "functionName": {
                                        "name": "revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db",
                                        "nativeSrc": "3336:77:67",
                                        "nodeType": "YulIdentifier",
                                        "src": "3336:77:67"
                                      },
                                      "nativeSrc": "3336:79:67",
                                      "nodeType": "YulFunctionCall",
                                      "src": "3336:79:67"
                                    },
                                    "nativeSrc": "3336:79:67",
                                    "nodeType": "YulExpressionStatement",
                                    "src": "3336:79:67"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "name": "offset",
                                    "nativeSrc": "3306:6:67",
                                    "nodeType": "YulIdentifier",
                                    "src": "3306:6:67"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "3314:18:67",
                                    "nodeType": "YulLiteral",
                                    "src": "3314:18:67",
                                    "type": "",
                                    "value": "0xffffffffffffffff"
                                  }
                                ],
                                "functionName": {
                                  "name": "gt",
                                  "nativeSrc": "3303:2:67",
                                  "nodeType": "YulIdentifier",
                                  "src": "3303:2:67"
                                },
                                "nativeSrc": "3303:30:67",
                                "nodeType": "YulFunctionCall",
                                "src": "3303:30:67"
                              },
                              "nativeSrc": "3300:117:67",
                              "nodeType": "YulIf",
                              "src": "3300:117:67"
                            },
                            {
                              "nativeSrc": "3431:84:67",
                              "nodeType": "YulAssignment",
                              "src": "3431:84:67",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nativeSrc": "3487:9:67",
                                        "nodeType": "YulIdentifier",
                                        "src": "3487:9:67"
                                      },
                                      {
                                        "name": "offset",
                                        "nativeSrc": "3498:6:67",
                                        "nodeType": "YulIdentifier",
                                        "src": "3498:6:67"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "3483:3:67",
                                      "nodeType": "YulIdentifier",
                                      "src": "3483:3:67"
                                    },
                                    "nativeSrc": "3483:22:67",
                                    "nodeType": "YulFunctionCall",
                                    "src": "3483:22:67"
                                  },
                                  {
                                    "name": "dataEnd",
                                    "nativeSrc": "3507:7:67",
                                    "nodeType": "YulIdentifier",
                                    "src": "3507:7:67"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_decode_t_string_memory_ptr_fromMemory",
                                  "nativeSrc": "3441:41:67",
                                  "nodeType": "YulIdentifier",
                                  "src": "3441:41:67"
                                },
                                "nativeSrc": "3441:74:67",
                                "nodeType": "YulFunctionCall",
                                "src": "3441:74:67"
                              },
                              "variableNames": [
                                {
                                  "name": "value1",
                                  "nativeSrc": "3431:6:67",
                                  "nodeType": "YulIdentifier",
                                  "src": "3431:6:67"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_string_memory_ptrt_string_memory_ptr_fromMemory",
                    "nativeSrc": "2679:853:67",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nativeSrc": "2755:9:67",
                        "nodeType": "YulTypedName",
                        "src": "2755:9:67",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nativeSrc": "2766:7:67",
                        "nodeType": "YulTypedName",
                        "src": "2766:7:67",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nativeSrc": "2778:6:67",
                        "nodeType": "YulTypedName",
                        "src": "2778:6:67",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nativeSrc": "2786:6:67",
                        "nodeType": "YulTypedName",
                        "src": "2786:6:67",
                        "type": ""
                      }
                    ],
                    "src": "2679:853:67"
                  },
                  {
                    "body": {
                      "nativeSrc": "3597:40:67",
                      "nodeType": "YulBlock",
                      "src": "3597:40:67",
                      "statements": [
                        {
                          "nativeSrc": "3608:22:67",
                          "nodeType": "YulAssignment",
                          "src": "3608:22:67",
                          "value": {
                            "arguments": [
                              {
                                "name": "value",
                                "nativeSrc": "3624:5:67",
                                "nodeType": "YulIdentifier",
                                "src": "3624:5:67"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nativeSrc": "3618:5:67",
                              "nodeType": "YulIdentifier",
                              "src": "3618:5:67"
                            },
                            "nativeSrc": "3618:12:67",
                            "nodeType": "YulFunctionCall",
                            "src": "3618:12:67"
                          },
                          "variableNames": [
                            {
                              "name": "length",
                              "nativeSrc": "3608:6:67",
                              "nodeType": "YulIdentifier",
                              "src": "3608:6:67"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "array_length_t_string_memory_ptr",
                    "nativeSrc": "3538:99:67",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nativeSrc": "3580:5:67",
                        "nodeType": "YulTypedName",
                        "src": "3580:5:67",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "length",
                        "nativeSrc": "3590:6:67",
                        "nodeType": "YulTypedName",
                        "src": "3590:6:67",
                        "type": ""
                      }
                    ],
                    "src": "3538:99:67"
                  },
                  {
                    "body": {
                      "nativeSrc": "3671:152:67",
                      "nodeType": "YulBlock",
                      "src": "3671:152:67",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nativeSrc": "3688:1:67",
                                "nodeType": "YulLiteral",
                                "src": "3688:1:67",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "3691:77:67",
                                "nodeType": "YulLiteral",
                                "src": "3691:77:67",
                                "type": "",
                                "value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nativeSrc": "3681:6:67",
                              "nodeType": "YulIdentifier",
                              "src": "3681:6:67"
                            },
                            "nativeSrc": "3681:88:67",
                            "nodeType": "YulFunctionCall",
                            "src": "3681:88:67"
                          },
                          "nativeSrc": "3681:88:67",
                          "nodeType": "YulExpressionStatement",
                          "src": "3681:88:67"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nativeSrc": "3785:1:67",
                                "nodeType": "YulLiteral",
                                "src": "3785:1:67",
                                "type": "",
                                "value": "4"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "3788:4:67",
                                "nodeType": "YulLiteral",
                                "src": "3788:4:67",
                                "type": "",
                                "value": "0x22"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nativeSrc": "3778:6:67",
                              "nodeType": "YulIdentifier",
                              "src": "3778:6:67"
                            },
                            "nativeSrc": "3778:15:67",
                            "nodeType": "YulFunctionCall",
                            "src": "3778:15:67"
                          },
                          "nativeSrc": "3778:15:67",
                          "nodeType": "YulExpressionStatement",
                          "src": "3778:15:67"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nativeSrc": "3809:1:67",
                                "nodeType": "YulLiteral",
                                "src": "3809:1:67",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "3812:4:67",
                                "nodeType": "YulLiteral",
                                "src": "3812:4:67",
                                "type": "",
                                "value": "0x24"
                              }
                            ],
                            "functionName": {
                              "name": "revert",
                              "nativeSrc": "3802:6:67",
                              "nodeType": "YulIdentifier",
                              "src": "3802:6:67"
                            },
                            "nativeSrc": "3802:15:67",
                            "nodeType": "YulFunctionCall",
                            "src": "3802:15:67"
                          },
                          "nativeSrc": "3802:15:67",
                          "nodeType": "YulExpressionStatement",
                          "src": "3802:15:67"
                        }
                      ]
                    },
                    "name": "panic_error_0x22",
                    "nativeSrc": "3643:180:67",
                    "nodeType": "YulFunctionDefinition",
                    "src": "3643:180:67"
                  },
                  {
                    "body": {
                      "nativeSrc": "3880:269:67",
                      "nodeType": "YulBlock",
                      "src": "3880:269:67",
                      "statements": [
                        {
                          "nativeSrc": "3890:22:67",
                          "nodeType": "YulAssignment",
                          "src": "3890:22:67",
                          "value": {
                            "arguments": [
                              {
                                "name": "data",
                                "nativeSrc": "3904:4:67",
                                "nodeType": "YulIdentifier",
                                "src": "3904:4:67"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "3910:1:67",
                                "nodeType": "YulLiteral",
                                "src": "3910:1:67",
                                "type": "",
                                "value": "2"
                              }
                            ],
                            "functionName": {
                              "name": "div",
                              "nativeSrc": "3900:3:67",
                              "nodeType": "YulIdentifier",
                              "src": "3900:3:67"
                            },
                            "nativeSrc": "3900:12:67",
                            "nodeType": "YulFunctionCall",
                            "src": "3900:12:67"
                          },
                          "variableNames": [
                            {
                              "name": "length",
                              "nativeSrc": "3890:6:67",
                              "nodeType": "YulIdentifier",
                              "src": "3890:6:67"
                            }
                          ]
                        },
                        {
                          "nativeSrc": "3921:38:67",
                          "nodeType": "YulVariableDeclaration",
                          "src": "3921:38:67",
                          "value": {
                            "arguments": [
                              {
                                "name": "data",
                                "nativeSrc": "3951:4:67",
                                "nodeType": "YulIdentifier",
                                "src": "3951:4:67"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "3957:1:67",
                                "nodeType": "YulLiteral",
                                "src": "3957:1:67",
                                "type": "",
                                "value": "1"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nativeSrc": "3947:3:67",
                              "nodeType": "YulIdentifier",
                              "src": "3947:3:67"
                            },
                            "nativeSrc": "3947:12:67",
                            "nodeType": "YulFunctionCall",
                            "src": "3947:12:67"
                          },
                          "variables": [
                            {
                              "name": "outOfPlaceEncoding",
                              "nativeSrc": "3925:18:67",
                              "nodeType": "YulTypedName",
                              "src": "3925:18:67",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nativeSrc": "3998:51:67",
                            "nodeType": "YulBlock",
                            "src": "3998:51:67",
                            "statements": [
                              {
                                "nativeSrc": "4012:27:67",
                                "nodeType": "YulAssignment",
                                "src": "4012:27:67",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "length",
                                      "nativeSrc": "4026:6:67",
                                      "nodeType": "YulIdentifier",
                                      "src": "4026:6:67"
                                    },
                                    {
                                      "kind": "number",
                                      "nativeSrc": "4034:4:67",
                                      "nodeType": "YulLiteral",
                                      "src": "4034:4:67",
                                      "type": "",
                                      "value": "0x7f"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "and",
                                    "nativeSrc": "4022:3:67",
                                    "nodeType": "YulIdentifier",
                                    "src": "4022:3:67"
                                  },
                                  "nativeSrc": "4022:17:67",
                                  "nodeType": "YulFunctionCall",
                                  "src": "4022:17:67"
                                },
                                "variableNames": [
                                  {
                                    "name": "length",
                                    "nativeSrc": "4012:6:67",
                                    "nodeType": "YulIdentifier",
                                    "src": "4012:6:67"
                                  }
                                ]
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "outOfPlaceEncoding",
                                "nativeSrc": "3978:18:67",
                                "nodeType": "YulIdentifier",
                                "src": "3978:18:67"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nativeSrc": "3971:6:67",
                              "nodeType": "YulIdentifier",
                              "src": "3971:6:67"
                            },
                            "nativeSrc": "3971:26:67",
                            "nodeType": "YulFunctionCall",
                            "src": "3971:26:67"
                          },
                          "nativeSrc": "3968:81:67",
                          "nodeType": "YulIf",
                          "src": "3968:81:67"
                        },
                        {
                          "body": {
                            "nativeSrc": "4101:42:67",
                            "nodeType": "YulBlock",
                            "src": "4101:42:67",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x22",
                                    "nativeSrc": "4115:16:67",
                                    "nodeType": "YulIdentifier",
                                    "src": "4115:16:67"
                                  },
                                  "nativeSrc": "4115:18:67",
                                  "nodeType": "YulFunctionCall",
                                  "src": "4115:18:67"
                                },
                                "nativeSrc": "4115:18:67",
                                "nodeType": "YulExpressionStatement",
                                "src": "4115:18:67"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "outOfPlaceEncoding",
                                "nativeSrc": "4065:18:67",
                                "nodeType": "YulIdentifier",
                                "src": "4065:18:67"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "length",
                                    "nativeSrc": "4088:6:67",
                                    "nodeType": "YulIdentifier",
                                    "src": "4088:6:67"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "4096:2:67",
                                    "nodeType": "YulLiteral",
                                    "src": "4096:2:67",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "lt",
                                  "nativeSrc": "4085:2:67",
                                  "nodeType": "YulIdentifier",
                                  "src": "4085:2:67"
                                },
                                "nativeSrc": "4085:14:67",
                                "nodeType": "YulFunctionCall",
                                "src": "4085:14:67"
                              }
                            ],
                            "functionName": {
                              "name": "eq",
                              "nativeSrc": "4062:2:67",
                              "nodeType": "YulIdentifier",
                              "src": "4062:2:67"
                            },
                            "nativeSrc": "4062:38:67",
                            "nodeType": "YulFunctionCall",
                            "src": "4062:38:67"
                          },
                          "nativeSrc": "4059:84:67",
                          "nodeType": "YulIf",
                          "src": "4059:84:67"
                        }
                      ]
                    },
                    "name": "extract_byte_array_length",
                    "nativeSrc": "3829:320:67",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "data",
                        "nativeSrc": "3864:4:67",
                        "nodeType": "YulTypedName",
                        "src": "3864:4:67",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "length",
                        "nativeSrc": "3873:6:67",
                        "nodeType": "YulTypedName",
                        "src": "3873:6:67",
                        "type": ""
                      }
                    ],
                    "src": "3829:320:67"
                  },
                  {
                    "body": {
                      "nativeSrc": "4209:87:67",
                      "nodeType": "YulBlock",
                      "src": "4209:87:67",
                      "statements": [
                        {
                          "nativeSrc": "4219:11:67",
                          "nodeType": "YulAssignment",
                          "src": "4219:11:67",
                          "value": {
                            "name": "ptr",
                            "nativeSrc": "4227:3:67",
                            "nodeType": "YulIdentifier",
                            "src": "4227:3:67"
                          },
                          "variableNames": [
                            {
                              "name": "data",
                              "nativeSrc": "4219:4:67",
                              "nodeType": "YulIdentifier",
                              "src": "4219:4:67"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nativeSrc": "4247:1:67",
                                "nodeType": "YulLiteral",
                                "src": "4247:1:67",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "name": "ptr",
                                "nativeSrc": "4250:3:67",
                                "nodeType": "YulIdentifier",
                                "src": "4250:3:67"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nativeSrc": "4240:6:67",
                              "nodeType": "YulIdentifier",
                              "src": "4240:6:67"
                            },
                            "nativeSrc": "4240:14:67",
                            "nodeType": "YulFunctionCall",
                            "src": "4240:14:67"
                          },
                          "nativeSrc": "4240:14:67",
                          "nodeType": "YulExpressionStatement",
                          "src": "4240:14:67"
                        },
                        {
                          "nativeSrc": "4263:26:67",
                          "nodeType": "YulAssignment",
                          "src": "4263:26:67",
                          "value": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nativeSrc": "4281:1:67",
                                "nodeType": "YulLiteral",
                                "src": "4281:1:67",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "4284:4:67",
                                "nodeType": "YulLiteral",
                                "src": "4284:4:67",
                                "type": "",
                                "value": "0x20"
                              }
                            ],
                            "functionName": {
                              "name": "keccak256",
                              "nativeSrc": "4271:9:67",
                              "nodeType": "YulIdentifier",
                              "src": "4271:9:67"
                            },
                            "nativeSrc": "4271:18:67",
                            "nodeType": "YulFunctionCall",
                            "src": "4271:18:67"
                          },
                          "variableNames": [
                            {
                              "name": "data",
                              "nativeSrc": "4263:4:67",
                              "nodeType": "YulIdentifier",
                              "src": "4263:4:67"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "array_dataslot_t_string_storage",
                    "nativeSrc": "4155:141:67",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "ptr",
                        "nativeSrc": "4196:3:67",
                        "nodeType": "YulTypedName",
                        "src": "4196:3:67",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "data",
                        "nativeSrc": "4204:4:67",
                        "nodeType": "YulTypedName",
                        "src": "4204:4:67",
                        "type": ""
                      }
                    ],
                    "src": "4155:141:67"
                  },
                  {
                    "body": {
                      "nativeSrc": "4346:49:67",
                      "nodeType": "YulBlock",
                      "src": "4346:49:67",
                      "statements": [
                        {
                          "nativeSrc": "4356:33:67",
                          "nodeType": "YulAssignment",
                          "src": "4356:33:67",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nativeSrc": "4374:5:67",
                                    "nodeType": "YulIdentifier",
                                    "src": "4374:5:67"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "4381:2:67",
                                    "nodeType": "YulLiteral",
                                    "src": "4381:2:67",
                                    "type": "",
                                    "value": "31"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "4370:3:67",
                                  "nodeType": "YulIdentifier",
                                  "src": "4370:3:67"
                                },
                                "nativeSrc": "4370:14:67",
                                "nodeType": "YulFunctionCall",
                                "src": "4370:14:67"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "4386:2:67",
                                "nodeType": "YulLiteral",
                                "src": "4386:2:67",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "div",
                              "nativeSrc": "4366:3:67",
                              "nodeType": "YulIdentifier",
                              "src": "4366:3:67"
                            },
                            "nativeSrc": "4366:23:67",
                            "nodeType": "YulFunctionCall",
                            "src": "4366:23:67"
                          },
                          "variableNames": [
                            {
                              "name": "result",
                              "nativeSrc": "4356:6:67",
                              "nodeType": "YulIdentifier",
                              "src": "4356:6:67"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "divide_by_32_ceil",
                    "nativeSrc": "4302:93:67",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nativeSrc": "4329:5:67",
                        "nodeType": "YulTypedName",
                        "src": "4329:5:67",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "result",
                        "nativeSrc": "4339:6:67",
                        "nodeType": "YulTypedName",
                        "src": "4339:6:67",
                        "type": ""
                      }
                    ],
                    "src": "4302:93:67"
                  },
                  {
                    "body": {
                      "nativeSrc": "4454:54:67",
                      "nodeType": "YulBlock",
                      "src": "4454:54:67",
                      "statements": [
                        {
                          "nativeSrc": "4464:37:67",
                          "nodeType": "YulAssignment",
                          "src": "4464:37:67",
                          "value": {
                            "arguments": [
                              {
                                "name": "bits",
                                "nativeSrc": "4489:4:67",
                                "nodeType": "YulIdentifier",
                                "src": "4489:4:67"
                              },
                              {
                                "name": "value",
                                "nativeSrc": "4495:5:67",
                                "nodeType": "YulIdentifier",
                                "src": "4495:5:67"
                              }
                            ],
                            "functionName": {
                              "name": "shl",
                              "nativeSrc": "4485:3:67",
                              "nodeType": "YulIdentifier",
                              "src": "4485:3:67"
                            },
                            "nativeSrc": "4485:16:67",
                            "nodeType": "YulFunctionCall",
                            "src": "4485:16:67"
                          },
                          "variableNames": [
                            {
                              "name": "newValue",
                              "nativeSrc": "4464:8:67",
                              "nodeType": "YulIdentifier",
                              "src": "4464:8:67"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "shift_left_dynamic",
                    "nativeSrc": "4401:107:67",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "bits",
                        "nativeSrc": "4429:4:67",
                        "nodeType": "YulTypedName",
                        "src": "4429:4:67",
                        "type": ""
                      },
                      {
                        "name": "value",
                        "nativeSrc": "4435:5:67",
                        "nodeType": "YulTypedName",
                        "src": "4435:5:67",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "newValue",
                        "nativeSrc": "4445:8:67",
                        "nodeType": "YulTypedName",
                        "src": "4445:8:67",
                        "type": ""
                      }
                    ],
                    "src": "4401:107:67"
                  },
                  {
                    "body": {
                      "nativeSrc": "4590:317:67",
                      "nodeType": "YulBlock",
                      "src": "4590:317:67",
                      "statements": [
                        {
                          "nativeSrc": "4600:35:67",
                          "nodeType": "YulVariableDeclaration",
                          "src": "4600:35:67",
                          "value": {
                            "arguments": [
                              {
                                "name": "shiftBytes",
                                "nativeSrc": "4621:10:67",
                                "nodeType": "YulIdentifier",
                                "src": "4621:10:67"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "4633:1:67",
                                "nodeType": "YulLiteral",
                                "src": "4633:1:67",
                                "type": "",
                                "value": "8"
                              }
                            ],
                            "functionName": {
                              "name": "mul",
                              "nativeSrc": "4617:3:67",
                              "nodeType": "YulIdentifier",
                              "src": "4617:3:67"
                            },
                            "nativeSrc": "4617:18:67",
                            "nodeType": "YulFunctionCall",
                            "src": "4617:18:67"
                          },
                          "variables": [
                            {
                              "name": "shiftBits",
                              "nativeSrc": "4604:9:67",
                              "nodeType": "YulTypedName",
                              "src": "4604:9:67",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nativeSrc": "4644:109:67",
                          "nodeType": "YulVariableDeclaration",
                          "src": "4644:109:67",
                          "value": {
                            "arguments": [
                              {
                                "name": "shiftBits",
                                "nativeSrc": "4675:9:67",
                                "nodeType": "YulIdentifier",
                                "src": "4675:9:67"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "4686:66:67",
                                "nodeType": "YulLiteral",
                                "src": "4686:66:67",
                                "type": "",
                                "value": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"
                              }
                            ],
                            "functionName": {
                              "name": "shift_left_dynamic",
                              "nativeSrc": "4656:18:67",
                              "nodeType": "YulIdentifier",
                              "src": "4656:18:67"
                            },
                            "nativeSrc": "4656:97:67",
                            "nodeType": "YulFunctionCall",
                            "src": "4656:97:67"
                          },
                          "variables": [
                            {
                              "name": "mask",
                              "nativeSrc": "4648:4:67",
                              "nodeType": "YulTypedName",
                              "src": "4648:4:67",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nativeSrc": "4762:51:67",
                          "nodeType": "YulAssignment",
                          "src": "4762:51:67",
                          "value": {
                            "arguments": [
                              {
                                "name": "shiftBits",
                                "nativeSrc": "4793:9:67",
                                "nodeType": "YulIdentifier",
                                "src": "4793:9:67"
                              },
                              {
                                "name": "toInsert",
                                "nativeSrc": "4804:8:67",
                                "nodeType": "YulIdentifier",
                                "src": "4804:8:67"
                              }
                            ],
                            "functionName": {
                              "name": "shift_left_dynamic",
                              "nativeSrc": "4774:18:67",
                              "nodeType": "YulIdentifier",
                              "src": "4774:18:67"
                            },
                            "nativeSrc": "4774:39:67",
                            "nodeType": "YulFunctionCall",
                            "src": "4774:39:67"
                          },
                          "variableNames": [
                            {
                              "name": "toInsert",
                              "nativeSrc": "4762:8:67",
                              "nodeType": "YulIdentifier",
                              "src": "4762:8:67"
                            }
                          ]
                        },
                        {
                          "nativeSrc": "4822:30:67",
                          "nodeType": "YulAssignment",
                          "src": "4822:30:67",
                          "value": {
                            "arguments": [
                              {
                                "name": "value",
                                "nativeSrc": "4835:5:67",
                                "nodeType": "YulIdentifier",
                                "src": "4835:5:67"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "mask",
                                    "nativeSrc": "4846:4:67",
                                    "nodeType": "YulIdentifier",
                                    "src": "4846:4:67"
                                  }
                                ],
                                "functionName": {
                                  "name": "not",
                                  "nativeSrc": "4842:3:67",
                                  "nodeType": "YulIdentifier",
                                  "src": "4842:3:67"
                                },
                                "nativeSrc": "4842:9:67",
                                "nodeType": "YulFunctionCall",
                                "src": "4842:9:67"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nativeSrc": "4831:3:67",
                              "nodeType": "YulIdentifier",
                              "src": "4831:3:67"
                            },
                            "nativeSrc": "4831:21:67",
                            "nodeType": "YulFunctionCall",
                            "src": "4831:21:67"
                          },
                          "variableNames": [
                            {
                              "name": "value",
                              "nativeSrc": "4822:5:67",
                              "nodeType": "YulIdentifier",
                              "src": "4822:5:67"
                            }
                          ]
                        },
                        {
                          "nativeSrc": "4861:40:67",
                          "nodeType": "YulAssignment",
                          "src": "4861:40:67",
                          "value": {
                            "arguments": [
                              {
                                "name": "value",
                                "nativeSrc": "4874:5:67",
                                "nodeType": "YulIdentifier",
                                "src": "4874:5:67"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "toInsert",
                                    "nativeSrc": "4885:8:67",
                                    "nodeType": "YulIdentifier",
                                    "src": "4885:8:67"
                                  },
                                  {
                                    "name": "mask",
                                    "nativeSrc": "4895:4:67",
                                    "nodeType": "YulIdentifier",
                                    "src": "4895:4:67"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nativeSrc": "4881:3:67",
                                  "nodeType": "YulIdentifier",
                                  "src": "4881:3:67"
                                },
                                "nativeSrc": "4881:19:67",
                                "nodeType": "YulFunctionCall",
                                "src": "4881:19:67"
                              }
                            ],
                            "functionName": {
                              "name": "or",
                              "nativeSrc": "4871:2:67",
                              "nodeType": "YulIdentifier",
                              "src": "4871:2:67"
                            },
                            "nativeSrc": "4871:30:67",
                            "nodeType": "YulFunctionCall",
                            "src": "4871:30:67"
                          },
                          "variableNames": [
                            {
                              "name": "result",
                              "nativeSrc": "4861:6:67",
                              "nodeType": "YulIdentifier",
                              "src": "4861:6:67"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "update_byte_slice_dynamic32",
                    "nativeSrc": "4514:393:67",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nativeSrc": "4551:5:67",
                        "nodeType": "YulTypedName",
                        "src": "4551:5:67",
                        "type": ""
                      },
                      {
                        "name": "shiftBytes",
                        "nativeSrc": "4558:10:67",
                        "nodeType": "YulTypedName",
                        "src": "4558:10:67",
                        "type": ""
                      },
                      {
                        "name": "toInsert",
                        "nativeSrc": "4570:8:67",
                        "nodeType": "YulTypedName",
                        "src": "4570:8:67",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "result",
                        "nativeSrc": "4583:6:67",
                        "nodeType": "YulTypedName",
                        "src": "4583:6:67",
                        "type": ""
                      }
                    ],
                    "src": "4514:393:67"
                  },
                  {
                    "body": {
                      "nativeSrc": "4958:32:67",
                      "nodeType": "YulBlock",
                      "src": "4958:32:67",
                      "statements": [
                        {
                          "nativeSrc": "4968:16:67",
                          "nodeType": "YulAssignment",
                          "src": "4968:16:67",
                          "value": {
                            "name": "value",
                            "nativeSrc": "4979:5:67",
                            "nodeType": "YulIdentifier",
                            "src": "4979:5:67"
                          },
                          "variableNames": [
                            {
                              "name": "cleaned",
                              "nativeSrc": "4968:7:67",
                              "nodeType": "YulIdentifier",
                              "src": "4968:7:67"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "cleanup_t_uint256",
                    "nativeSrc": "4913:77:67",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nativeSrc": "4940:5:67",
                        "nodeType": "YulTypedName",
                        "src": "4940:5:67",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "cleaned",
                        "nativeSrc": "4950:7:67",
                        "nodeType": "YulTypedName",
                        "src": "4950:7:67",
                        "type": ""
                      }
                    ],
                    "src": "4913:77:67"
                  },
                  {
                    "body": {
                      "nativeSrc": "5028:28:67",
                      "nodeType": "YulBlock",
                      "src": "5028:28:67",
                      "statements": [
                        {
                          "nativeSrc": "5038:12:67",
                          "nodeType": "YulAssignment",
                          "src": "5038:12:67",
                          "value": {
                            "name": "value",
                            "nativeSrc": "5045:5:67",
                            "nodeType": "YulIdentifier",
                            "src": "5045:5:67"
                          },
                          "variableNames": [
                            {
                              "name": "ret",
                              "nativeSrc": "5038:3:67",
                              "nodeType": "YulIdentifier",
                              "src": "5038:3:67"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "identity",
                    "nativeSrc": "4996:60:67",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nativeSrc": "5014:5:67",
                        "nodeType": "YulTypedName",
                        "src": "5014:5:67",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "ret",
                        "nativeSrc": "5024:3:67",
                        "nodeType": "YulTypedName",
                        "src": "5024:3:67",
                        "type": ""
                      }
                    ],
                    "src": "4996:60:67"
                  },
                  {
                    "body": {
                      "nativeSrc": "5122:82:67",
                      "nodeType": "YulBlock",
                      "src": "5122:82:67",
                      "statements": [
                        {
                          "nativeSrc": "5132:66:67",
                          "nodeType": "YulAssignment",
                          "src": "5132:66:67",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "value",
                                        "nativeSrc": "5190:5:67",
                                        "nodeType": "YulIdentifier",
                                        "src": "5190:5:67"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "cleanup_t_uint256",
                                      "nativeSrc": "5172:17:67",
                                      "nodeType": "YulIdentifier",
                                      "src": "5172:17:67"
                                    },
                                    "nativeSrc": "5172:24:67",
                                    "nodeType": "YulFunctionCall",
                                    "src": "5172:24:67"
                                  }
                                ],
                                "functionName": {
                                  "name": "identity",
                                  "nativeSrc": "5163:8:67",
                                  "nodeType": "YulIdentifier",
                                  "src": "5163:8:67"
                                },
                                "nativeSrc": "5163:34:67",
                                "nodeType": "YulFunctionCall",
                                "src": "5163:34:67"
                              }
                            ],
                            "functionName": {
                              "name": "cleanup_t_uint256",
                              "nativeSrc": "5145:17:67",
                              "nodeType": "YulIdentifier",
                              "src": "5145:17:67"
                            },
                            "nativeSrc": "5145:53:67",
                            "nodeType": "YulFunctionCall",
                            "src": "5145:53:67"
                          },
                          "variableNames": [
                            {
                              "name": "converted",
                              "nativeSrc": "5132:9:67",
                              "nodeType": "YulIdentifier",
                              "src": "5132:9:67"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "convert_t_uint256_to_t_uint256",
                    "nativeSrc": "5062:142:67",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nativeSrc": "5102:5:67",
                        "nodeType": "YulTypedName",
                        "src": "5102:5:67",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "converted",
                        "nativeSrc": "5112:9:67",
                        "nodeType": "YulTypedName",
                        "src": "5112:9:67",
                        "type": ""
                      }
                    ],
                    "src": "5062:142:67"
                  },
                  {
                    "body": {
                      "nativeSrc": "5257:28:67",
                      "nodeType": "YulBlock",
                      "src": "5257:28:67",
                      "statements": [
                        {
                          "nativeSrc": "5267:12:67",
                          "nodeType": "YulAssignment",
                          "src": "5267:12:67",
                          "value": {
                            "name": "value",
                            "nativeSrc": "5274:5:67",
                            "nodeType": "YulIdentifier",
                            "src": "5274:5:67"
                          },
                          "variableNames": [
                            {
                              "name": "ret",
                              "nativeSrc": "5267:3:67",
                              "nodeType": "YulIdentifier",
                              "src": "5267:3:67"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "prepare_store_t_uint256",
                    "nativeSrc": "5210:75:67",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nativeSrc": "5243:5:67",
                        "nodeType": "YulTypedName",
                        "src": "5243:5:67",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "ret",
                        "nativeSrc": "5253:3:67",
                        "nodeType": "YulTypedName",
                        "src": "5253:3:67",
                        "type": ""
                      }
                    ],
                    "src": "5210:75:67"
                  },
                  {
                    "body": {
                      "nativeSrc": "5367:193:67",
                      "nodeType": "YulBlock",
                      "src": "5367:193:67",
                      "statements": [
                        {
                          "nativeSrc": "5377:63:67",
                          "nodeType": "YulVariableDeclaration",
                          "src": "5377:63:67",
                          "value": {
                            "arguments": [
                              {
                                "name": "value_0",
                                "nativeSrc": "5432:7:67",
                                "nodeType": "YulIdentifier",
                                "src": "5432:7:67"
                              }
                            ],
                            "functionName": {
                              "name": "convert_t_uint256_to_t_uint256",
                              "nativeSrc": "5401:30:67",
                              "nodeType": "YulIdentifier",
                              "src": "5401:30:67"
                            },
                            "nativeSrc": "5401:39:67",
                            "nodeType": "YulFunctionCall",
                            "src": "5401:39:67"
                          },
                          "variables": [
                            {
                              "name": "convertedValue_0",
                              "nativeSrc": "5381:16:67",
                              "nodeType": "YulTypedName",
                              "src": "5381:16:67",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "slot",
                                "nativeSrc": "5456:4:67",
                                "nodeType": "YulIdentifier",
                                "src": "5456:4:67"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "slot",
                                        "nativeSrc": "5496:4:67",
                                        "nodeType": "YulIdentifier",
                                        "src": "5496:4:67"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "sload",
                                      "nativeSrc": "5490:5:67",
                                      "nodeType": "YulIdentifier",
                                      "src": "5490:5:67"
                                    },
                                    "nativeSrc": "5490:11:67",
                                    "nodeType": "YulFunctionCall",
                                    "src": "5490:11:67"
                                  },
                                  {
                                    "name": "offset",
                                    "nativeSrc": "5503:6:67",
                                    "nodeType": "YulIdentifier",
                                    "src": "5503:6:67"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "convertedValue_0",
                                        "nativeSrc": "5535:16:67",
                                        "nodeType": "YulIdentifier",
                                        "src": "5535:16:67"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "prepare_store_t_uint256",
                                      "nativeSrc": "5511:23:67",
                                      "nodeType": "YulIdentifier",
                                      "src": "5511:23:67"
                                    },
                                    "nativeSrc": "5511:41:67",
                                    "nodeType": "YulFunctionCall",
                                    "src": "5511:41:67"
                                  }
                                ],
                                "functionName": {
                                  "name": "update_byte_slice_dynamic32",
                                  "nativeSrc": "5462:27:67",
                                  "nodeType": "YulIdentifier",
                                  "src": "5462:27:67"
                                },
                                "nativeSrc": "5462:91:67",
                                "nodeType": "YulFunctionCall",
                                "src": "5462:91:67"
                              }
                            ],
                            "functionName": {
                              "name": "sstore",
                              "nativeSrc": "5449:6:67",
                              "nodeType": "YulIdentifier",
                              "src": "5449:6:67"
                            },
                            "nativeSrc": "5449:105:67",
                            "nodeType": "YulFunctionCall",
                            "src": "5449:105:67"
                          },
                          "nativeSrc": "5449:105:67",
                          "nodeType": "YulExpressionStatement",
                          "src": "5449:105:67"
                        }
                      ]
                    },
                    "name": "update_storage_value_t_uint256_to_t_uint256",
                    "nativeSrc": "5291:269:67",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "slot",
                        "nativeSrc": "5344:4:67",
                        "nodeType": "YulTypedName",
                        "src": "5344:4:67",
                        "type": ""
                      },
                      {
                        "name": "offset",
                        "nativeSrc": "5350:6:67",
                        "nodeType": "YulTypedName",
                        "src": "5350:6:67",
                        "type": ""
                      },
                      {
                        "name": "value_0",
                        "nativeSrc": "5358:7:67",
                        "nodeType": "YulTypedName",
                        "src": "5358:7:67",
                        "type": ""
                      }
                    ],
                    "src": "5291:269:67"
                  },
                  {
                    "body": {
                      "nativeSrc": "5615:24:67",
                      "nodeType": "YulBlock",
                      "src": "5615:24:67",
                      "statements": [
                        {
                          "nativeSrc": "5625:8:67",
                          "nodeType": "YulAssignment",
                          "src": "5625:8:67",
                          "value": {
                            "kind": "number",
                            "nativeSrc": "5632:1:67",
                            "nodeType": "YulLiteral",
                            "src": "5632:1:67",
                            "type": "",
                            "value": "0"
                          },
                          "variableNames": [
                            {
                              "name": "ret",
                              "nativeSrc": "5625:3:67",
                              "nodeType": "YulIdentifier",
                              "src": "5625:3:67"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "zero_value_for_split_t_uint256",
                    "nativeSrc": "5566:73:67",
                    "nodeType": "YulFunctionDefinition",
                    "returnVariables": [
                      {
                        "name": "ret",
                        "nativeSrc": "5611:3:67",
                        "nodeType": "YulTypedName",
                        "src": "5611:3:67",
                        "type": ""
                      }
                    ],
                    "src": "5566:73:67"
                  },
                  {
                    "body": {
                      "nativeSrc": "5698:136:67",
                      "nodeType": "YulBlock",
                      "src": "5698:136:67",
                      "statements": [
                        {
                          "nativeSrc": "5708:46:67",
                          "nodeType": "YulVariableDeclaration",
                          "src": "5708:46:67",
                          "value": {
                            "arguments": [],
                            "functionName": {
                              "name": "zero_value_for_split_t_uint256",
                              "nativeSrc": "5722:30:67",
                              "nodeType": "YulIdentifier",
                              "src": "5722:30:67"
                            },
                            "nativeSrc": "5722:32:67",
                            "nodeType": "YulFunctionCall",
                            "src": "5722:32:67"
                          },
                          "variables": [
                            {
                              "name": "zero_0",
                              "nativeSrc": "5712:6:67",
                              "nodeType": "YulTypedName",
                              "src": "5712:6:67",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "slot",
                                "nativeSrc": "5807:4:67",
                                "nodeType": "YulIdentifier",
                                "src": "5807:4:67"
                              },
                              {
                                "name": "offset",
                                "nativeSrc": "5813:6:67",
                                "nodeType": "YulIdentifier",
                                "src": "5813:6:67"
                              },
                              {
                                "name": "zero_0",
                                "nativeSrc": "5821:6:67",
                                "nodeType": "YulIdentifier",
                                "src": "5821:6:67"
                              }
                            ],
                            "functionName": {
                              "name": "update_storage_value_t_uint256_to_t_uint256",
                              "nativeSrc": "5763:43:67",
                              "nodeType": "YulIdentifier",
                              "src": "5763:43:67"
                            },
                            "nativeSrc": "5763:65:67",
                            "nodeType": "YulFunctionCall",
                            "src": "5763:65:67"
                          },
                          "nativeSrc": "5763:65:67",
                          "nodeType": "YulExpressionStatement",
                          "src": "5763:65:67"
                        }
                      ]
                    },
                    "name": "storage_set_to_zero_t_uint256",
                    "nativeSrc": "5645:189:67",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "slot",
                        "nativeSrc": "5684:4:67",
                        "nodeType": "YulTypedName",
                        "src": "5684:4:67",
                        "type": ""
                      },
                      {
                        "name": "offset",
                        "nativeSrc": "5690:6:67",
                        "nodeType": "YulTypedName",
                        "src": "5690:6:67",
                        "type": ""
                      }
                    ],
                    "src": "5645:189:67"
                  },
                  {
                    "body": {
                      "nativeSrc": "5890:136:67",
                      "nodeType": "YulBlock",
                      "src": "5890:136:67",
                      "statements": [
                        {
                          "body": {
                            "nativeSrc": "5957:63:67",
                            "nodeType": "YulBlock",
                            "src": "5957:63:67",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "start",
                                      "nativeSrc": "6001:5:67",
                                      "nodeType": "YulIdentifier",
                                      "src": "6001:5:67"
                                    },
                                    {
                                      "kind": "number",
                                      "nativeSrc": "6008:1:67",
                                      "nodeType": "YulLiteral",
                                      "src": "6008:1:67",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "storage_set_to_zero_t_uint256",
                                    "nativeSrc": "5971:29:67",
                                    "nodeType": "YulIdentifier",
                                    "src": "5971:29:67"
                                  },
                                  "nativeSrc": "5971:39:67",
                                  "nodeType": "YulFunctionCall",
                                  "src": "5971:39:67"
                                },
                                "nativeSrc": "5971:39:67",
                                "nodeType": "YulExpressionStatement",
                                "src": "5971:39:67"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "start",
                                "nativeSrc": "5910:5:67",
                                "nodeType": "YulIdentifier",
                                "src": "5910:5:67"
                              },
                              {
                                "name": "end",
                                "nativeSrc": "5917:3:67",
                                "nodeType": "YulIdentifier",
                                "src": "5917:3:67"
                              }
                            ],
                            "functionName": {
                              "name": "lt",
                              "nativeSrc": "5907:2:67",
                              "nodeType": "YulIdentifier",
                              "src": "5907:2:67"
                            },
                            "nativeSrc": "5907:14:67",
                            "nodeType": "YulFunctionCall",
                            "src": "5907:14:67"
                          },
                          "nativeSrc": "5900:120:67",
                          "nodeType": "YulForLoop",
                          "post": {
                            "nativeSrc": "5922:26:67",
                            "nodeType": "YulBlock",
                            "src": "5922:26:67",
                            "statements": [
                              {
                                "nativeSrc": "5924:22:67",
                                "nodeType": "YulAssignment",
                                "src": "5924:22:67",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "start",
                                      "nativeSrc": "5937:5:67",
                                      "nodeType": "YulIdentifier",
                                      "src": "5937:5:67"
                                    },
                                    {
                                      "kind": "number",
                                      "nativeSrc": "5944:1:67",
                                      "nodeType": "YulLiteral",
                                      "src": "5944:1:67",
                                      "type": "",
                                      "value": "1"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nativeSrc": "5933:3:67",
                                    "nodeType": "YulIdentifier",
                                    "src": "5933:3:67"
                                  },
                                  "nativeSrc": "5933:13:67",
                                  "nodeType": "YulFunctionCall",
                                  "src": "5933:13:67"
                                },
                                "variableNames": [
                                  {
                                    "name": "start",
                                    "nativeSrc": "5924:5:67",
                                    "nodeType": "YulIdentifier",
                                    "src": "5924:5:67"
                                  }
                                ]
                              }
                            ]
                          },
                          "pre": {
                            "nativeSrc": "5904:2:67",
                            "nodeType": "YulBlock",
                            "src": "5904:2:67",
                            "statements": []
                          },
                          "src": "5900:120:67"
                        }
                      ]
                    },
                    "name": "clear_storage_range_t_bytes1",
                    "nativeSrc": "5840:186:67",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "start",
                        "nativeSrc": "5878:5:67",
                        "nodeType": "YulTypedName",
                        "src": "5878:5:67",
                        "type": ""
                      },
                      {
                        "name": "end",
                        "nativeSrc": "5885:3:67",
                        "nodeType": "YulTypedName",
                        "src": "5885:3:67",
                        "type": ""
                      }
                    ],
                    "src": "5840:186:67"
                  },
                  {
                    "body": {
                      "nativeSrc": "6111:464:67",
                      "nodeType": "YulBlock",
                      "src": "6111:464:67",
                      "statements": [
                        {
                          "body": {
                            "nativeSrc": "6137:431:67",
                            "nodeType": "YulBlock",
                            "src": "6137:431:67",
                            "statements": [
                              {
                                "nativeSrc": "6151:54:67",
                                "nodeType": "YulVariableDeclaration",
                                "src": "6151:54:67",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "array",
                                      "nativeSrc": "6199:5:67",
                                      "nodeType": "YulIdentifier",
                                      "src": "6199:5:67"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "array_dataslot_t_string_storage",
                                    "nativeSrc": "6167:31:67",
                                    "nodeType": "YulIdentifier",
                                    "src": "6167:31:67"
                                  },
                                  "nativeSrc": "6167:38:67",
                                  "nodeType": "YulFunctionCall",
                                  "src": "6167:38:67"
                                },
                                "variables": [
                                  {
                                    "name": "dataArea",
                                    "nativeSrc": "6155:8:67",
                                    "nodeType": "YulTypedName",
                                    "src": "6155:8:67",
                                    "type": ""
                                  }
                                ]
                              },
                              {
                                "nativeSrc": "6218:63:67",
                                "nodeType": "YulVariableDeclaration",
                                "src": "6218:63:67",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "dataArea",
                                      "nativeSrc": "6241:8:67",
                                      "nodeType": "YulIdentifier",
                                      "src": "6241:8:67"
                                    },
                                    {
                                      "arguments": [
                                        {
                                          "name": "startIndex",
                                          "nativeSrc": "6269:10:67",
                                          "nodeType": "YulIdentifier",
                                          "src": "6269:10:67"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "divide_by_32_ceil",
                                        "nativeSrc": "6251:17:67",
                                        "nodeType": "YulIdentifier",
                                        "src": "6251:17:67"
                                      },
                                      "nativeSrc": "6251:29:67",
                                      "nodeType": "YulFunctionCall",
                                      "src": "6251:29:67"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nativeSrc": "6237:3:67",
                                    "nodeType": "YulIdentifier",
                                    "src": "6237:3:67"
                                  },
                                  "nativeSrc": "6237:44:67",
                                  "nodeType": "YulFunctionCall",
                                  "src": "6237:44:67"
                                },
                                "variables": [
                                  {
                                    "name": "deleteStart",
                                    "nativeSrc": "6222:11:67",
                                    "nodeType": "YulTypedName",
                                    "src": "6222:11:67",
                                    "type": ""
                                  }
                                ]
                              },
                              {
                                "body": {
                                  "nativeSrc": "6438:27:67",
                                  "nodeType": "YulBlock",
                                  "src": "6438:27:67",
                                  "statements": [
                                    {
                                      "nativeSrc": "6440:23:67",
                                      "nodeType": "YulAssignment",
                                      "src": "6440:23:67",
                                      "value": {
                                        "name": "dataArea",
                                        "nativeSrc": "6455:8:67",
                                        "nodeType": "YulIdentifier",
                                        "src": "6455:8:67"
                                      },
                                      "variableNames": [
                                        {
                                          "name": "deleteStart",
                                          "nativeSrc": "6440:11:67",
                                          "nodeType": "YulIdentifier",
                                          "src": "6440:11:67"
                                        }
                                      ]
                                    }
                                  ]
                                },
                                "condition": {
                                  "arguments": [
                                    {
                                      "name": "startIndex",
                                      "nativeSrc": "6422:10:67",
                                      "nodeType": "YulIdentifier",
                                      "src": "6422:10:67"
                                    },
                                    {
                                      "kind": "number",
                                      "nativeSrc": "6434:2:67",
                                      "nodeType": "YulLiteral",
                                      "src": "6434:2:67",
                                      "type": "",
                                      "value": "32"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "lt",
                                    "nativeSrc": "6419:2:67",
                                    "nodeType": "YulIdentifier",
                                    "src": "6419:2:67"
                                  },
                                  "nativeSrc": "6419:18:67",
                                  "nodeType": "YulFunctionCall",
                                  "src": "6419:18:67"
                                },
                                "nativeSrc": "6416:49:67",
                                "nodeType": "YulIf",
                                "src": "6416:49:67"
                              },
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "deleteStart",
                                      "nativeSrc": "6507:11:67",
                                      "nodeType": "YulIdentifier",
                                      "src": "6507:11:67"
                                    },
                                    {
                                      "arguments": [
                                        {
                                          "name": "dataArea",
                                          "nativeSrc": "6524:8:67",
                                          "nodeType": "YulIdentifier",
                                          "src": "6524:8:67"
                                        },
                                        {
                                          "arguments": [
                                            {
                                              "name": "len",
                                              "nativeSrc": "6552:3:67",
                                              "nodeType": "YulIdentifier",
                                              "src": "6552:3:67"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "divide_by_32_ceil",
                                            "nativeSrc": "6534:17:67",
                                            "nodeType": "YulIdentifier",
                                            "src": "6534:17:67"
                                          },
                                          "nativeSrc": "6534:22:67",
                                          "nodeType": "YulFunctionCall",
                                          "src": "6534:22:67"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nativeSrc": "6520:3:67",
                                        "nodeType": "YulIdentifier",
                                        "src": "6520:3:67"
                                      },
                                      "nativeSrc": "6520:37:67",
                                      "nodeType": "YulFunctionCall",
                                      "src": "6520:37:67"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "clear_storage_range_t_bytes1",
                                    "nativeSrc": "6478:28:67",
                                    "nodeType": "YulIdentifier",
                                    "src": "6478:28:67"
                                  },
                                  "nativeSrc": "6478:80:67",
                                  "nodeType": "YulFunctionCall",
                                  "src": "6478:80:67"
                                },
                                "nativeSrc": "6478:80:67",
                                "nodeType": "YulExpressionStatement",
                                "src": "6478:80:67"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "len",
                                "nativeSrc": "6128:3:67",
                                "nodeType": "YulIdentifier",
                                "src": "6128:3:67"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "6133:2:67",
                                "nodeType": "YulLiteral",
                                "src": "6133:2:67",
                                "type": "",
                                "value": "31"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nativeSrc": "6125:2:67",
                              "nodeType": "YulIdentifier",
                              "src": "6125:2:67"
                            },
                            "nativeSrc": "6125:11:67",
                            "nodeType": "YulFunctionCall",
                            "src": "6125:11:67"
                          },
                          "nativeSrc": "6122:446:67",
                          "nodeType": "YulIf",
                          "src": "6122:446:67"
                        }
                      ]
                    },
                    "name": "clean_up_bytearray_end_slots_t_string_storage",
                    "nativeSrc": "6032:543:67",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "array",
                        "nativeSrc": "6087:5:67",
                        "nodeType": "YulTypedName",
                        "src": "6087:5:67",
                        "type": ""
                      },
                      {
                        "name": "len",
                        "nativeSrc": "6094:3:67",
                        "nodeType": "YulTypedName",
                        "src": "6094:3:67",
                        "type": ""
                      },
                      {
                        "name": "startIndex",
                        "nativeSrc": "6099:10:67",
                        "nodeType": "YulTypedName",
                        "src": "6099:10:67",
                        "type": ""
                      }
                    ],
                    "src": "6032:543:67"
                  },
                  {
                    "body": {
                      "nativeSrc": "6644:54:67",
                      "nodeType": "YulBlock",
                      "src": "6644:54:67",
                      "statements": [
                        {
                          "nativeSrc": "6654:37:67",
                          "nodeType": "YulAssignment",
                          "src": "6654:37:67",
                          "value": {
                            "arguments": [
                              {
                                "name": "bits",
                                "nativeSrc": "6679:4:67",
                                "nodeType": "YulIdentifier",
                                "src": "6679:4:67"
                              },
                              {
                                "name": "value",
                                "nativeSrc": "6685:5:67",
                                "nodeType": "YulIdentifier",
                                "src": "6685:5:67"
                              }
                            ],
                            "functionName": {
                              "name": "shr",
                              "nativeSrc": "6675:3:67",
                              "nodeType": "YulIdentifier",
                              "src": "6675:3:67"
                            },
                            "nativeSrc": "6675:16:67",
                            "nodeType": "YulFunctionCall",
                            "src": "6675:16:67"
                          },
                          "variableNames": [
                            {
                              "name": "newValue",
                              "nativeSrc": "6654:8:67",
                              "nodeType": "YulIdentifier",
                              "src": "6654:8:67"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "shift_right_unsigned_dynamic",
                    "nativeSrc": "6581:117:67",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "bits",
                        "nativeSrc": "6619:4:67",
                        "nodeType": "YulTypedName",
                        "src": "6619:4:67",
                        "type": ""
                      },
                      {
                        "name": "value",
                        "nativeSrc": "6625:5:67",
                        "nodeType": "YulTypedName",
                        "src": "6625:5:67",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "newValue",
                        "nativeSrc": "6635:8:67",
                        "nodeType": "YulTypedName",
                        "src": "6635:8:67",
                        "type": ""
                      }
                    ],
                    "src": "6581:117:67"
                  },
                  {
                    "body": {
                      "nativeSrc": "6755:118:67",
                      "nodeType": "YulBlock",
                      "src": "6755:118:67",
                      "statements": [
                        {
                          "nativeSrc": "6765:68:67",
                          "nodeType": "YulVariableDeclaration",
                          "src": "6765:68:67",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nativeSrc": "6814:1:67",
                                        "nodeType": "YulLiteral",
                                        "src": "6814:1:67",
                                        "type": "",
                                        "value": "8"
                                      },
                                      {
                                        "name": "bytes",
                                        "nativeSrc": "6817:5:67",
                                        "nodeType": "YulIdentifier",
                                        "src": "6817:5:67"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "mul",
                                      "nativeSrc": "6810:3:67",
                                      "nodeType": "YulIdentifier",
                                      "src": "6810:3:67"
                                    },
                                    "nativeSrc": "6810:13:67",
                                    "nodeType": "YulFunctionCall",
                                    "src": "6810:13:67"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nativeSrc": "6829:1:67",
                                        "nodeType": "YulLiteral",
                                        "src": "6829:1:67",
                                        "type": "",
                                        "value": "0"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "not",
                                      "nativeSrc": "6825:3:67",
                                      "nodeType": "YulIdentifier",
                                      "src": "6825:3:67"
                                    },
                                    "nativeSrc": "6825:6:67",
                                    "nodeType": "YulFunctionCall",
                                    "src": "6825:6:67"
                                  }
                                ],
                                "functionName": {
                                  "name": "shift_right_unsigned_dynamic",
                                  "nativeSrc": "6781:28:67",
                                  "nodeType": "YulIdentifier",
                                  "src": "6781:28:67"
                                },
                                "nativeSrc": "6781:51:67",
                                "nodeType": "YulFunctionCall",
                                "src": "6781:51:67"
                              }
                            ],
                            "functionName": {
                              "name": "not",
                              "nativeSrc": "6777:3:67",
                              "nodeType": "YulIdentifier",
                              "src": "6777:3:67"
                            },
                            "nativeSrc": "6777:56:67",
                            "nodeType": "YulFunctionCall",
                            "src": "6777:56:67"
                          },
                          "variables": [
                            {
                              "name": "mask",
                              "nativeSrc": "6769:4:67",
                              "nodeType": "YulTypedName",
                              "src": "6769:4:67",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nativeSrc": "6842:25:67",
                          "nodeType": "YulAssignment",
                          "src": "6842:25:67",
                          "value": {
                            "arguments": [
                              {
                                "name": "data",
                                "nativeSrc": "6856:4:67",
                                "nodeType": "YulIdentifier",
                                "src": "6856:4:67"
                              },
                              {
                                "name": "mask",
                                "nativeSrc": "6862:4:67",
                                "nodeType": "YulIdentifier",
                                "src": "6862:4:67"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nativeSrc": "6852:3:67",
                              "nodeType": "YulIdentifier",
                              "src": "6852:3:67"
                            },
                            "nativeSrc": "6852:15:67",
                            "nodeType": "YulFunctionCall",
                            "src": "6852:15:67"
                          },
                          "variableNames": [
                            {
                              "name": "result",
                              "nativeSrc": "6842:6:67",
                              "nodeType": "YulIdentifier",
                              "src": "6842:6:67"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "mask_bytes_dynamic",
                    "nativeSrc": "6704:169:67",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "data",
                        "nativeSrc": "6732:4:67",
                        "nodeType": "YulTypedName",
                        "src": "6732:4:67",
                        "type": ""
                      },
                      {
                        "name": "bytes",
                        "nativeSrc": "6738:5:67",
                        "nodeType": "YulTypedName",
                        "src": "6738:5:67",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "result",
                        "nativeSrc": "6748:6:67",
                        "nodeType": "YulTypedName",
                        "src": "6748:6:67",
                        "type": ""
                      }
                    ],
                    "src": "6704:169:67"
                  },
                  {
                    "body": {
                      "nativeSrc": "6959:214:67",
                      "nodeType": "YulBlock",
                      "src": "6959:214:67",
                      "statements": [
                        {
                          "nativeSrc": "7092:37:67",
                          "nodeType": "YulAssignment",
                          "src": "7092:37:67",
                          "value": {
                            "arguments": [
                              {
                                "name": "data",
                                "nativeSrc": "7119:4:67",
                                "nodeType": "YulIdentifier",
                                "src": "7119:4:67"
                              },
                              {
                                "name": "len",
                                "nativeSrc": "7125:3:67",
                                "nodeType": "YulIdentifier",
                                "src": "7125:3:67"
                              }
                            ],
                            "functionName": {
                              "name": "mask_bytes_dynamic",
                              "nativeSrc": "7100:18:67",
                              "nodeType": "YulIdentifier",
                              "src": "7100:18:67"
                            },
                            "nativeSrc": "7100:29:67",
                            "nodeType": "YulFunctionCall",
                            "src": "7100:29:67"
                          },
                          "variableNames": [
                            {
                              "name": "data",
                              "nativeSrc": "7092:4:67",
                              "nodeType": "YulIdentifier",
                              "src": "7092:4:67"
                            }
                          ]
                        },
                        {
                          "nativeSrc": "7138:29:67",
                          "nodeType": "YulAssignment",
                          "src": "7138:29:67",
                          "value": {
                            "arguments": [
                              {
                                "name": "data",
                                "nativeSrc": "7149:4:67",
                                "nodeType": "YulIdentifier",
                                "src": "7149:4:67"
                              },
                              {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nativeSrc": "7159:1:67",
                                    "nodeType": "YulLiteral",
                                    "src": "7159:1:67",
                                    "type": "",
                                    "value": "2"
                                  },
                                  {
                                    "name": "len",
                                    "nativeSrc": "7162:3:67",
                                    "nodeType": "YulIdentifier",
                                    "src": "7162:3:67"
                                  }
                                ],
                                "functionName": {
                                  "name": "mul",
                                  "nativeSrc": "7155:3:67",
                                  "nodeType": "YulIdentifier",
                                  "src": "7155:3:67"
                                },
                                "nativeSrc": "7155:11:67",
                                "nodeType": "YulFunctionCall",
                                "src": "7155:11:67"
                              }
                            ],
                            "functionName": {
                              "name": "or",
                              "nativeSrc": "7146:2:67",
                              "nodeType": "YulIdentifier",
                              "src": "7146:2:67"
                            },
                            "nativeSrc": "7146:21:67",
                            "nodeType": "YulFunctionCall",
                            "src": "7146:21:67"
                          },
                          "variableNames": [
                            {
                              "name": "used",
                              "nativeSrc": "7138:4:67",
                              "nodeType": "YulIdentifier",
                              "src": "7138:4:67"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "extract_used_part_and_set_length_of_short_byte_array",
                    "nativeSrc": "6878:295:67",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "data",
                        "nativeSrc": "6940:4:67",
                        "nodeType": "YulTypedName",
                        "src": "6940:4:67",
                        "type": ""
                      },
                      {
                        "name": "len",
                        "nativeSrc": "6946:3:67",
                        "nodeType": "YulTypedName",
                        "src": "6946:3:67",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "used",
                        "nativeSrc": "6954:4:67",
                        "nodeType": "YulTypedName",
                        "src": "6954:4:67",
                        "type": ""
                      }
                    ],
                    "src": "6878:295:67"
                  },
                  {
                    "body": {
                      "nativeSrc": "7270:1303:67",
                      "nodeType": "YulBlock",
                      "src": "7270:1303:67",
                      "statements": [
                        {
                          "nativeSrc": "7281:51:67",
                          "nodeType": "YulVariableDeclaration",
                          "src": "7281:51:67",
                          "value": {
                            "arguments": [
                              {
                                "name": "src",
                                "nativeSrc": "7328:3:67",
                                "nodeType": "YulIdentifier",
                                "src": "7328:3:67"
                              }
                            ],
                            "functionName": {
                              "name": "array_length_t_string_memory_ptr",
                              "nativeSrc": "7295:32:67",
                              "nodeType": "YulIdentifier",
                              "src": "7295:32:67"
                            },
                            "nativeSrc": "7295:37:67",
                            "nodeType": "YulFunctionCall",
                            "src": "7295:37:67"
                          },
                          "variables": [
                            {
                              "name": "newLen",
                              "nativeSrc": "7285:6:67",
                              "nodeType": "YulTypedName",
                              "src": "7285:6:67",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nativeSrc": "7417:22:67",
                            "nodeType": "YulBlock",
                            "src": "7417:22:67",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x41",
                                    "nativeSrc": "7419:16:67",
                                    "nodeType": "YulIdentifier",
                                    "src": "7419:16:67"
                                  },
                                  "nativeSrc": "7419:18:67",
                                  "nodeType": "YulFunctionCall",
                                  "src": "7419:18:67"
                                },
                                "nativeSrc": "7419:18:67",
                                "nodeType": "YulExpressionStatement",
                                "src": "7419:18:67"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "newLen",
                                "nativeSrc": "7389:6:67",
                                "nodeType": "YulIdentifier",
                                "src": "7389:6:67"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "7397:18:67",
                                "nodeType": "YulLiteral",
                                "src": "7397:18:67",
                                "type": "",
                                "value": "0xffffffffffffffff"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nativeSrc": "7386:2:67",
                              "nodeType": "YulIdentifier",
                              "src": "7386:2:67"
                            },
                            "nativeSrc": "7386:30:67",
                            "nodeType": "YulFunctionCall",
                            "src": "7386:30:67"
                          },
                          "nativeSrc": "7383:56:67",
                          "nodeType": "YulIf",
                          "src": "7383:56:67"
                        },
                        {
                          "nativeSrc": "7449:52:67",
                          "nodeType": "YulVariableDeclaration",
                          "src": "7449:52:67",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "slot",
                                    "nativeSrc": "7495:4:67",
                                    "nodeType": "YulIdentifier",
                                    "src": "7495:4:67"
                                  }
                                ],
                                "functionName": {
                                  "name": "sload",
                                  "nativeSrc": "7489:5:67",
                                  "nodeType": "YulIdentifier",
                                  "src": "7489:5:67"
                                },
                                "nativeSrc": "7489:11:67",
                                "nodeType": "YulFunctionCall",
                                "src": "7489:11:67"
                              }
                            ],
                            "functionName": {
                              "name": "extract_byte_array_length",
                              "nativeSrc": "7463:25:67",
                              "nodeType": "YulIdentifier",
                              "src": "7463:25:67"
                            },
                            "nativeSrc": "7463:38:67",
                            "nodeType": "YulFunctionCall",
                            "src": "7463:38:67"
                          },
                          "variables": [
                            {
                              "name": "oldLen",
                              "nativeSrc": "7453:6:67",
                              "nodeType": "YulTypedName",
                              "src": "7453:6:67",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "slot",
                                "nativeSrc": "7594:4:67",
                                "nodeType": "YulIdentifier",
                                "src": "7594:4:67"
                              },
                              {
                                "name": "oldLen",
                                "nativeSrc": "7600:6:67",
                                "nodeType": "YulIdentifier",
                                "src": "7600:6:67"
                              },
                              {
                                "name": "newLen",
                                "nativeSrc": "7608:6:67",
                                "nodeType": "YulIdentifier",
                                "src": "7608:6:67"
                              }
                            ],
                            "functionName": {
                              "name": "clean_up_bytearray_end_slots_t_string_storage",
                              "nativeSrc": "7548:45:67",
                              "nodeType": "YulIdentifier",
                              "src": "7548:45:67"
                            },
                            "nativeSrc": "7548:67:67",
                            "nodeType": "YulFunctionCall",
                            "src": "7548:67:67"
                          },
                          "nativeSrc": "7548:67:67",
                          "nodeType": "YulExpressionStatement",
                          "src": "7548:67:67"
                        },
                        {
                          "nativeSrc": "7625:18:67",
                          "nodeType": "YulVariableDeclaration",
                          "src": "7625:18:67",
                          "value": {
                            "kind": "number",
                            "nativeSrc": "7642:1:67",
                            "nodeType": "YulLiteral",
                            "src": "7642:1:67",
                            "type": "",
                            "value": "0"
                          },
                          "variables": [
                            {
                              "name": "srcOffset",
                              "nativeSrc": "7629:9:67",
                              "nodeType": "YulTypedName",
                              "src": "7629:9:67",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nativeSrc": "7653:17:67",
                          "nodeType": "YulAssignment",
                          "src": "7653:17:67",
                          "value": {
                            "kind": "number",
                            "nativeSrc": "7666:4:67",
                            "nodeType": "YulLiteral",
                            "src": "7666:4:67",
                            "type": "",
                            "value": "0x20"
                          },
                          "variableNames": [
                            {
                              "name": "srcOffset",
                              "nativeSrc": "7653:9:67",
                              "nodeType": "YulIdentifier",
                              "src": "7653:9:67"
                            }
                          ]
                        },
                        {
                          "cases": [
                            {
                              "body": {
                                "nativeSrc": "7717:611:67",
                                "nodeType": "YulBlock",
                                "src": "7717:611:67",
                                "statements": [
                                  {
                                    "nativeSrc": "7731:37:67",
                                    "nodeType": "YulVariableDeclaration",
                                    "src": "7731:37:67",
                                    "value": {
                                      "arguments": [
                                        {
                                          "name": "newLen",
                                          "nativeSrc": "7750:6:67",
                                          "nodeType": "YulIdentifier",
                                          "src": "7750:6:67"
                                        },
                                        {
                                          "arguments": [
                                            {
                                              "kind": "number",
                                              "nativeSrc": "7762:4:67",
                                              "nodeType": "YulLiteral",
                                              "src": "7762:4:67",
                                              "type": "",
                                              "value": "0x1f"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "not",
                                            "nativeSrc": "7758:3:67",
                                            "nodeType": "YulIdentifier",
                                            "src": "7758:3:67"
                                          },
                                          "nativeSrc": "7758:9:67",
                                          "nodeType": "YulFunctionCall",
                                          "src": "7758:9:67"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "and",
                                        "nativeSrc": "7746:3:67",
                                        "nodeType": "YulIdentifier",
                                        "src": "7746:3:67"
                                      },
                                      "nativeSrc": "7746:22:67",
                                      "nodeType": "YulFunctionCall",
                                      "src": "7746:22:67"
                                    },
                                    "variables": [
                                      {
                                        "name": "loopEnd",
                                        "nativeSrc": "7735:7:67",
                                        "nodeType": "YulTypedName",
                                        "src": "7735:7:67",
                                        "type": ""
                                      }
                                    ]
                                  },
                                  {
                                    "nativeSrc": "7782:51:67",
                                    "nodeType": "YulVariableDeclaration",
                                    "src": "7782:51:67",
                                    "value": {
                                      "arguments": [
                                        {
                                          "name": "slot",
                                          "nativeSrc": "7828:4:67",
                                          "nodeType": "YulIdentifier",
                                          "src": "7828:4:67"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "array_dataslot_t_string_storage",
                                        "nativeSrc": "7796:31:67",
                                        "nodeType": "YulIdentifier",
                                        "src": "7796:31:67"
                                      },
                                      "nativeSrc": "7796:37:67",
                                      "nodeType": "YulFunctionCall",
                                      "src": "7796:37:67"
                                    },
                                    "variables": [
                                      {
                                        "name": "dstPtr",
                                        "nativeSrc": "7786:6:67",
                                        "nodeType": "YulTypedName",
                                        "src": "7786:6:67",
                                        "type": ""
                                      }
                                    ]
                                  },
                                  {
                                    "nativeSrc": "7846:10:67",
                                    "nodeType": "YulVariableDeclaration",
                                    "src": "7846:10:67",
                                    "value": {
                                      "kind": "number",
                                      "nativeSrc": "7855:1:67",
                                      "nodeType": "YulLiteral",
                                      "src": "7855:1:67",
                                      "type": "",
                                      "value": "0"
                                    },
                                    "variables": [
                                      {
                                        "name": "i",
                                        "nativeSrc": "7850:1:67",
                                        "nodeType": "YulTypedName",
                                        "src": "7850:1:67",
                                        "type": ""
                                      }
                                    ]
                                  },
                                  {
                                    "body": {
                                      "nativeSrc": "7914:163:67",
                                      "nodeType": "YulBlock",
                                      "src": "7914:163:67",
                                      "statements": [
                                        {
                                          "expression": {
                                            "arguments": [
                                              {
                                                "name": "dstPtr",
                                                "nativeSrc": "7939:6:67",
                                                "nodeType": "YulIdentifier",
                                                "src": "7939:6:67"
                                              },
                                              {
                                                "arguments": [
                                                  {
                                                    "arguments": [
                                                      {
                                                        "name": "src",
                                                        "nativeSrc": "7957:3:67",
                                                        "nodeType": "YulIdentifier",
                                                        "src": "7957:3:67"
                                                      },
                                                      {
                                                        "name": "srcOffset",
                                                        "nativeSrc": "7962:9:67",
                                                        "nodeType": "YulIdentifier",
                                                        "src": "7962:9:67"
                                                      }
                                                    ],
                                                    "functionName": {
                                                      "name": "add",
                                                      "nativeSrc": "7953:3:67",
                                                      "nodeType": "YulIdentifier",
                                                      "src": "7953:3:67"
                                                    },
                                                    "nativeSrc": "7953:19:67",
                                                    "nodeType": "YulFunctionCall",
                                                    "src": "7953:19:67"
                                                  }
                                                ],
                                                "functionName": {
                                                  "name": "mload",
                                                  "nativeSrc": "7947:5:67",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "7947:5:67"
                                                },
                                                "nativeSrc": "7947:26:67",
                                                "nodeType": "YulFunctionCall",
                                                "src": "7947:26:67"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "sstore",
                                              "nativeSrc": "7932:6:67",
                                              "nodeType": "YulIdentifier",
                                              "src": "7932:6:67"
                                            },
                                            "nativeSrc": "7932:42:67",
                                            "nodeType": "YulFunctionCall",
                                            "src": "7932:42:67"
                                          },
                                          "nativeSrc": "7932:42:67",
                                          "nodeType": "YulExpressionStatement",
                                          "src": "7932:42:67"
                                        },
                                        {
                                          "nativeSrc": "7991:24:67",
                                          "nodeType": "YulAssignment",
                                          "src": "7991:24:67",
                                          "value": {
                                            "arguments": [
                                              {
                                                "name": "dstPtr",
                                                "nativeSrc": "8005:6:67",
                                                "nodeType": "YulIdentifier",
                                                "src": "8005:6:67"
                                              },
                                              {
                                                "kind": "number",
                                                "nativeSrc": "8013:1:67",
                                                "nodeType": "YulLiteral",
                                                "src": "8013:1:67",
                                                "type": "",
                                                "value": "1"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "add",
                                              "nativeSrc": "8001:3:67",
                                              "nodeType": "YulIdentifier",
                                              "src": "8001:3:67"
                                            },
                                            "nativeSrc": "8001:14:67",
                                            "nodeType": "YulFunctionCall",
                                            "src": "8001:14:67"
                                          },
                                          "variableNames": [
                                            {
                                              "name": "dstPtr",
                                              "nativeSrc": "7991:6:67",
                                              "nodeType": "YulIdentifier",
                                              "src": "7991:6:67"
                                            }
                                          ]
                                        },
                                        {
                                          "nativeSrc": "8032:31:67",
                                          "nodeType": "YulAssignment",
                                          "src": "8032:31:67",
                                          "value": {
                                            "arguments": [
                                              {
                                                "name": "srcOffset",
                                                "nativeSrc": "8049:9:67",
                                                "nodeType": "YulIdentifier",
                                                "src": "8049:9:67"
                                              },
                                              {
                                                "kind": "number",
                                                "nativeSrc": "8060:2:67",
                                                "nodeType": "YulLiteral",
                                                "src": "8060:2:67",
                                                "type": "",
                                                "value": "32"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "add",
                                              "nativeSrc": "8045:3:67",
                                              "nodeType": "YulIdentifier",
                                              "src": "8045:3:67"
                                            },
                                            "nativeSrc": "8045:18:67",
                                            "nodeType": "YulFunctionCall",
                                            "src": "8045:18:67"
                                          },
                                          "variableNames": [
                                            {
                                              "name": "srcOffset",
                                              "nativeSrc": "8032:9:67",
                                              "nodeType": "YulIdentifier",
                                              "src": "8032:9:67"
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    "condition": {
                                      "arguments": [
                                        {
                                          "name": "i",
                                          "nativeSrc": "7880:1:67",
                                          "nodeType": "YulIdentifier",
                                          "src": "7880:1:67"
                                        },
                                        {
                                          "name": "loopEnd",
                                          "nativeSrc": "7883:7:67",
                                          "nodeType": "YulIdentifier",
                                          "src": "7883:7:67"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "lt",
                                        "nativeSrc": "7877:2:67",
                                        "nodeType": "YulIdentifier",
                                        "src": "7877:2:67"
                                      },
                                      "nativeSrc": "7877:14:67",
                                      "nodeType": "YulFunctionCall",
                                      "src": "7877:14:67"
                                    },
                                    "nativeSrc": "7869:208:67",
                                    "nodeType": "YulForLoop",
                                    "post": {
                                      "nativeSrc": "7892:21:67",
                                      "nodeType": "YulBlock",
                                      "src": "7892:21:67",
                                      "statements": [
                                        {
                                          "nativeSrc": "7894:17:67",
                                          "nodeType": "YulAssignment",
                                          "src": "7894:17:67",
                                          "value": {
                                            "arguments": [
                                              {
                                                "name": "i",
                                                "nativeSrc": "7903:1:67",
                                                "nodeType": "YulIdentifier",
                                                "src": "7903:1:67"
                                              },
                                              {
                                                "kind": "number",
                                                "nativeSrc": "7906:4:67",
                                                "nodeType": "YulLiteral",
                                                "src": "7906:4:67",
                                                "type": "",
                                                "value": "0x20"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "add",
                                              "nativeSrc": "7899:3:67",
                                              "nodeType": "YulIdentifier",
                                              "src": "7899:3:67"
                                            },
                                            "nativeSrc": "7899:12:67",
                                            "nodeType": "YulFunctionCall",
                                            "src": "7899:12:67"
                                          },
                                          "variableNames": [
                                            {
                                              "name": "i",
                                              "nativeSrc": "7894:1:67",
                                              "nodeType": "YulIdentifier",
                                              "src": "7894:1:67"
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    "pre": {
                                      "nativeSrc": "7873:3:67",
                                      "nodeType": "YulBlock",
                                      "src": "7873:3:67",
                                      "statements": []
                                    },
                                    "src": "7869:208:67"
                                  },
                                  {
                                    "body": {
                                      "nativeSrc": "8113:156:67",
                                      "nodeType": "YulBlock",
                                      "src": "8113:156:67",
                                      "statements": [
                                        {
                                          "nativeSrc": "8131:43:67",
                                          "nodeType": "YulVariableDeclaration",
                                          "src": "8131:43:67",
                                          "value": {
                                            "arguments": [
                                              {
                                                "arguments": [
                                                  {
                                                    "name": "src",
                                                    "nativeSrc": "8158:3:67",
                                                    "nodeType": "YulIdentifier",
                                                    "src": "8158:3:67"
                                                  },
                                                  {
                                                    "name": "srcOffset",
                                                    "nativeSrc": "8163:9:67",
                                                    "nodeType": "YulIdentifier",
                                                    "src": "8163:9:67"
                                                  }
                                                ],
                                                "functionName": {
                                                  "name": "add",
                                                  "nativeSrc": "8154:3:67",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "8154:3:67"
                                                },
                                                "nativeSrc": "8154:19:67",
                                                "nodeType": "YulFunctionCall",
                                                "src": "8154:19:67"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "mload",
                                              "nativeSrc": "8148:5:67",
                                              "nodeType": "YulIdentifier",
                                              "src": "8148:5:67"
                                            },
                                            "nativeSrc": "8148:26:67",
                                            "nodeType": "YulFunctionCall",
                                            "src": "8148:26:67"
                                          },
                                          "variables": [
                                            {
                                              "name": "lastValue",
                                              "nativeSrc": "8135:9:67",
                                              "nodeType": "YulTypedName",
                                              "src": "8135:9:67",
                                              "type": ""
                                            }
                                          ]
                                        },
                                        {
                                          "expression": {
                                            "arguments": [
                                              {
                                                "name": "dstPtr",
                                                "nativeSrc": "8198:6:67",
                                                "nodeType": "YulIdentifier",
                                                "src": "8198:6:67"
                                              },
                                              {
                                                "arguments": [
                                                  {
                                                    "name": "lastValue",
                                                    "nativeSrc": "8225:9:67",
                                                    "nodeType": "YulIdentifier",
                                                    "src": "8225:9:67"
                                                  },
                                                  {
                                                    "arguments": [
                                                      {
                                                        "name": "newLen",
                                                        "nativeSrc": "8240:6:67",
                                                        "nodeType": "YulIdentifier",
                                                        "src": "8240:6:67"
                                                      },
                                                      {
                                                        "kind": "number",
                                                        "nativeSrc": "8248:4:67",
                                                        "nodeType": "YulLiteral",
                                                        "src": "8248:4:67",
                                                        "type": "",
                                                        "value": "0x1f"
                                                      }
                                                    ],
                                                    "functionName": {
                                                      "name": "and",
                                                      "nativeSrc": "8236:3:67",
                                                      "nodeType": "YulIdentifier",
                                                      "src": "8236:3:67"
                                                    },
                                                    "nativeSrc": "8236:17:67",
                                                    "nodeType": "YulFunctionCall",
                                                    "src": "8236:17:67"
                                                  }
                                                ],
                                                "functionName": {
                                                  "name": "mask_bytes_dynamic",
                                                  "nativeSrc": "8206:18:67",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "8206:18:67"
                                                },
                                                "nativeSrc": "8206:48:67",
                                                "nodeType": "YulFunctionCall",
                                                "src": "8206:48:67"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "sstore",
                                              "nativeSrc": "8191:6:67",
                                              "nodeType": "YulIdentifier",
                                              "src": "8191:6:67"
                                            },
                                            "nativeSrc": "8191:64:67",
                                            "nodeType": "YulFunctionCall",
                                            "src": "8191:64:67"
                                          },
                                          "nativeSrc": "8191:64:67",
                                          "nodeType": "YulExpressionStatement",
                                          "src": "8191:64:67"
                                        }
                                      ]
                                    },
                                    "condition": {
                                      "arguments": [
                                        {
                                          "name": "loopEnd",
                                          "nativeSrc": "8096:7:67",
                                          "nodeType": "YulIdentifier",
                                          "src": "8096:7:67"
                                        },
                                        {
                                          "name": "newLen",
                                          "nativeSrc": "8105:6:67",
                                          "nodeType": "YulIdentifier",
                                          "src": "8105:6:67"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "lt",
                                        "nativeSrc": "8093:2:67",
                                        "nodeType": "YulIdentifier",
                                        "src": "8093:2:67"
                                      },
                                      "nativeSrc": "8093:19:67",
                                      "nodeType": "YulFunctionCall",
                                      "src": "8093:19:67"
                                    },
                                    "nativeSrc": "8090:179:67",
                                    "nodeType": "YulIf",
                                    "src": "8090:179:67"
                                  },
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "name": "slot",
                                          "nativeSrc": "8289:4:67",
                                          "nodeType": "YulIdentifier",
                                          "src": "8289:4:67"
                                        },
                                        {
                                          "arguments": [
                                            {
                                              "arguments": [
                                                {
                                                  "name": "newLen",
                                                  "nativeSrc": "8303:6:67",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "8303:6:67"
                                                },
                                                {
                                                  "kind": "number",
                                                  "nativeSrc": "8311:1:67",
                                                  "nodeType": "YulLiteral",
                                                  "src": "8311:1:67",
                                                  "type": "",
                                                  "value": "2"
                                                }
                                              ],
                                              "functionName": {
                                                "name": "mul",
                                                "nativeSrc": "8299:3:67",
                                                "nodeType": "YulIdentifier",
                                                "src": "8299:3:67"
                                              },
                                              "nativeSrc": "8299:14:67",
                                              "nodeType": "YulFunctionCall",
                                              "src": "8299:14:67"
                                            },
                                            {
                                              "kind": "number",
                                              "nativeSrc": "8315:1:67",
                                              "nodeType": "YulLiteral",
                                              "src": "8315:1:67",
                                              "type": "",
                                              "value": "1"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "add",
                                            "nativeSrc": "8295:3:67",
                                            "nodeType": "YulIdentifier",
                                            "src": "8295:3:67"
                                          },
                                          "nativeSrc": "8295:22:67",
                                          "nodeType": "YulFunctionCall",
                                          "src": "8295:22:67"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "sstore",
                                        "nativeSrc": "8282:6:67",
                                        "nodeType": "YulIdentifier",
                                        "src": "8282:6:67"
                                      },
                                      "nativeSrc": "8282:36:67",
                                      "nodeType": "YulFunctionCall",
                                      "src": "8282:36:67"
                                    },
                                    "nativeSrc": "8282:36:67",
                                    "nodeType": "YulExpressionStatement",
                                    "src": "8282:36:67"
                                  }
                                ]
                              },
                              "nativeSrc": "7710:618:67",
                              "nodeType": "YulCase",
                              "src": "7710:618:67",
                              "value": {
                                "kind": "number",
                                "nativeSrc": "7715:1:67",
                                "nodeType": "YulLiteral",
                                "src": "7715:1:67",
                                "type": "",
                                "value": "1"
                              }
                            },
                            {
                              "body": {
                                "nativeSrc": "8345:222:67",
                                "nodeType": "YulBlock",
                                "src": "8345:222:67",
                                "statements": [
                                  {
                                    "nativeSrc": "8359:14:67",
                                    "nodeType": "YulVariableDeclaration",
                                    "src": "8359:14:67",
                                    "value": {
                                      "kind": "number",
                                      "nativeSrc": "8372:1:67",
                                      "nodeType": "YulLiteral",
                                      "src": "8372:1:67",
                                      "type": "",
                                      "value": "0"
                                    },
                                    "variables": [
                                      {
                                        "name": "value",
                                        "nativeSrc": "8363:5:67",
                                        "nodeType": "YulTypedName",
                                        "src": "8363:5:67",
                                        "type": ""
                                      }
                                    ]
                                  },
                                  {
                                    "body": {
                                      "nativeSrc": "8396:67:67",
                                      "nodeType": "YulBlock",
                                      "src": "8396:67:67",
                                      "statements": [
                                        {
                                          "nativeSrc": "8414:35:67",
                                          "nodeType": "YulAssignment",
                                          "src": "8414:35:67",
                                          "value": {
                                            "arguments": [
                                              {
                                                "arguments": [
                                                  {
                                                    "name": "src",
                                                    "nativeSrc": "8433:3:67",
                                                    "nodeType": "YulIdentifier",
                                                    "src": "8433:3:67"
                                                  },
                                                  {
                                                    "name": "srcOffset",
                                                    "nativeSrc": "8438:9:67",
                                                    "nodeType": "YulIdentifier",
                                                    "src": "8438:9:67"
                                                  }
                                                ],
                                                "functionName": {
                                                  "name": "add",
                                                  "nativeSrc": "8429:3:67",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "8429:3:67"
                                                },
                                                "nativeSrc": "8429:19:67",
                                                "nodeType": "YulFunctionCall",
                                                "src": "8429:19:67"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "mload",
                                              "nativeSrc": "8423:5:67",
                                              "nodeType": "YulIdentifier",
                                              "src": "8423:5:67"
                                            },
                                            "nativeSrc": "8423:26:67",
                                            "nodeType": "YulFunctionCall",
                                            "src": "8423:26:67"
                                          },
                                          "variableNames": [
                                            {
                                              "name": "value",
                                              "nativeSrc": "8414:5:67",
                                              "nodeType": "YulIdentifier",
                                              "src": "8414:5:67"
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    "condition": {
                                      "name": "newLen",
                                      "nativeSrc": "8389:6:67",
                                      "nodeType": "YulIdentifier",
                                      "src": "8389:6:67"
                                    },
                                    "nativeSrc": "8386:77:67",
                                    "nodeType": "YulIf",
                                    "src": "8386:77:67"
                                  },
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "name": "slot",
                                          "nativeSrc": "8483:4:67",
                                          "nodeType": "YulIdentifier",
                                          "src": "8483:4:67"
                                        },
                                        {
                                          "arguments": [
                                            {
                                              "name": "value",
                                              "nativeSrc": "8542:5:67",
                                              "nodeType": "YulIdentifier",
                                              "src": "8542:5:67"
                                            },
                                            {
                                              "name": "newLen",
                                              "nativeSrc": "8549:6:67",
                                              "nodeType": "YulIdentifier",
                                              "src": "8549:6:67"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "extract_used_part_and_set_length_of_short_byte_array",
                                            "nativeSrc": "8489:52:67",
                                            "nodeType": "YulIdentifier",
                                            "src": "8489:52:67"
                                          },
                                          "nativeSrc": "8489:67:67",
                                          "nodeType": "YulFunctionCall",
                                          "src": "8489:67:67"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "sstore",
                                        "nativeSrc": "8476:6:67",
                                        "nodeType": "YulIdentifier",
                                        "src": "8476:6:67"
                                      },
                                      "nativeSrc": "8476:81:67",
                                      "nodeType": "YulFunctionCall",
                                      "src": "8476:81:67"
                                    },
                                    "nativeSrc": "8476:81:67",
                                    "nodeType": "YulExpressionStatement",
                                    "src": "8476:81:67"
                                  }
                                ]
                              },
                              "nativeSrc": "8337:230:67",
                              "nodeType": "YulCase",
                              "src": "8337:230:67",
                              "value": "default"
                            }
                          ],
                          "expression": {
                            "arguments": [
                              {
                                "name": "newLen",
                                "nativeSrc": "7690:6:67",
                                "nodeType": "YulIdentifier",
                                "src": "7690:6:67"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "7698:2:67",
                                "nodeType": "YulLiteral",
                                "src": "7698:2:67",
                                "type": "",
                                "value": "31"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nativeSrc": "7687:2:67",
                              "nodeType": "YulIdentifier",
                              "src": "7687:2:67"
                            },
                            "nativeSrc": "7687:14:67",
                            "nodeType": "YulFunctionCall",
                            "src": "7687:14:67"
                          },
                          "nativeSrc": "7680:887:67",
                          "nodeType": "YulSwitch",
                          "src": "7680:887:67"
                        }
                      ]
                    },
                    "name": "copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage",
                    "nativeSrc": "7178:1395:67",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "slot",
                        "nativeSrc": "7259:4:67",
                        "nodeType": "YulTypedName",
                        "src": "7259:4:67",
                        "type": ""
                      },
                      {
                        "name": "src",
                        "nativeSrc": "7265:3:67",
                        "nodeType": "YulTypedName",
                        "src": "7265:3:67",
                        "type": ""
                      }
                    ],
                    "src": "7178:1395:67"
                  },
                  {
                    "body": {
                      "nativeSrc": "8624:81:67",
                      "nodeType": "YulBlock",
                      "src": "8624:81:67",
                      "statements": [
                        {
                          "nativeSrc": "8634:65:67",
                          "nodeType": "YulAssignment",
                          "src": "8634:65:67",
                          "value": {
                            "arguments": [
                              {
                                "name": "value",
                                "nativeSrc": "8649:5:67",
                                "nodeType": "YulIdentifier",
                                "src": "8649:5:67"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "8656:42:67",
                                "nodeType": "YulLiteral",
                                "src": "8656:42:67",
                                "type": "",
                                "value": "0xffffffffffffffffffffffffffffffffffffffff"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nativeSrc": "8645:3:67",
                              "nodeType": "YulIdentifier",
                              "src": "8645:3:67"
                            },
                            "nativeSrc": "8645:54:67",
                            "nodeType": "YulFunctionCall",
                            "src": "8645:54:67"
                          },
                          "variableNames": [
                            {
                              "name": "cleaned",
                              "nativeSrc": "8634:7:67",
                              "nodeType": "YulIdentifier",
                              "src": "8634:7:67"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "cleanup_t_uint160",
                    "nativeSrc": "8579:126:67",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nativeSrc": "8606:5:67",
                        "nodeType": "YulTypedName",
                        "src": "8606:5:67",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "cleaned",
                        "nativeSrc": "8616:7:67",
                        "nodeType": "YulTypedName",
                        "src": "8616:7:67",
                        "type": ""
                      }
                    ],
                    "src": "8579:126:67"
                  },
                  {
                    "body": {
                      "nativeSrc": "8756:51:67",
                      "nodeType": "YulBlock",
                      "src": "8756:51:67",
                      "statements": [
                        {
                          "nativeSrc": "8766:35:67",
                          "nodeType": "YulAssignment",
                          "src": "8766:35:67",
                          "value": {
                            "arguments": [
                              {
                                "name": "value",
                                "nativeSrc": "8795:5:67",
                                "nodeType": "YulIdentifier",
                                "src": "8795:5:67"
                              }
                            ],
                            "functionName": {
                              "name": "cleanup_t_uint160",
                              "nativeSrc": "8777:17:67",
                              "nodeType": "YulIdentifier",
                              "src": "8777:17:67"
                            },
                            "nativeSrc": "8777:24:67",
                            "nodeType": "YulFunctionCall",
                            "src": "8777:24:67"
                          },
                          "variableNames": [
                            {
                              "name": "cleaned",
                              "nativeSrc": "8766:7:67",
                              "nodeType": "YulIdentifier",
                              "src": "8766:7:67"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "cleanup_t_address",
                    "nativeSrc": "8711:96:67",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nativeSrc": "8738:5:67",
                        "nodeType": "YulTypedName",
                        "src": "8738:5:67",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "cleaned",
                        "nativeSrc": "8748:7:67",
                        "nodeType": "YulTypedName",
                        "src": "8748:7:67",
                        "type": ""
                      }
                    ],
                    "src": "8711:96:67"
                  },
                  {
                    "body": {
                      "nativeSrc": "8878:53:67",
                      "nodeType": "YulBlock",
                      "src": "8878:53:67",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nativeSrc": "8895:3:67",
                                "nodeType": "YulIdentifier",
                                "src": "8895:3:67"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nativeSrc": "8918:5:67",
                                    "nodeType": "YulIdentifier",
                                    "src": "8918:5:67"
                                  }
                                ],
                                "functionName": {
                                  "name": "cleanup_t_address",
                                  "nativeSrc": "8900:17:67",
                                  "nodeType": "YulIdentifier",
                                  "src": "8900:17:67"
                                },
                                "nativeSrc": "8900:24:67",
                                "nodeType": "YulFunctionCall",
                                "src": "8900:24:67"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nativeSrc": "8888:6:67",
                              "nodeType": "YulIdentifier",
                              "src": "8888:6:67"
                            },
                            "nativeSrc": "8888:37:67",
                            "nodeType": "YulFunctionCall",
                            "src": "8888:37:67"
                          },
                          "nativeSrc": "8888:37:67",
                          "nodeType": "YulExpressionStatement",
                          "src": "8888:37:67"
                        }
                      ]
                    },
                    "name": "abi_encode_t_address_to_t_address_fromStack",
                    "nativeSrc": "8813:118:67",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nativeSrc": "8866:5:67",
                        "nodeType": "YulTypedName",
                        "src": "8866:5:67",
                        "type": ""
                      },
                      {
                        "name": "pos",
                        "nativeSrc": "8873:3:67",
                        "nodeType": "YulTypedName",
                        "src": "8873:3:67",
                        "type": ""
                      }
                    ],
                    "src": "8813:118:67"
                  },
                  {
                    "body": {
                      "nativeSrc": "9035:124:67",
                      "nodeType": "YulBlock",
                      "src": "9035:124:67",
                      "statements": [
                        {
                          "nativeSrc": "9045:26:67",
                          "nodeType": "YulAssignment",
                          "src": "9045:26:67",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nativeSrc": "9057:9:67",
                                "nodeType": "YulIdentifier",
                                "src": "9057:9:67"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "9068:2:67",
                                "nodeType": "YulLiteral",
                                "src": "9068:2:67",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nativeSrc": "9053:3:67",
                              "nodeType": "YulIdentifier",
                              "src": "9053:3:67"
                            },
                            "nativeSrc": "9053:18:67",
                            "nodeType": "YulFunctionCall",
                            "src": "9053:18:67"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nativeSrc": "9045:4:67",
                              "nodeType": "YulIdentifier",
                              "src": "9045:4:67"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value0",
                                "nativeSrc": "9125:6:67",
                                "nodeType": "YulIdentifier",
                                "src": "9125:6:67"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nativeSrc": "9138:9:67",
                                    "nodeType": "YulIdentifier",
                                    "src": "9138:9:67"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "9149:1:67",
                                    "nodeType": "YulLiteral",
                                    "src": "9149:1:67",
                                    "type": "",
                                    "value": "0"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "9134:3:67",
                                  "nodeType": "YulIdentifier",
                                  "src": "9134:3:67"
                                },
                                "nativeSrc": "9134:17:67",
                                "nodeType": "YulFunctionCall",
                                "src": "9134:17:67"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_t_address_to_t_address_fromStack",
                              "nativeSrc": "9081:43:67",
                              "nodeType": "YulIdentifier",
                              "src": "9081:43:67"
                            },
                            "nativeSrc": "9081:71:67",
                            "nodeType": "YulFunctionCall",
                            "src": "9081:71:67"
                          },
                          "nativeSrc": "9081:71:67",
                          "nodeType": "YulExpressionStatement",
                          "src": "9081:71:67"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_address__to_t_address__fromStack_reversed",
                    "nativeSrc": "8937:222:67",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nativeSrc": "9007:9:67",
                        "nodeType": "YulTypedName",
                        "src": "9007:9:67",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nativeSrc": "9019:6:67",
                        "nodeType": "YulTypedName",
                        "src": "9019:6:67",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nativeSrc": "9030:4:67",
                        "nodeType": "YulTypedName",
                        "src": "9030:4:67",
                        "type": ""
                      }
                    ],
                    "src": "8937:222:67"
                  }
                ]
              },
              "contents": "{\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() {\n        revert(0, 0)\n    }\n\n    function revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae() {\n        revert(0, 0)\n    }\n\n    function round_up_to_mul_of_32(value) -> result {\n        result := and(add(value, 31), not(31))\n    }\n\n    function panic_error_0x41() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n\n    function finalize_allocation(memPtr, size) {\n        let newFreePtr := add(memPtr, round_up_to_mul_of_32(size))\n        // protect against overflow\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n    }\n\n    function allocate_memory(size) -> memPtr {\n        memPtr := allocate_unbounded()\n        finalize_allocation(memPtr, size)\n    }\n\n    function array_allocation_size_t_string_memory_ptr(length) -> size {\n        // Make sure we can allocate memory without overflow\n        if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n\n        size := round_up_to_mul_of_32(length)\n\n        // add length slot\n        size := add(size, 0x20)\n\n    }\n\n    function copy_memory_to_memory_with_cleanup(src, dst, length) {\n\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        mstore(add(dst, length), 0)\n\n    }\n\n    function abi_decode_available_length_t_string_memory_ptr_fromMemory(src, length, end) -> array {\n        array := allocate_memory(array_allocation_size_t_string_memory_ptr(length))\n        mstore(array, length)\n        let dst := add(array, 0x20)\n        if gt(add(src, length), end) { revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae() }\n        copy_memory_to_memory_with_cleanup(src, dst, length)\n    }\n\n    // string\n    function abi_decode_t_string_memory_ptr_fromMemory(offset, end) -> array {\n        if iszero(slt(add(offset, 0x1f), end)) { revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() }\n        let length := mload(offset)\n        array := abi_decode_available_length_t_string_memory_ptr_fromMemory(add(offset, 0x20), length, end)\n    }\n\n    function abi_decode_tuple_t_string_memory_ptrt_string_memory_ptr_fromMemory(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := mload(add(headStart, 0))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value0 := abi_decode_t_string_memory_ptr_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := mload(add(headStart, 32))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value1 := abi_decode_t_string_memory_ptr_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function array_length_t_string_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function panic_error_0x22() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x22)\n        revert(0, 0x24)\n    }\n\n    function extract_byte_array_length(data) -> length {\n        length := div(data, 2)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) {\n            length := and(length, 0x7f)\n        }\n\n        if eq(outOfPlaceEncoding, lt(length, 32)) {\n            panic_error_0x22()\n        }\n    }\n\n    function array_dataslot_t_string_storage(ptr) -> data {\n        data := ptr\n\n        mstore(0, ptr)\n        data := keccak256(0, 0x20)\n\n    }\n\n    function divide_by_32_ceil(value) -> result {\n        result := div(add(value, 31), 32)\n    }\n\n    function shift_left_dynamic(bits, value) -> newValue {\n        newValue :=\n\n        shl(bits, value)\n\n    }\n\n    function update_byte_slice_dynamic32(value, shiftBytes, toInsert) -> result {\n        let shiftBits := mul(shiftBytes, 8)\n        let mask := shift_left_dynamic(shiftBits, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n        toInsert := shift_left_dynamic(shiftBits, toInsert)\n        value := and(value, not(mask))\n        result := or(value, and(toInsert, mask))\n    }\n\n    function cleanup_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function identity(value) -> ret {\n        ret := value\n    }\n\n    function convert_t_uint256_to_t_uint256(value) -> converted {\n        converted := cleanup_t_uint256(identity(cleanup_t_uint256(value)))\n    }\n\n    function prepare_store_t_uint256(value) -> ret {\n        ret := value\n    }\n\n    function update_storage_value_t_uint256_to_t_uint256(slot, offset, value_0) {\n        let convertedValue_0 := convert_t_uint256_to_t_uint256(value_0)\n        sstore(slot, update_byte_slice_dynamic32(sload(slot), offset, prepare_store_t_uint256(convertedValue_0)))\n    }\n\n    function zero_value_for_split_t_uint256() -> ret {\n        ret := 0\n    }\n\n    function storage_set_to_zero_t_uint256(slot, offset) {\n        let zero_0 := zero_value_for_split_t_uint256()\n        update_storage_value_t_uint256_to_t_uint256(slot, offset, zero_0)\n    }\n\n    function clear_storage_range_t_bytes1(start, end) {\n        for {} lt(start, end) { start := add(start, 1) }\n        {\n            storage_set_to_zero_t_uint256(start, 0)\n        }\n    }\n\n    function clean_up_bytearray_end_slots_t_string_storage(array, len, startIndex) {\n\n        if gt(len, 31) {\n            let dataArea := array_dataslot_t_string_storage(array)\n            let deleteStart := add(dataArea, divide_by_32_ceil(startIndex))\n            // If we are clearing array to be short byte array, we want to clear only data starting from array data area.\n            if lt(startIndex, 32) { deleteStart := dataArea }\n            clear_storage_range_t_bytes1(deleteStart, add(dataArea, divide_by_32_ceil(len)))\n        }\n\n    }\n\n    function shift_right_unsigned_dynamic(bits, value) -> newValue {\n        newValue :=\n\n        shr(bits, value)\n\n    }\n\n    function mask_bytes_dynamic(data, bytes) -> result {\n        let mask := not(shift_right_unsigned_dynamic(mul(8, bytes), not(0)))\n        result := and(data, mask)\n    }\n    function extract_used_part_and_set_length_of_short_byte_array(data, len) -> used {\n        // we want to save only elements that are part of the array after resizing\n        // others should be set to zero\n        data := mask_bytes_dynamic(data, len)\n        used := or(data, mul(2, len))\n    }\n    function copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage(slot, src) {\n\n        let newLen := array_length_t_string_memory_ptr(src)\n        // Make sure array length is sane\n        if gt(newLen, 0xffffffffffffffff) { panic_error_0x41() }\n\n        let oldLen := extract_byte_array_length(sload(slot))\n\n        // potentially truncate data\n        clean_up_bytearray_end_slots_t_string_storage(slot, oldLen, newLen)\n\n        let srcOffset := 0\n\n        srcOffset := 0x20\n\n        switch gt(newLen, 31)\n        case 1 {\n            let loopEnd := and(newLen, not(0x1f))\n\n            let dstPtr := array_dataslot_t_string_storage(slot)\n            let i := 0\n            for { } lt(i, loopEnd) { i := add(i, 0x20) } {\n                sstore(dstPtr, mload(add(src, srcOffset)))\n                dstPtr := add(dstPtr, 1)\n                srcOffset := add(srcOffset, 32)\n            }\n            if lt(loopEnd, newLen) {\n                let lastValue := mload(add(src, srcOffset))\n                sstore(dstPtr, mask_bytes_dynamic(lastValue, and(newLen, 0x1f)))\n            }\n            sstore(slot, add(mul(newLen, 2), 1))\n        }\n        default {\n            let value := 0\n            if newLen {\n                value := mload(add(src, srcOffset))\n            }\n            sstore(slot, extract_used_part_and_set_length_of_short_byte_array(value, newLen))\n        }\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function abi_encode_t_address_to_t_address_fromStack(value, pos) {\n        mstore(pos, cleanup_t_address(value))\n    }\n\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n    }\n\n}\n",
              "id": 67,
              "language": "Yul",
              "name": "#utility.yul"
            }
          ],
          "linkReferences": {},
          "object": "608060405234801561001057600080fd5b506040516133f43803806133f48339818101604052810190610032919061031f565b8181338282816000908161004691906105b8565b50806001908161005691906105b8565b505050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036100cb5760006040517f1e4fbdf70000000000000000000000000000000000000000000000000000000081526004016100c291906106cb565b60405180910390fd5b6100da816100e460201b60201c565b50505050506106e6565b6000600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600b60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610211826101c8565b810181811067ffffffffffffffff821117156102305761022f6101d9565b5b80604052505050565b60006102436101aa565b905061024f8282610208565b919050565b600067ffffffffffffffff82111561026f5761026e6101d9565b5b610278826101c8565b9050602081019050919050565b60005b838110156102a3578082015181840152602081019050610288565b60008484015250505050565b60006102c26102bd84610254565b610239565b9050828152602081018484840111156102de576102dd6101c3565b5b6102e9848285610285565b509392505050565b600082601f830112610306576103056101be565b5b81516103168482602086016102af565b91505092915050565b60008060408385031215610336576103356101b4565b5b600083015167ffffffffffffffff811115610354576103536101b9565b5b610360858286016102f1565b925050602083015167ffffffffffffffff811115610381576103806101b9565b5b61038d858286016102f1565b9150509250929050565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806103e957607f821691505b6020821081036103fc576103fb6103a2565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026104647fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82610427565b61046e8683610427565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b60006104b56104b06104ab84610486565b610490565b610486565b9050919050565b6000819050919050565b6104cf8361049a565b6104e36104db826104bc565b848454610434565b825550505050565b600090565b6104f86104eb565b6105038184846104c6565b505050565b5b818110156105275761051c6000826104f0565b600181019050610509565b5050565b601f82111561056c5761053d81610402565b61054684610417565b81016020851015610555578190505b61056961056185610417565b830182610508565b50505b505050565b600082821c905092915050565b600061058f60001984600802610571565b1980831691505092915050565b60006105a8838361057e565b9150826002028217905092915050565b6105c182610397565b67ffffffffffffffff8111156105da576105d96101d9565b5b6105e482546103d1565b6105ef82828561052b565b600060209050601f8311600181146106225760008415610610578287015190505b61061a858261059c565b865550610682565b601f19841661063086610402565b60005b8281101561065857848901518255600182019150602085019450602081019050610633565b868310156106755784890151610671601f89168261057e565b8355505b6001600288020188555050505b505050505050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006106b58261068a565b9050919050565b6106c5816106aa565b82525050565b60006020820190506106e060008301846106bc565b92915050565b612cff806106f56000396000f3fe608060405234801561001057600080fd5b50600436106101425760003560e01c80634f6ccce7116100b857806395d89b411161007c57806395d89b4114610387578063a22cb465146103a5578063b88d4fde146103c1578063c87b56dd146103dd578063e985e9c51461040d578063f2fde38b1461043d57610142565b80634f6ccce7146102cf5780636352211e146102ff57806370a082311461032f578063715018a61461035f5780638da5cb5b1461036957610142565b806323b872dd1161010a57806323b872dd146101ff5780632f745c591461021b57806330b2c5961461024b57806340d097c31461026757806342842e0e1461029757806342966c68146102b357610142565b806301ffc9a71461014757806306fdde0314610177578063081812fc14610195578063095ea7b3146101c557806318160ddd146101e1575b600080fd5b610161600480360381019061015c919061218d565b610459565b60405161016e91906121d5565b60405180910390f35b61017f61046b565b60405161018c9190612280565b60405180910390f35b6101af60048036038101906101aa91906122d8565b6104fd565b6040516101bc9190612346565b60405180910390f35b6101df60048036038101906101da919061238d565b610519565b005b6101e961052f565b6040516101f691906123dc565b60405180910390f35b610219600480360381019061021491906123f7565b61053c565b005b6102356004803603810190610230919061238d565b61063e565b60405161024291906123dc565b60405180910390f35b6102656004803603810190610260919061238d565b6106e7565b005b610281600480360381019061027c919061244a565b6106f5565b60405161028e91906123dc565b60405180910390f35b6102b160048036038101906102ac91906123f7565b61074f565b005b6102cd60048036038101906102c891906122d8565b61076f565b005b6102e960048036038101906102e491906122d8565b610786565b6040516102f691906123dc565b60405180910390f35b610319600480360381019061031491906122d8565b6107fc565b6040516103269190612346565b60405180910390f35b6103496004803603810190610344919061244a565b61080e565b60405161035691906123dc565b60405180910390f35b6103676108c8565b005b6103716108dc565b60405161037e9190612346565b60405180910390f35b61038f610906565b60405161039c9190612280565b60405180910390f35b6103bf60048036038101906103ba91906124a3565b610998565b005b6103db60048036038101906103d69190612618565b6109ae565b005b6103f760048036038101906103f291906122d8565b6109d3565b6040516104049190612280565b60405180910390f35b6104276004803603810190610422919061269b565b6109e5565b60405161043491906121d5565b60405180910390f35b6104576004803603810190610452919061244a565b610a79565b005b600061046482610aff565b9050919050565b60606000805461047a9061270a565b80601f01602080910402602001604051908101604052809291908181526020018280546104a69061270a565b80156104f35780601f106104c8576101008083540402835291602001916104f3565b820191906000526020600020905b8154815290600101906020018083116104d657829003601f168201915b5050505050905090565b600061050882610b60565b5061051282610be8565b9050919050565b61052b8282610526610c25565b610c2d565b5050565b6000600880549050905090565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036105ae5760006040517f64a0ae920000000000000000000000000000000000000000000000000000000081526004016105a59190612346565b60405180910390fd5b60006105c283836105bd610c25565b610c3f565b90508373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610638578382826040517f64283d7b00000000000000000000000000000000000000000000000000000000815260040161062f9392919061273b565b60405180910390fd5b50505050565b60006106498361080e565b821061068e5782826040517fa57d13dc000000000000000000000000000000000000000000000000000000008152600401610685929190612772565b60405180910390fd5b600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002054905092915050565b6106f18282610c55565b5050565b60006106ff610c73565b6000600c6000815480929190610714906127ca565b9190505590506107248382610c55565b61074681604051806060016040528060358152602001612c9560359139610cfa565b80915050919050565b61076a838383604051806020016040528060008152506109ae565b505050565b61078260008261077d610c25565b610c3f565b5050565b600061079061052f565b82106107d6576000826040517fa57d13dc0000000000000000000000000000000000000000000000000000000081526004016107cd929190612772565b60405180910390fd5b600882815481106107ea576107e9612812565b5b90600052602060002001549050919050565b600061080782610b60565b9050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036108815760006040517f89c62b640000000000000000000000000000000000000000000000000000000081526004016108789190612346565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6108d0610c73565b6108da6000610d56565b565b6000600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6060600180546109159061270a565b80601f01602080910402602001604051908101604052809291908181526020018280546109419061270a565b801561098e5780601f106109635761010080835404028352916020019161098e565b820191906000526020600020905b81548152906001019060200180831161097157829003601f168201915b5050505050905090565b6109aa6109a3610c25565b8383610e1c565b5050565b6109b984848461053c565b6109cd6109c4610c25565b85858585610f8b565b50505050565b60606109de8261113c565b9050919050565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b610a81610c73565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610af35760006040517f1e4fbdf7000000000000000000000000000000000000000000000000000000008152600401610aea9190612346565b60405180910390fd5b610afc81610d56565b50565b6000634906490660e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480610b595750610b588261124f565b5b9050919050565b600080610b6c836112c9565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610bdf57826040517f7e273289000000000000000000000000000000000000000000000000000000008152600401610bd691906123dc565b60405180910390fd5b80915050919050565b60006004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600033905090565b610c3a8383836001611306565b505050565b6000610c4c8484846114cb565b90509392505050565b610c6f8282604051806020016040528060008152506115e8565b5050565b610c7b610c25565b73ffffffffffffffffffffffffffffffffffffffff16610c996108dc565b73ffffffffffffffffffffffffffffffffffffffff1614610cf857610cbc610c25565b6040517f118cdaa7000000000000000000000000000000000000000000000000000000008152600401610cef9190612346565b60405180910390fd5b565b80600a60008481526020019081526020016000209081610d1a91906129ed565b507ff8e1a15aba9398e019f0b49df1a4fde98ee17ae345cb5f6b5e2c27f5033e8ce782604051610d4a91906123dc565b60405180910390a15050565b6000600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600b60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610e8d57816040517f5b08ba18000000000000000000000000000000000000000000000000000000008152600401610e849190612346565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051610f7e91906121d5565b60405180910390a3505050565b60008373ffffffffffffffffffffffffffffffffffffffff163b1115611135578273ffffffffffffffffffffffffffffffffffffffff1663150b7a02868685856040518563ffffffff1660e01b8152600401610fea9493929190612b14565b6020604051808303816000875af192505050801561102657506040513d601f19601f820116820180604052508101906110239190612b75565b60015b6110aa573d8060008114611056576040519150601f19603f3d011682016040523d82523d6000602084013e61105b565b606091505b5060008151036110a257836040517f64a0ae920000000000000000000000000000000000000000000000000000000081526004016110999190612346565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161461113357836040517f64a0ae9200000000000000000000000000000000000000000000000000000000815260040161112a9190612346565b60405180910390fd5b505b5050505050565b606061114782610b60565b506000600a600084815260200190815260200160002080546111689061270a565b80601f01602080910402602001604051908101604052809291908181526020018280546111949061270a565b80156111e15780601f106111b6576101008083540402835291602001916111e1565b820191906000526020600020905b8154815290600101906020018083116111c457829003601f168201915b5050505050905060006111f261160c565b9050600081510361120757819250505061124a565b60008251111561123c578082604051602001611224929190612bde565b6040516020818303038152906040529250505061124a565b61124584611623565b925050505b919050565b60007f780e9d63000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806112c257506112c18261168c565b5b9050919050565b60006002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b808061133f5750600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614155b1561147357600061134f84610b60565b9050600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141580156113ba57508273ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614155b80156113cd57506113cb81846109e5565b155b1561140f57826040517fa9fbf51f0000000000000000000000000000000000000000000000000000000081526004016114069190612346565b60405180910390fd5b811561147157838573ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45b505b836004600085815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050505050565b6000806114d985858561176e565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361151d5761151884611988565b61155c565b8473ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161461155b5761155a81856119d1565b5b5b600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff160361159e5761159984611abc565b6115dd565b8473ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146115dc576115db8585611b8d565b5b5b809150509392505050565b6115f28383611c18565b6116076115fd610c25565b6000858585610f8b565b505050565b606060405180602001604052806000815250905090565b606061162e82610b60565b50600061163961160c565b905060008151116116595760405180602001604052806000815250611684565b8061166384611d11565b604051602001611674929190612bde565b6040516020818303038152906040525b915050919050565b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061175757507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80611767575061176682611ddf565b5b9050919050565b60008061177a846112c9565b9050600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16146117bc576117bb818486611e49565b5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161461184d576117fe600085600080611306565b6001600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055505b600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16146118d0576001600360008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055505b846002600086815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550838573ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4809150509392505050565b6008805490506009600083815260200190815260200160002081905550600881908060018154018082558091505060019003906000526020600020016000909190919091505550565b60006119dc8361080e565b90506000600760008481526020019081526020016000205490506000600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050828214611a885760008160008581526020019081526020016000205490508082600085815260200190815260200160002081905550826007600083815260200190815260200160002081905550505b6007600085815260200190815260200160002060009055806000848152602001908152602001600020600090555050505050565b60006001600880549050611ad09190612c02565b9050600060096000848152602001908152602001600020549050600060088381548110611b0057611aff612812565b5b906000526020600020015490508060088381548110611b2257611b21612812565b5b906000526020600020018190555081600960008381526020019081526020016000208190555060096000858152602001908152602001600020600090556008805480611b7157611b70612c36565b5b6001900381819060005260206000200160009055905550505050565b60006001611b9a8461080e565b611ba49190612c02565b905081600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002081905550806007600084815260200190815260200160002081905550505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611c8a5760006040517f64a0ae92000000000000000000000000000000000000000000000000000000008152600401611c819190612346565b60405180910390fd5b6000611c9883836000610c3f565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614611d0c5760006040517f73c6ac6e000000000000000000000000000000000000000000000000000000008152600401611d039190612346565b60405180910390fd5b505050565b606060006001611d2084611f0d565b01905060008167ffffffffffffffff811115611d3f57611d3e6124ed565b5b6040519080825280601f01601f191660200182016040528015611d715781602001600182028036833780820191505090505b509050600082602001820190505b600115611dd4578080600190039150507f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a8581611dc857611dc7612c65565b5b04945060008503611d7f575b819350505050919050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b611e54838383612060565b611f0857600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603611ec957806040517f7e273289000000000000000000000000000000000000000000000000000000008152600401611ec091906123dc565b60405180910390fd5b81816040517f177e802f000000000000000000000000000000000000000000000000000000008152600401611eff929190612772565b60405180910390fd5b505050565b600080600090507a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008310611f6b577a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008381611f6157611f60612c65565b5b0492506040810190505b6d04ee2d6d415b85acef81000000008310611fa8576d04ee2d6d415b85acef81000000008381611f9e57611f9d612c65565b5b0492506020810190505b662386f26fc100008310611fd757662386f26fc100008381611fcd57611fcc612c65565b5b0492506010810190505b6305f5e1008310612000576305f5e1008381611ff657611ff5612c65565b5b0492506008810190505b612710831061202557612710838161201b5761201a612c65565b5b0492506004810190505b60648310612048576064838161203e5761203d612c65565b5b0492506002810190505b600a8310612057576001810190505b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415801561211857508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614806120d957506120d884846109e5565b5b8061211757508273ffffffffffffffffffffffffffffffffffffffff166120ff83610be8565b73ffffffffffffffffffffffffffffffffffffffff16145b5b90509392505050565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b61216a81612135565b811461217557600080fd5b50565b60008135905061218781612161565b92915050565b6000602082840312156121a3576121a261212b565b5b60006121b184828501612178565b91505092915050565b60008115159050919050565b6121cf816121ba565b82525050565b60006020820190506121ea60008301846121c6565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561222a57808201518184015260208101905061220f565b60008484015250505050565b6000601f19601f8301169050919050565b6000612252826121f0565b61225c81856121fb565b935061226c81856020860161220c565b61227581612236565b840191505092915050565b6000602082019050818103600083015261229a8184612247565b905092915050565b6000819050919050565b6122b5816122a2565b81146122c057600080fd5b50565b6000813590506122d2816122ac565b92915050565b6000602082840312156122ee576122ed61212b565b5b60006122fc848285016122c3565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061233082612305565b9050919050565b61234081612325565b82525050565b600060208201905061235b6000830184612337565b92915050565b61236a81612325565b811461237557600080fd5b50565b60008135905061238781612361565b92915050565b600080604083850312156123a4576123a361212b565b5b60006123b285828601612378565b92505060206123c3858286016122c3565b9150509250929050565b6123d6816122a2565b82525050565b60006020820190506123f160008301846123cd565b92915050565b6000806000606084860312156124105761240f61212b565b5b600061241e86828701612378565b935050602061242f86828701612378565b9250506040612440868287016122c3565b9150509250925092565b6000602082840312156124605761245f61212b565b5b600061246e84828501612378565b91505092915050565b612480816121ba565b811461248b57600080fd5b50565b60008135905061249d81612477565b92915050565b600080604083850312156124ba576124b961212b565b5b60006124c885828601612378565b92505060206124d98582860161248e565b9150509250929050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61252582612236565b810181811067ffffffffffffffff82111715612544576125436124ed565b5b80604052505050565b6000612557612121565b9050612563828261251c565b919050565b600067ffffffffffffffff821115612583576125826124ed565b5b61258c82612236565b9050602081019050919050565b82818337600083830152505050565b60006125bb6125b684612568565b61254d565b9050828152602081018484840111156125d7576125d66124e8565b5b6125e2848285612599565b509392505050565b600082601f8301126125ff576125fe6124e3565b5b813561260f8482602086016125a8565b91505092915050565b600080600080608085870312156126325761263161212b565b5b600061264087828801612378565b945050602061265187828801612378565b9350506040612662878288016122c3565b925050606085013567ffffffffffffffff81111561268357612682612130565b5b61268f878288016125ea565b91505092959194509250565b600080604083850312156126b2576126b161212b565b5b60006126c085828601612378565b92505060206126d185828601612378565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061272257607f821691505b602082108103612735576127346126db565b5b50919050565b60006060820190506127506000830186612337565b61275d60208301856123cd565b61276a6040830184612337565b949350505050565b60006040820190506127876000830185612337565b61279460208301846123cd565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006127d5826122a2565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036128075761280661279b565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026128a37fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82612866565b6128ad8683612866565b95508019841693508086168417925050509392505050565b6000819050919050565b60006128ea6128e56128e0846122a2565b6128c5565b6122a2565b9050919050565b6000819050919050565b612904836128cf565b612918612910826128f1565b848454612873565b825550505050565b600090565b61292d612920565b6129388184846128fb565b505050565b5b8181101561295c57612951600082612925565b60018101905061293e565b5050565b601f8211156129a15761297281612841565b61297b84612856565b8101602085101561298a578190505b61299e61299685612856565b83018261293d565b50505b505050565b600082821c905092915050565b60006129c4600019846008026129a6565b1980831691505092915050565b60006129dd83836129b3565b9150826002028217905092915050565b6129f6826121f0565b67ffffffffffffffff811115612a0f57612a0e6124ed565b5b612a19825461270a565b612a24828285612960565b600060209050601f831160018114612a575760008415612a45578287015190505b612a4f85826129d1565b865550612ab7565b601f198416612a6586612841565b60005b82811015612a8d57848901518255600182019150602085019450602081019050612a68565b86831015612aaa5784890151612aa6601f8916826129b3565b8355505b6001600288020188555050505b505050505050565b600081519050919050565b600082825260208201905092915050565b6000612ae682612abf565b612af08185612aca565b9350612b0081856020860161220c565b612b0981612236565b840191505092915050565b6000608082019050612b296000830187612337565b612b366020830186612337565b612b4360408301856123cd565b8181036060830152612b558184612adb565b905095945050505050565b600081519050612b6f81612161565b92915050565b600060208284031215612b8b57612b8a61212b565b5b6000612b9984828501612b60565b91505092915050565b600081905092915050565b6000612bb8826121f0565b612bc28185612ba2565b9350612bd281856020860161220c565b80840191505092915050565b6000612bea8285612bad565b9150612bf68284612bad565b91508190509392505050565b6000612c0d826122a2565b9150612c18836122a2565b9250828203905081811115612c3057612c2f61279b565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fdfe697066733a2f2f516d62464b31593269633248325558767978476d51697962417179416b5050656743624c6f644a47573362714d66a2646970667358221220b83569333861773d1457ad47106fd59db66ac713987444b5a148145cd98df5e864736f6c634300081c0033",
          "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH2 0x33F4 CODESIZE SUB DUP1 PUSH2 0x33F4 DUP4 CODECOPY DUP2 DUP2 ADD PUSH1 0x40 MSTORE DUP2 ADD SWAP1 PUSH2 0x32 SWAP2 SWAP1 PUSH2 0x31F JUMP JUMPDEST DUP2 DUP2 CALLER DUP3 DUP3 DUP2 PUSH1 0x0 SWAP1 DUP2 PUSH2 0x46 SWAP2 SWAP1 PUSH2 0x5B8 JUMP JUMPDEST POP DUP1 PUSH1 0x1 SWAP1 DUP2 PUSH2 0x56 SWAP2 SWAP1 PUSH2 0x5B8 JUMP JUMPDEST POP POP POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0xCB JUMPI PUSH1 0x0 PUSH1 0x40 MLOAD PUSH32 0x1E4FBDF700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xC2 SWAP2 SWAP1 PUSH2 0x6CB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xDA DUP2 PUSH2 0xE4 PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST POP POP POP POP POP PUSH2 0x6E6 JUMP JUMPDEST PUSH1 0x0 PUSH1 0xB PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP DUP2 PUSH1 0xB PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH2 0x211 DUP3 PUSH2 0x1C8 JUMP JUMPDEST DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0x230 JUMPI PUSH2 0x22F PUSH2 0x1D9 JUMP JUMPDEST JUMPDEST DUP1 PUSH1 0x40 MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x243 PUSH2 0x1AA JUMP JUMPDEST SWAP1 POP PUSH2 0x24F DUP3 DUP3 PUSH2 0x208 JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x26F JUMPI PUSH2 0x26E PUSH2 0x1D9 JUMP JUMPDEST JUMPDEST PUSH2 0x278 DUP3 PUSH2 0x1C8 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x2A3 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x288 JUMP JUMPDEST PUSH1 0x0 DUP5 DUP5 ADD MSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2C2 PUSH2 0x2BD DUP5 PUSH2 0x254 JUMP JUMPDEST PUSH2 0x239 JUMP JUMPDEST SWAP1 POP DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 DUP5 DUP5 ADD GT ISZERO PUSH2 0x2DE JUMPI PUSH2 0x2DD PUSH2 0x1C3 JUMP JUMPDEST JUMPDEST PUSH2 0x2E9 DUP5 DUP3 DUP6 PUSH2 0x285 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x306 JUMPI PUSH2 0x305 PUSH2 0x1BE JUMP JUMPDEST JUMPDEST DUP2 MLOAD PUSH2 0x316 DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH2 0x2AF JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x336 JUMPI PUSH2 0x335 PUSH2 0x1B4 JUMP JUMPDEST JUMPDEST PUSH1 0x0 DUP4 ADD MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x354 JUMPI PUSH2 0x353 PUSH2 0x1B9 JUMP JUMPDEST JUMPDEST PUSH2 0x360 DUP6 DUP3 DUP7 ADD PUSH2 0x2F1 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 DUP4 ADD MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x381 JUMPI PUSH2 0x380 PUSH2 0x1B9 JUMP JUMPDEST JUMPDEST PUSH2 0x38D DUP6 DUP3 DUP7 ADD PUSH2 0x2F1 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH2 0x3E9 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x3FC JUMPI PUSH2 0x3FB PUSH2 0x3A2 JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP DUP2 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 PUSH1 0x1F DUP4 ADD DIV SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 SHL SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x8 DUP4 MUL PUSH2 0x464 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 PUSH2 0x427 JUMP JUMPDEST PUSH2 0x46E DUP7 DUP4 PUSH2 0x427 JUMP JUMPDEST SWAP6 POP DUP1 NOT DUP5 AND SWAP4 POP DUP1 DUP7 AND DUP5 OR SWAP3 POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4B5 PUSH2 0x4B0 PUSH2 0x4AB DUP5 PUSH2 0x486 JUMP JUMPDEST PUSH2 0x490 JUMP JUMPDEST PUSH2 0x486 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x4CF DUP4 PUSH2 0x49A JUMP JUMPDEST PUSH2 0x4E3 PUSH2 0x4DB DUP3 PUSH2 0x4BC JUMP JUMPDEST DUP5 DUP5 SLOAD PUSH2 0x434 JUMP JUMPDEST DUP3 SSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH2 0x4F8 PUSH2 0x4EB JUMP JUMPDEST PUSH2 0x503 DUP2 DUP5 DUP5 PUSH2 0x4C6 JUMP JUMPDEST POP POP POP JUMP JUMPDEST JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x527 JUMPI PUSH2 0x51C PUSH1 0x0 DUP3 PUSH2 0x4F0 JUMP JUMPDEST PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH2 0x509 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x1F DUP3 GT ISZERO PUSH2 0x56C JUMPI PUSH2 0x53D DUP2 PUSH2 0x402 JUMP JUMPDEST PUSH2 0x546 DUP5 PUSH2 0x417 JUMP JUMPDEST DUP2 ADD PUSH1 0x20 DUP6 LT ISZERO PUSH2 0x555 JUMPI DUP2 SWAP1 POP JUMPDEST PUSH2 0x569 PUSH2 0x561 DUP6 PUSH2 0x417 JUMP JUMPDEST DUP4 ADD DUP3 PUSH2 0x508 JUMP JUMPDEST POP POP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 SHR SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x58F PUSH1 0x0 NOT DUP5 PUSH1 0x8 MUL PUSH2 0x571 JUMP JUMPDEST NOT DUP1 DUP4 AND SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x5A8 DUP4 DUP4 PUSH2 0x57E JUMP JUMPDEST SWAP2 POP DUP3 PUSH1 0x2 MUL DUP3 OR SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x5C1 DUP3 PUSH2 0x397 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x5DA JUMPI PUSH2 0x5D9 PUSH2 0x1D9 JUMP JUMPDEST JUMPDEST PUSH2 0x5E4 DUP3 SLOAD PUSH2 0x3D1 JUMP JUMPDEST PUSH2 0x5EF DUP3 DUP3 DUP6 PUSH2 0x52B JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 SWAP1 POP PUSH1 0x1F DUP4 GT PUSH1 0x1 DUP2 EQ PUSH2 0x622 JUMPI PUSH1 0x0 DUP5 ISZERO PUSH2 0x610 JUMPI DUP3 DUP8 ADD MLOAD SWAP1 POP JUMPDEST PUSH2 0x61A DUP6 DUP3 PUSH2 0x59C JUMP JUMPDEST DUP7 SSTORE POP PUSH2 0x682 JUMP JUMPDEST PUSH1 0x1F NOT DUP5 AND PUSH2 0x630 DUP7 PUSH2 0x402 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x658 JUMPI DUP5 DUP10 ADD MLOAD DUP3 SSTORE PUSH1 0x1 DUP3 ADD SWAP2 POP PUSH1 0x20 DUP6 ADD SWAP5 POP PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x633 JUMP JUMPDEST DUP7 DUP4 LT ISZERO PUSH2 0x675 JUMPI DUP5 DUP10 ADD MLOAD PUSH2 0x671 PUSH1 0x1F DUP10 AND DUP3 PUSH2 0x57E JUMP JUMPDEST DUP4 SSTORE POP JUMPDEST PUSH1 0x1 PUSH1 0x2 DUP9 MUL ADD DUP9 SSTORE POP POP POP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x6B5 DUP3 PUSH2 0x68A JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x6C5 DUP2 PUSH2 0x6AA JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x6E0 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x6BC JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x2CFF DUP1 PUSH2 0x6F5 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x142 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x4F6CCCE7 GT PUSH2 0xB8 JUMPI DUP1 PUSH4 0x95D89B41 GT PUSH2 0x7C JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x387 JUMPI DUP1 PUSH4 0xA22CB465 EQ PUSH2 0x3A5 JUMPI DUP1 PUSH4 0xB88D4FDE EQ PUSH2 0x3C1 JUMPI DUP1 PUSH4 0xC87B56DD EQ PUSH2 0x3DD JUMPI DUP1 PUSH4 0xE985E9C5 EQ PUSH2 0x40D JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x43D JUMPI PUSH2 0x142 JUMP JUMPDEST DUP1 PUSH4 0x4F6CCCE7 EQ PUSH2 0x2CF JUMPI DUP1 PUSH4 0x6352211E EQ PUSH2 0x2FF JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x32F JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x35F JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x369 JUMPI PUSH2 0x142 JUMP JUMPDEST DUP1 PUSH4 0x23B872DD GT PUSH2 0x10A JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x1FF JUMPI DUP1 PUSH4 0x2F745C59 EQ PUSH2 0x21B JUMPI DUP1 PUSH4 0x30B2C596 EQ PUSH2 0x24B JUMPI DUP1 PUSH4 0x40D097C3 EQ PUSH2 0x267 JUMPI DUP1 PUSH4 0x42842E0E EQ PUSH2 0x297 JUMPI DUP1 PUSH4 0x42966C68 EQ PUSH2 0x2B3 JUMPI PUSH2 0x142 JUMP JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x147 JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x177 JUMPI DUP1 PUSH4 0x81812FC EQ PUSH2 0x195 JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x1C5 JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x1E1 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x161 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x15C SWAP2 SWAP1 PUSH2 0x218D JUMP JUMPDEST PUSH2 0x459 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x16E SWAP2 SWAP1 PUSH2 0x21D5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x17F PUSH2 0x46B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x18C SWAP2 SWAP1 PUSH2 0x2280 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1AF PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1AA SWAP2 SWAP1 PUSH2 0x22D8 JUMP JUMPDEST PUSH2 0x4FD JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1BC SWAP2 SWAP1 PUSH2 0x2346 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1DF PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1DA SWAP2 SWAP1 PUSH2 0x238D JUMP JUMPDEST PUSH2 0x519 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1E9 PUSH2 0x52F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1F6 SWAP2 SWAP1 PUSH2 0x23DC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x219 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x214 SWAP2 SWAP1 PUSH2 0x23F7 JUMP JUMPDEST PUSH2 0x53C JUMP JUMPDEST STOP JUMPDEST PUSH2 0x235 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x230 SWAP2 SWAP1 PUSH2 0x238D JUMP JUMPDEST PUSH2 0x63E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x242 SWAP2 SWAP1 PUSH2 0x23DC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x265 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x260 SWAP2 SWAP1 PUSH2 0x238D JUMP JUMPDEST PUSH2 0x6E7 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x281 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x27C SWAP2 SWAP1 PUSH2 0x244A JUMP JUMPDEST PUSH2 0x6F5 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x28E SWAP2 SWAP1 PUSH2 0x23DC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x2B1 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2AC SWAP2 SWAP1 PUSH2 0x23F7 JUMP JUMPDEST PUSH2 0x74F JUMP JUMPDEST STOP JUMPDEST PUSH2 0x2CD PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2C8 SWAP2 SWAP1 PUSH2 0x22D8 JUMP JUMPDEST PUSH2 0x76F JUMP JUMPDEST STOP JUMPDEST PUSH2 0x2E9 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2E4 SWAP2 SWAP1 PUSH2 0x22D8 JUMP JUMPDEST PUSH2 0x786 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2F6 SWAP2 SWAP1 PUSH2 0x23DC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x319 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x314 SWAP2 SWAP1 PUSH2 0x22D8 JUMP JUMPDEST PUSH2 0x7FC JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x326 SWAP2 SWAP1 PUSH2 0x2346 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x349 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x344 SWAP2 SWAP1 PUSH2 0x244A JUMP JUMPDEST PUSH2 0x80E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x356 SWAP2 SWAP1 PUSH2 0x23DC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x367 PUSH2 0x8C8 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x371 PUSH2 0x8DC JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x37E SWAP2 SWAP1 PUSH2 0x2346 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x38F PUSH2 0x906 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x39C SWAP2 SWAP1 PUSH2 0x2280 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x3BF PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x3BA SWAP2 SWAP1 PUSH2 0x24A3 JUMP JUMPDEST PUSH2 0x998 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x3DB PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x3D6 SWAP2 SWAP1 PUSH2 0x2618 JUMP JUMPDEST PUSH2 0x9AE JUMP JUMPDEST STOP JUMPDEST PUSH2 0x3F7 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x3F2 SWAP2 SWAP1 PUSH2 0x22D8 JUMP JUMPDEST PUSH2 0x9D3 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x404 SWAP2 SWAP1 PUSH2 0x2280 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x427 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x422 SWAP2 SWAP1 PUSH2 0x269B JUMP JUMPDEST PUSH2 0x9E5 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x434 SWAP2 SWAP1 PUSH2 0x21D5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x457 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x452 SWAP2 SWAP1 PUSH2 0x244A JUMP JUMPDEST PUSH2 0xA79 JUMP JUMPDEST STOP JUMPDEST PUSH1 0x0 PUSH2 0x464 DUP3 PUSH2 0xAFF JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP1 SLOAD PUSH2 0x47A SWAP1 PUSH2 0x270A JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x4A6 SWAP1 PUSH2 0x270A JUMP JUMPDEST DUP1 ISZERO PUSH2 0x4F3 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x4C8 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x4F3 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x4D6 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x508 DUP3 PUSH2 0xB60 JUMP JUMPDEST POP PUSH2 0x512 DUP3 PUSH2 0xBE8 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x52B DUP3 DUP3 PUSH2 0x526 PUSH2 0xC25 JUMP JUMPDEST PUSH2 0xC2D JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x8 DUP1 SLOAD SWAP1 POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x5AE JUMPI PUSH1 0x0 PUSH1 0x40 MLOAD PUSH32 0x64A0AE9200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5A5 SWAP2 SWAP1 PUSH2 0x2346 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x5C2 DUP4 DUP4 PUSH2 0x5BD PUSH2 0xC25 JUMP JUMPDEST PUSH2 0xC3F JUMP JUMPDEST SWAP1 POP DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x638 JUMPI DUP4 DUP3 DUP3 PUSH1 0x40 MLOAD PUSH32 0x64283D7B00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x62F SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x273B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x649 DUP4 PUSH2 0x80E JUMP JUMPDEST DUP3 LT PUSH2 0x68E JUMPI DUP3 DUP3 PUSH1 0x40 MLOAD PUSH32 0xA57D13DC00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x685 SWAP3 SWAP2 SWAP1 PUSH2 0x2772 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x6 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x6F1 DUP3 DUP3 PUSH2 0xC55 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x6FF PUSH2 0xC73 JUMP JUMPDEST PUSH1 0x0 PUSH1 0xC PUSH1 0x0 DUP2 SLOAD DUP1 SWAP3 SWAP2 SWAP1 PUSH2 0x714 SWAP1 PUSH2 0x27CA JUMP JUMPDEST SWAP2 SWAP1 POP SSTORE SWAP1 POP PUSH2 0x724 DUP4 DUP3 PUSH2 0xC55 JUMP JUMPDEST PUSH2 0x746 DUP2 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x35 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x2C95 PUSH1 0x35 SWAP2 CODECOPY PUSH2 0xCFA JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x76A DUP4 DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x9AE JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x782 PUSH1 0x0 DUP3 PUSH2 0x77D PUSH2 0xC25 JUMP JUMPDEST PUSH2 0xC3F JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x790 PUSH2 0x52F JUMP JUMPDEST DUP3 LT PUSH2 0x7D6 JUMPI PUSH1 0x0 DUP3 PUSH1 0x40 MLOAD PUSH32 0xA57D13DC00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x7CD SWAP3 SWAP2 SWAP1 PUSH2 0x2772 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x8 DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x7EA JUMPI PUSH2 0x7E9 PUSH2 0x2812 JUMP JUMPDEST JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x807 DUP3 PUSH2 0xB60 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x881 JUMPI PUSH1 0x0 PUSH1 0x40 MLOAD PUSH32 0x89C62B6400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x878 SWAP2 SWAP1 PUSH2 0x2346 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x3 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x8D0 PUSH2 0xC73 JUMP JUMPDEST PUSH2 0x8DA PUSH1 0x0 PUSH2 0xD56 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH1 0xB PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x1 DUP1 SLOAD PUSH2 0x915 SWAP1 PUSH2 0x270A JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x941 SWAP1 PUSH2 0x270A JUMP JUMPDEST DUP1 ISZERO PUSH2 0x98E JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x963 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x98E JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x971 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x9AA PUSH2 0x9A3 PUSH2 0xC25 JUMP JUMPDEST DUP4 DUP4 PUSH2 0xE1C JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x9B9 DUP5 DUP5 DUP5 PUSH2 0x53C JUMP JUMPDEST PUSH2 0x9CD PUSH2 0x9C4 PUSH2 0xC25 JUMP JUMPDEST DUP6 DUP6 DUP6 DUP6 PUSH2 0xF8B JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x9DE DUP3 PUSH2 0x113C JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x5 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0xA81 PUSH2 0xC73 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0xAF3 JUMPI PUSH1 0x0 PUSH1 0x40 MLOAD PUSH32 0x1E4FBDF700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xAEA SWAP2 SWAP1 PUSH2 0x2346 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xAFC DUP2 PUSH2 0xD56 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 PUSH4 0x49064906 PUSH1 0xE0 SHL PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ DUP1 PUSH2 0xB59 JUMPI POP PUSH2 0xB58 DUP3 PUSH2 0x124F JUMP JUMPDEST JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0xB6C DUP4 PUSH2 0x12C9 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0xBDF JUMPI DUP3 PUSH1 0x40 MLOAD PUSH32 0x7E27328900000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xBD6 SWAP2 SWAP1 PUSH2 0x23DC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x4 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0xC3A DUP4 DUP4 DUP4 PUSH1 0x1 PUSH2 0x1306 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xC4C DUP5 DUP5 DUP5 PUSH2 0x14CB JUMP JUMPDEST SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0xC6F DUP3 DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x15E8 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0xC7B PUSH2 0xC25 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xC99 PUSH2 0x8DC JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xCF8 JUMPI PUSH2 0xCBC PUSH2 0xC25 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x118CDAA700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xCEF SWAP2 SWAP1 PUSH2 0x2346 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST DUP1 PUSH1 0xA PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SWAP1 DUP2 PUSH2 0xD1A SWAP2 SWAP1 PUSH2 0x29ED JUMP JUMPDEST POP PUSH32 0xF8E1A15ABA9398E019F0B49DF1A4FDE98EE17AE345CB5F6B5E2C27F5033E8CE7 DUP3 PUSH1 0x40 MLOAD PUSH2 0xD4A SWAP2 SWAP1 PUSH2 0x23DC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xB PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP DUP2 PUSH1 0xB PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0xE8D JUMPI DUP2 PUSH1 0x40 MLOAD PUSH32 0x5B08BA1800000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xE84 SWAP2 SWAP1 PUSH2 0x2346 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x5 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31 DUP4 PUSH1 0x40 MLOAD PUSH2 0xF7E SWAP2 SWAP1 PUSH2 0x21D5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EXTCODESIZE GT ISZERO PUSH2 0x1135 JUMPI DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x150B7A02 DUP7 DUP7 DUP6 DUP6 PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xFEA SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2B14 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x1026 JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1023 SWAP2 SWAP1 PUSH2 0x2B75 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x10AA JUMPI RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x1056 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x105B JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP PUSH1 0x0 DUP2 MLOAD SUB PUSH2 0x10A2 JUMPI DUP4 PUSH1 0x40 MLOAD PUSH32 0x64A0AE9200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1099 SWAP2 SWAP1 PUSH2 0x2346 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 MLOAD DUP2 PUSH1 0x20 ADD REVERT JUMPDEST PUSH4 0x150B7A02 PUSH1 0xE0 SHL PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP2 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ PUSH2 0x1133 JUMPI DUP4 PUSH1 0x40 MLOAD PUSH32 0x64A0AE9200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x112A SWAP2 SWAP1 PUSH2 0x2346 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x1147 DUP3 PUSH2 0xB60 JUMP JUMPDEST POP PUSH1 0x0 PUSH1 0xA PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP1 SLOAD PUSH2 0x1168 SWAP1 PUSH2 0x270A JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x1194 SWAP1 PUSH2 0x270A JUMP JUMPDEST DUP1 ISZERO PUSH2 0x11E1 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x11B6 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x11E1 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x11C4 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP PUSH1 0x0 PUSH2 0x11F2 PUSH2 0x160C JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 MLOAD SUB PUSH2 0x1207 JUMPI DUP2 SWAP3 POP POP POP PUSH2 0x124A JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD GT ISZERO PUSH2 0x123C JUMPI DUP1 DUP3 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x1224 SWAP3 SWAP2 SWAP1 PUSH2 0x2BDE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP3 POP POP POP PUSH2 0x124A JUMP JUMPDEST PUSH2 0x1245 DUP5 PUSH2 0x1623 JUMP JUMPDEST SWAP3 POP POP POP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0x780E9D6300000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ DUP1 PUSH2 0x12C2 JUMPI POP PUSH2 0x12C1 DUP3 PUSH2 0x168C JUMP JUMPDEST JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 DUP1 PUSH2 0x133F JUMPI POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO JUMPDEST ISZERO PUSH2 0x1473 JUMPI PUSH1 0x0 PUSH2 0x134F DUP5 PUSH2 0xB60 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO DUP1 ISZERO PUSH2 0x13BA JUMPI POP DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO JUMPDEST DUP1 ISZERO PUSH2 0x13CD JUMPI POP PUSH2 0x13CB DUP2 DUP5 PUSH2 0x9E5 JUMP JUMPDEST ISZERO JUMPDEST ISZERO PUSH2 0x140F JUMPI DUP3 PUSH1 0x40 MLOAD PUSH32 0xA9FBF51F00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1406 SWAP2 SWAP1 PUSH2 0x2346 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 ISZERO PUSH2 0x1471 JUMPI DUP4 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 JUMPDEST POP JUMPDEST DUP4 PUSH1 0x4 PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x14D9 DUP6 DUP6 DUP6 PUSH2 0x176E JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x151D JUMPI PUSH2 0x1518 DUP5 PUSH2 0x1988 JUMP JUMPDEST PUSH2 0x155C JUMP JUMPDEST DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x155B JUMPI PUSH2 0x155A DUP2 DUP6 PUSH2 0x19D1 JUMP JUMPDEST JUMPDEST JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x159E JUMPI PUSH2 0x1599 DUP5 PUSH2 0x1ABC JUMP JUMPDEST PUSH2 0x15DD JUMP JUMPDEST DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x15DC JUMPI PUSH2 0x15DB DUP6 DUP6 PUSH2 0x1B8D JUMP JUMPDEST JUMPDEST JUMPDEST DUP1 SWAP2 POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x15F2 DUP4 DUP4 PUSH2 0x1C18 JUMP JUMPDEST PUSH2 0x1607 PUSH2 0x15FD PUSH2 0xC25 JUMP JUMPDEST PUSH1 0x0 DUP6 DUP6 DUP6 PUSH2 0xF8B JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x162E DUP3 PUSH2 0xB60 JUMP JUMPDEST POP PUSH1 0x0 PUSH2 0x1639 PUSH2 0x160C JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 MLOAD GT PUSH2 0x1659 JUMPI PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x1684 JUMP JUMPDEST DUP1 PUSH2 0x1663 DUP5 PUSH2 0x1D11 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x1674 SWAP3 SWAP2 SWAP1 PUSH2 0x2BDE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE JUMPDEST SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0x80AC58CD00000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ DUP1 PUSH2 0x1757 JUMPI POP PUSH32 0x5B5E139F00000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ JUMPDEST DUP1 PUSH2 0x1767 JUMPI POP PUSH2 0x1766 DUP3 PUSH2 0x1DDF JUMP JUMPDEST JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x177A DUP5 PUSH2 0x12C9 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x17BC JUMPI PUSH2 0x17BB DUP2 DUP5 DUP7 PUSH2 0x1E49 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x184D JUMPI PUSH2 0x17FE PUSH1 0x0 DUP6 PUSH1 0x0 DUP1 PUSH2 0x1306 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x3 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD SUB SWAP3 POP POP DUP2 SWAP1 SSTORE POP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x18D0 JUMPI PUSH1 0x1 PUSH1 0x3 PUSH1 0x0 DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP JUMPDEST DUP5 PUSH1 0x2 PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP4 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 DUP1 SWAP2 POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x8 DUP1 SLOAD SWAP1 POP PUSH1 0x9 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP PUSH1 0x8 DUP2 SWAP1 DUP1 PUSH1 0x1 DUP2 SLOAD ADD DUP1 DUP3 SSTORE DUP1 SWAP2 POP POP PUSH1 0x1 SWAP1 SUB SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 SWAP1 SWAP2 SWAP1 SWAP2 SWAP1 SWAP2 POP SSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x19DC DUP4 PUSH2 0x80E JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH1 0x7 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP PUSH1 0x0 PUSH1 0x6 PUSH1 0x0 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SWAP1 POP DUP3 DUP3 EQ PUSH2 0x1A88 JUMPI PUSH1 0x0 DUP2 PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP DUP1 DUP3 PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP3 PUSH1 0x7 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP POP JUMPDEST PUSH1 0x7 PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SSTORE DUP1 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SSTORE POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x8 DUP1 SLOAD SWAP1 POP PUSH2 0x1AD0 SWAP2 SWAP1 PUSH2 0x2C02 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH1 0x9 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP PUSH1 0x0 PUSH1 0x8 DUP4 DUP2 SLOAD DUP2 LT PUSH2 0x1B00 JUMPI PUSH2 0x1AFF PUSH2 0x2812 JUMP JUMPDEST JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD SLOAD SWAP1 POP DUP1 PUSH1 0x8 DUP4 DUP2 SLOAD DUP2 LT PUSH2 0x1B22 JUMPI PUSH2 0x1B21 PUSH2 0x2812 JUMP JUMPDEST JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD DUP2 SWAP1 SSTORE POP DUP2 PUSH1 0x9 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP PUSH1 0x9 PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SSTORE PUSH1 0x8 DUP1 SLOAD DUP1 PUSH2 0x1B71 JUMPI PUSH2 0x1B70 PUSH2 0x2C36 JUMP JUMPDEST JUMPDEST PUSH1 0x1 SWAP1 SUB DUP2 DUP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 SWAP1 SSTORE SWAP1 SSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH2 0x1B9A DUP5 PUSH2 0x80E JUMP JUMPDEST PUSH2 0x1BA4 SWAP2 SWAP1 PUSH2 0x2C02 JUMP JUMPDEST SWAP1 POP DUP2 PUSH1 0x6 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP1 PUSH1 0x7 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x1C8A JUMPI PUSH1 0x0 PUSH1 0x40 MLOAD PUSH32 0x64A0AE9200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1C81 SWAP2 SWAP1 PUSH2 0x2346 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x1C98 DUP4 DUP4 PUSH1 0x0 PUSH2 0xC3F JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x1D0C JUMPI PUSH1 0x0 PUSH1 0x40 MLOAD PUSH32 0x73C6AC6E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1D03 SWAP2 SWAP1 PUSH2 0x2346 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH1 0x1 PUSH2 0x1D20 DUP5 PUSH2 0x1F0D JUMP JUMPDEST ADD SWAP1 POP PUSH1 0x0 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1D3F JUMPI PUSH2 0x1D3E PUSH2 0x24ED JUMP JUMPDEST JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x1D71 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x1 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 DUP3 PUSH1 0x20 ADD DUP3 ADD SWAP1 POP JUMPDEST PUSH1 0x1 ISZERO PUSH2 0x1DD4 JUMPI DUP1 DUP1 PUSH1 0x1 SWAP1 SUB SWAP2 POP POP PUSH32 0x3031323334353637383961626364656600000000000000000000000000000000 PUSH1 0xA DUP7 MOD BYTE DUP2 MSTORE8 PUSH1 0xA DUP6 DUP2 PUSH2 0x1DC8 JUMPI PUSH2 0x1DC7 PUSH2 0x2C65 JUMP JUMPDEST JUMPDEST DIV SWAP5 POP PUSH1 0x0 DUP6 SUB PUSH2 0x1D7F JUMPI JUMPDEST DUP2 SWAP4 POP POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0x1FFC9A700000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1E54 DUP4 DUP4 DUP4 PUSH2 0x2060 JUMP JUMPDEST PUSH2 0x1F08 JUMPI PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x1EC9 JUMPI DUP1 PUSH1 0x40 MLOAD PUSH32 0x7E27328900000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1EC0 SWAP2 SWAP1 PUSH2 0x23DC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 DUP2 PUSH1 0x40 MLOAD PUSH32 0x177E802F00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1EFF SWAP3 SWAP2 SWAP1 PUSH2 0x2772 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 POP PUSH27 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F010000000000000000 DUP4 LT PUSH2 0x1F6B JUMPI PUSH27 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F010000000000000000 DUP4 DUP2 PUSH2 0x1F61 JUMPI PUSH2 0x1F60 PUSH2 0x2C65 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x40 DUP2 ADD SWAP1 POP JUMPDEST PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 LT PUSH2 0x1FA8 JUMPI PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 DUP2 PUSH2 0x1F9E JUMPI PUSH2 0x1F9D PUSH2 0x2C65 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x20 DUP2 ADD SWAP1 POP JUMPDEST PUSH7 0x2386F26FC10000 DUP4 LT PUSH2 0x1FD7 JUMPI PUSH7 0x2386F26FC10000 DUP4 DUP2 PUSH2 0x1FCD JUMPI PUSH2 0x1FCC PUSH2 0x2C65 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x10 DUP2 ADD SWAP1 POP JUMPDEST PUSH4 0x5F5E100 DUP4 LT PUSH2 0x2000 JUMPI PUSH4 0x5F5E100 DUP4 DUP2 PUSH2 0x1FF6 JUMPI PUSH2 0x1FF5 PUSH2 0x2C65 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x8 DUP2 ADD SWAP1 POP JUMPDEST PUSH2 0x2710 DUP4 LT PUSH2 0x2025 JUMPI PUSH2 0x2710 DUP4 DUP2 PUSH2 0x201B JUMPI PUSH2 0x201A PUSH2 0x2C65 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x4 DUP2 ADD SWAP1 POP JUMPDEST PUSH1 0x64 DUP4 LT PUSH2 0x2048 JUMPI PUSH1 0x64 DUP4 DUP2 PUSH2 0x203E JUMPI PUSH2 0x203D PUSH2 0x2C65 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x2 DUP2 ADD SWAP1 POP JUMPDEST PUSH1 0xA DUP4 LT PUSH2 0x2057 JUMPI PUSH1 0x1 DUP2 ADD SWAP1 POP JUMPDEST DUP1 SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO DUP1 ISZERO PUSH2 0x2118 JUMPI POP DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 PUSH2 0x20D9 JUMPI POP PUSH2 0x20D8 DUP5 DUP5 PUSH2 0x9E5 JUMP JUMPDEST JUMPDEST DUP1 PUSH2 0x2117 JUMPI POP DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x20FF DUP4 PUSH2 0xBE8 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST JUMPDEST SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x216A DUP2 PUSH2 0x2135 JUMP JUMPDEST DUP2 EQ PUSH2 0x2175 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x2187 DUP2 PUSH2 0x2161 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x21A3 JUMPI PUSH2 0x21A2 PUSH2 0x212B JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x21B1 DUP5 DUP3 DUP6 ADD PUSH2 0x2178 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x21CF DUP2 PUSH2 0x21BA JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x21EA PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x21C6 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x222A JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x220F JUMP JUMPDEST PUSH1 0x0 DUP5 DUP5 ADD MSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2252 DUP3 PUSH2 0x21F0 JUMP JUMPDEST PUSH2 0x225C DUP2 DUP6 PUSH2 0x21FB JUMP JUMPDEST SWAP4 POP PUSH2 0x226C DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x220C JUMP JUMPDEST PUSH2 0x2275 DUP2 PUSH2 0x2236 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x229A DUP2 DUP5 PUSH2 0x2247 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x22B5 DUP2 PUSH2 0x22A2 JUMP JUMPDEST DUP2 EQ PUSH2 0x22C0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x22D2 DUP2 PUSH2 0x22AC JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x22EE JUMPI PUSH2 0x22ED PUSH2 0x212B JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x22FC DUP5 DUP3 DUP6 ADD PUSH2 0x22C3 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2330 DUP3 PUSH2 0x2305 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2340 DUP2 PUSH2 0x2325 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x235B PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x2337 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x236A DUP2 PUSH2 0x2325 JUMP JUMPDEST DUP2 EQ PUSH2 0x2375 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x2387 DUP2 PUSH2 0x2361 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x23A4 JUMPI PUSH2 0x23A3 PUSH2 0x212B JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x23B2 DUP6 DUP3 DUP7 ADD PUSH2 0x2378 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x23C3 DUP6 DUP3 DUP7 ADD PUSH2 0x22C3 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH2 0x23D6 DUP2 PUSH2 0x22A2 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x23F1 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x23CD JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x2410 JUMPI PUSH2 0x240F PUSH2 0x212B JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x241E DUP7 DUP3 DUP8 ADD PUSH2 0x2378 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0x242F DUP7 DUP3 DUP8 ADD PUSH2 0x2378 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0x2440 DUP7 DUP3 DUP8 ADD PUSH2 0x22C3 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2460 JUMPI PUSH2 0x245F PUSH2 0x212B JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x246E DUP5 DUP3 DUP6 ADD PUSH2 0x2378 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x2480 DUP2 PUSH2 0x21BA JUMP JUMPDEST DUP2 EQ PUSH2 0x248B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x249D DUP2 PUSH2 0x2477 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x24BA JUMPI PUSH2 0x24B9 PUSH2 0x212B JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x24C8 DUP6 DUP3 DUP7 ADD PUSH2 0x2378 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x24D9 DUP6 DUP3 DUP7 ADD PUSH2 0x248E JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH2 0x2525 DUP3 PUSH2 0x2236 JUMP JUMPDEST DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0x2544 JUMPI PUSH2 0x2543 PUSH2 0x24ED JUMP JUMPDEST JUMPDEST DUP1 PUSH1 0x40 MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2557 PUSH2 0x2121 JUMP JUMPDEST SWAP1 POP PUSH2 0x2563 DUP3 DUP3 PUSH2 0x251C JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x2583 JUMPI PUSH2 0x2582 PUSH2 0x24ED JUMP JUMPDEST JUMPDEST PUSH2 0x258C DUP3 PUSH2 0x2236 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP3 DUP2 DUP4 CALLDATACOPY PUSH1 0x0 DUP4 DUP4 ADD MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x25BB PUSH2 0x25B6 DUP5 PUSH2 0x2568 JUMP JUMPDEST PUSH2 0x254D JUMP JUMPDEST SWAP1 POP DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 DUP5 DUP5 ADD GT ISZERO PUSH2 0x25D7 JUMPI PUSH2 0x25D6 PUSH2 0x24E8 JUMP JUMPDEST JUMPDEST PUSH2 0x25E2 DUP5 DUP3 DUP6 PUSH2 0x2599 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x25FF JUMPI PUSH2 0x25FE PUSH2 0x24E3 JUMP JUMPDEST JUMPDEST DUP2 CALLDATALOAD PUSH2 0x260F DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH2 0x25A8 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x2632 JUMPI PUSH2 0x2631 PUSH2 0x212B JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2640 DUP8 DUP3 DUP9 ADD PUSH2 0x2378 JUMP JUMPDEST SWAP5 POP POP PUSH1 0x20 PUSH2 0x2651 DUP8 DUP3 DUP9 ADD PUSH2 0x2378 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x40 PUSH2 0x2662 DUP8 DUP3 DUP9 ADD PUSH2 0x22C3 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2683 JUMPI PUSH2 0x2682 PUSH2 0x2130 JUMP JUMPDEST JUMPDEST PUSH2 0x268F DUP8 DUP3 DUP9 ADD PUSH2 0x25EA JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x26B2 JUMPI PUSH2 0x26B1 PUSH2 0x212B JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x26C0 DUP6 DUP3 DUP7 ADD PUSH2 0x2378 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x26D1 DUP6 DUP3 DUP7 ADD PUSH2 0x2378 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH2 0x2722 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x2735 JUMPI PUSH2 0x2734 PUSH2 0x26DB JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0x2750 PUSH1 0x0 DUP4 ADD DUP7 PUSH2 0x2337 JUMP JUMPDEST PUSH2 0x275D PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0x23CD JUMP JUMPDEST PUSH2 0x276A PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x2337 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x2787 PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0x2337 JUMP JUMPDEST PUSH2 0x2794 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x23CD JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x27D5 DUP3 PUSH2 0x22A2 JUMP JUMPDEST SWAP2 POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 SUB PUSH2 0x2807 JUMPI PUSH2 0x2806 PUSH2 0x279B JUMP JUMPDEST JUMPDEST PUSH1 0x1 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP DUP2 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 PUSH1 0x1F DUP4 ADD DIV SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 SHL SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x8 DUP4 MUL PUSH2 0x28A3 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 PUSH2 0x2866 JUMP JUMPDEST PUSH2 0x28AD DUP7 DUP4 PUSH2 0x2866 JUMP JUMPDEST SWAP6 POP DUP1 NOT DUP5 AND SWAP4 POP DUP1 DUP7 AND DUP5 OR SWAP3 POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x28EA PUSH2 0x28E5 PUSH2 0x28E0 DUP5 PUSH2 0x22A2 JUMP JUMPDEST PUSH2 0x28C5 JUMP JUMPDEST PUSH2 0x22A2 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2904 DUP4 PUSH2 0x28CF JUMP JUMPDEST PUSH2 0x2918 PUSH2 0x2910 DUP3 PUSH2 0x28F1 JUMP JUMPDEST DUP5 DUP5 SLOAD PUSH2 0x2873 JUMP JUMPDEST DUP3 SSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH2 0x292D PUSH2 0x2920 JUMP JUMPDEST PUSH2 0x2938 DUP2 DUP5 DUP5 PUSH2 0x28FB JUMP JUMPDEST POP POP POP JUMP JUMPDEST JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x295C JUMPI PUSH2 0x2951 PUSH1 0x0 DUP3 PUSH2 0x2925 JUMP JUMPDEST PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH2 0x293E JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x1F DUP3 GT ISZERO PUSH2 0x29A1 JUMPI PUSH2 0x2972 DUP2 PUSH2 0x2841 JUMP JUMPDEST PUSH2 0x297B DUP5 PUSH2 0x2856 JUMP JUMPDEST DUP2 ADD PUSH1 0x20 DUP6 LT ISZERO PUSH2 0x298A JUMPI DUP2 SWAP1 POP JUMPDEST PUSH2 0x299E PUSH2 0x2996 DUP6 PUSH2 0x2856 JUMP JUMPDEST DUP4 ADD DUP3 PUSH2 0x293D JUMP JUMPDEST POP POP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 SHR SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x29C4 PUSH1 0x0 NOT DUP5 PUSH1 0x8 MUL PUSH2 0x29A6 JUMP JUMPDEST NOT DUP1 DUP4 AND SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x29DD DUP4 DUP4 PUSH2 0x29B3 JUMP JUMPDEST SWAP2 POP DUP3 PUSH1 0x2 MUL DUP3 OR SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x29F6 DUP3 PUSH2 0x21F0 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2A0F JUMPI PUSH2 0x2A0E PUSH2 0x24ED JUMP JUMPDEST JUMPDEST PUSH2 0x2A19 DUP3 SLOAD PUSH2 0x270A JUMP JUMPDEST PUSH2 0x2A24 DUP3 DUP3 DUP6 PUSH2 0x2960 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 SWAP1 POP PUSH1 0x1F DUP4 GT PUSH1 0x1 DUP2 EQ PUSH2 0x2A57 JUMPI PUSH1 0x0 DUP5 ISZERO PUSH2 0x2A45 JUMPI DUP3 DUP8 ADD MLOAD SWAP1 POP JUMPDEST PUSH2 0x2A4F DUP6 DUP3 PUSH2 0x29D1 JUMP JUMPDEST DUP7 SSTORE POP PUSH2 0x2AB7 JUMP JUMPDEST PUSH1 0x1F NOT DUP5 AND PUSH2 0x2A65 DUP7 PUSH2 0x2841 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x2A8D JUMPI DUP5 DUP10 ADD MLOAD DUP3 SSTORE PUSH1 0x1 DUP3 ADD SWAP2 POP PUSH1 0x20 DUP6 ADD SWAP5 POP PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x2A68 JUMP JUMPDEST DUP7 DUP4 LT ISZERO PUSH2 0x2AAA JUMPI DUP5 DUP10 ADD MLOAD PUSH2 0x2AA6 PUSH1 0x1F DUP10 AND DUP3 PUSH2 0x29B3 JUMP JUMPDEST DUP4 SSTORE POP JUMPDEST PUSH1 0x1 PUSH1 0x2 DUP9 MUL ADD DUP9 SSTORE POP POP POP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2AE6 DUP3 PUSH2 0x2ABF JUMP JUMPDEST PUSH2 0x2AF0 DUP2 DUP6 PUSH2 0x2ACA JUMP JUMPDEST SWAP4 POP PUSH2 0x2B00 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x220C JUMP JUMPDEST PUSH2 0x2B09 DUP2 PUSH2 0x2236 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 ADD SWAP1 POP PUSH2 0x2B29 PUSH1 0x0 DUP4 ADD DUP8 PUSH2 0x2337 JUMP JUMPDEST PUSH2 0x2B36 PUSH1 0x20 DUP4 ADD DUP7 PUSH2 0x2337 JUMP JUMPDEST PUSH2 0x2B43 PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x23CD JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x60 DUP4 ADD MSTORE PUSH2 0x2B55 DUP2 DUP5 PUSH2 0x2ADB JUMP JUMPDEST SWAP1 POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x2B6F DUP2 PUSH2 0x2161 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2B8B JUMPI PUSH2 0x2B8A PUSH2 0x212B JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2B99 DUP5 DUP3 DUP6 ADD PUSH2 0x2B60 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2BB8 DUP3 PUSH2 0x21F0 JUMP JUMPDEST PUSH2 0x2BC2 DUP2 DUP6 PUSH2 0x2BA2 JUMP JUMPDEST SWAP4 POP PUSH2 0x2BD2 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x220C JUMP JUMPDEST DUP1 DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2BEA DUP3 DUP6 PUSH2 0x2BAD JUMP JUMPDEST SWAP2 POP PUSH2 0x2BF6 DUP3 DUP5 PUSH2 0x2BAD JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2C0D DUP3 PUSH2 0x22A2 JUMP JUMPDEST SWAP2 POP PUSH2 0x2C18 DUP4 PUSH2 0x22A2 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 SUB SWAP1 POP DUP2 DUP2 GT ISZERO PUSH2 0x2C30 JUMPI PUSH2 0x2C2F PUSH2 0x279B JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x31 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT INVALID PUSH10 0x7066733A2F2F516D6246 0x4B BALANCE MSIZE ORIGIN PUSH10 0x63324832555876797847 PUSH14 0x51697962417179416B5050656743 PUSH3 0x4C6F64 BLOBBASEFEE SELFBALANCE JUMPI CALLER PUSH3 0x714D66 LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xB8 CALLDATALOAD PUSH10 0x333861773D1457AD4710 PUSH16 0xD59DB66AC713987444B5A148145CD98D CREATE2 0xE8 PUSH5 0x736F6C6343 STOP ADDMOD SHR STOP CALLER ",
          "sourceMap": "123:356:66:-:0;;;165:104;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;243:9;254:11;1065:10:63;1024:9;1035:11;1454:5:45;1446;:13;;;;;;:::i;:::-;;1479:7;1469;:17;;;;;;:::i;:::-;;1380:113;;1297:1:40;1273:26;;:12;:26;;;1269:95;;1350:1;1322:31;;;;;;;;;;;:::i;:::-;;;;;;;;1269:95;1373:32;1392:12;1373:18;;;:32;;:::i;:::-;1225:187;944:140:63;;165:104:66;;123:356;;2912:187:40;2985:16;3004:6;;;;;;;;;;;2985:25;;3029:8;3020:6;;:17;;;;;;;;;;;;;;;;;;3083:8;3052:40;;3073:8;3052:40;;;;;;;;;;;;2975:124;2912:187;:::o;7:75:67:-;40:6;73:2;67:9;57:19;;7:75;:::o;88:117::-;197:1;194;187:12;211:117;320:1;317;310:12;334:117;443:1;440;433:12;457:117;566:1;563;556:12;580:102;621:6;672:2;668:7;663:2;656:5;652:14;648:28;638:38;;580:102;;;:::o;688:180::-;736:77;733:1;726:88;833:4;830:1;823:15;857:4;854:1;847:15;874:281;957:27;979:4;957:27;:::i;:::-;949:6;945:40;1087:6;1075:10;1072:22;1051:18;1039:10;1036:34;1033:62;1030:88;;;1098:18;;:::i;:::-;1030:88;1138:10;1134:2;1127:22;917:238;874:281;;:::o;1161:129::-;1195:6;1222:20;;:::i;:::-;1212:30;;1251:33;1279:4;1271:6;1251:33;:::i;:::-;1161:129;;;:::o;1296:308::-;1358:4;1448:18;1440:6;1437:30;1434:56;;;1470:18;;:::i;:::-;1434:56;1508:29;1530:6;1508:29;:::i;:::-;1500:37;;1592:4;1586;1582:15;1574:23;;1296:308;;;:::o;1610:248::-;1692:1;1702:113;1716:6;1713:1;1710:13;1702:113;;;1801:1;1796:3;1792:11;1786:18;1782:1;1777:3;1773:11;1766:39;1738:2;1735:1;1731:10;1726:15;;1702:113;;;1849:1;1840:6;1835:3;1831:16;1824:27;1672:186;1610:248;;;:::o;1864:434::-;1953:5;1978:66;1994:49;2036:6;1994:49;:::i;:::-;1978:66;:::i;:::-;1969:75;;2067:6;2060:5;2053:21;2105:4;2098:5;2094:16;2143:3;2134:6;2129:3;2125:16;2122:25;2119:112;;;2150:79;;:::i;:::-;2119:112;2240:52;2285:6;2280:3;2275;2240:52;:::i;:::-;1959:339;1864:434;;;;;:::o;2318:355::-;2385:5;2434:3;2427:4;2419:6;2415:17;2411:27;2401:122;;2442:79;;:::i;:::-;2401:122;2552:6;2546:13;2577:90;2663:3;2655:6;2648:4;2640:6;2636:17;2577:90;:::i;:::-;2568:99;;2391:282;2318:355;;;;:::o;2679:853::-;2778:6;2786;2835:2;2823:9;2814:7;2810:23;2806:32;2803:119;;;2841:79;;:::i;:::-;2803:119;2982:1;2971:9;2967:17;2961:24;3012:18;3004:6;3001:30;2998:117;;;3034:79;;:::i;:::-;2998:117;3139:74;3205:7;3196:6;3185:9;3181:22;3139:74;:::i;:::-;3129:84;;2932:291;3283:2;3272:9;3268:18;3262:25;3314:18;3306:6;3303:30;3300:117;;;3336:79;;:::i;:::-;3300:117;3441:74;3507:7;3498:6;3487:9;3483:22;3441:74;:::i;:::-;3431:84;;3233:292;2679:853;;;;;:::o;3538:99::-;3590:6;3624:5;3618:12;3608:22;;3538:99;;;:::o;3643:180::-;3691:77;3688:1;3681:88;3788:4;3785:1;3778:15;3812:4;3809:1;3802:15;3829:320;3873:6;3910:1;3904:4;3900:12;3890:22;;3957:1;3951:4;3947:12;3978:18;3968:81;;4034:4;4026:6;4022:17;4012:27;;3968:81;4096:2;4088:6;4085:14;4065:18;4062:38;4059:84;;4115:18;;:::i;:::-;4059:84;3880:269;3829:320;;;:::o;4155:141::-;4204:4;4227:3;4219:11;;4250:3;4247:1;4240:14;4284:4;4281:1;4271:18;4263:26;;4155:141;;;:::o;4302:93::-;4339:6;4386:2;4381;4374:5;4370:14;4366:23;4356:33;;4302:93;;;:::o;4401:107::-;4445:8;4495:5;4489:4;4485:16;4464:37;;4401:107;;;;:::o;4514:393::-;4583:6;4633:1;4621:10;4617:18;4656:97;4686:66;4675:9;4656:97;:::i;:::-;4774:39;4804:8;4793:9;4774:39;:::i;:::-;4762:51;;4846:4;4842:9;4835:5;4831:21;4822:30;;4895:4;4885:8;4881:19;4874:5;4871:30;4861:40;;4590:317;;4514:393;;;;;:::o;4913:77::-;4950:7;4979:5;4968:16;;4913:77;;;:::o;4996:60::-;5024:3;5045:5;5038:12;;4996:60;;;:::o;5062:142::-;5112:9;5145:53;5163:34;5172:24;5190:5;5172:24;:::i;:::-;5163:34;:::i;:::-;5145:53;:::i;:::-;5132:66;;5062:142;;;:::o;5210:75::-;5253:3;5274:5;5267:12;;5210:75;;;:::o;5291:269::-;5401:39;5432:7;5401:39;:::i;:::-;5462:91;5511:41;5535:16;5511:41;:::i;:::-;5503:6;5496:4;5490:11;5462:91;:::i;:::-;5456:4;5449:105;5367:193;5291:269;;;:::o;5566:73::-;5611:3;5566:73;:::o;5645:189::-;5722:32;;:::i;:::-;5763:65;5821:6;5813;5807:4;5763:65;:::i;:::-;5698:136;5645:189;;:::o;5840:186::-;5900:120;5917:3;5910:5;5907:14;5900:120;;;5971:39;6008:1;6001:5;5971:39;:::i;:::-;5944:1;5937:5;5933:13;5924:22;;5900:120;;;5840:186;;:::o;6032:543::-;6133:2;6128:3;6125:11;6122:446;;;6167:38;6199:5;6167:38;:::i;:::-;6251:29;6269:10;6251:29;:::i;:::-;6241:8;6237:44;6434:2;6422:10;6419:18;6416:49;;;6455:8;6440:23;;6416:49;6478:80;6534:22;6552:3;6534:22;:::i;:::-;6524:8;6520:37;6507:11;6478:80;:::i;:::-;6137:431;;6122:446;6032:543;;;:::o;6581:117::-;6635:8;6685:5;6679:4;6675:16;6654:37;;6581:117;;;;:::o;6704:169::-;6748:6;6781:51;6829:1;6825:6;6817:5;6814:1;6810:13;6781:51;:::i;:::-;6777:56;6862:4;6856;6852:15;6842:25;;6755:118;6704:169;;;;:::o;6878:295::-;6954:4;7100:29;7125:3;7119:4;7100:29;:::i;:::-;7092:37;;7162:3;7159:1;7155:11;7149:4;7146:21;7138:29;;6878:295;;;;:::o;7178:1395::-;7295:37;7328:3;7295:37;:::i;:::-;7397:18;7389:6;7386:30;7383:56;;;7419:18;;:::i;:::-;7383:56;7463:38;7495:4;7489:11;7463:38;:::i;:::-;7548:67;7608:6;7600;7594:4;7548:67;:::i;:::-;7642:1;7666:4;7653:17;;7698:2;7690:6;7687:14;7715:1;7710:618;;;;8372:1;8389:6;8386:77;;;8438:9;8433:3;8429:19;8423:26;8414:35;;8386:77;8489:67;8549:6;8542:5;8489:67;:::i;:::-;8483:4;8476:81;8345:222;7680:887;;7710:618;7762:4;7758:9;7750:6;7746:22;7796:37;7828:4;7796:37;:::i;:::-;7855:1;7869:208;7883:7;7880:1;7877:14;7869:208;;;7962:9;7957:3;7953:19;7947:26;7939:6;7932:42;8013:1;8005:6;8001:14;7991:24;;8060:2;8049:9;8045:18;8032:31;;7906:4;7903:1;7899:12;7894:17;;7869:208;;;8105:6;8096:7;8093:19;8090:179;;;8163:9;8158:3;8154:19;8148:26;8206:48;8248:4;8240:6;8236:17;8225:9;8206:48;:::i;:::-;8198:6;8191:64;8113:156;8090:179;8315:1;8311;8303:6;8299:14;8295:22;8289:4;8282:36;7717:611;;;7680:887;;7270:1303;;;7178:1395;;:::o;8579:126::-;8616:7;8656:42;8649:5;8645:54;8634:65;;8579:126;;;:::o;8711:96::-;8748:7;8777:24;8795:5;8777:24;:::i;:::-;8766:35;;8711:96;;;:::o;8813:118::-;8900:24;8918:5;8900:24;:::i;:::-;8895:3;8888:37;8813:118;;:::o;8937:222::-;9030:4;9068:2;9057:9;9053:18;9045:26;;9081:71;9149:1;9138:9;9134:17;9125:6;9081:71;:::i;:::-;8937:222;;;;:::o;123:356:66:-;;;;;;;"
        },
        "deployedBytecode": {
          "functionDebugData": {
            "@_addTokenToAllTokensEnumeration_7605": {
              "entryPoint": 6536,
              "id": 7605,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "@_addTokenToOwnerEnumeration_7585": {
              "entryPoint": 7053,
              "id": 7585,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "@_approve_7058": {
              "entryPoint": 3117,
              "id": 7058,
              "parameterSlots": 3,
              "returnSlots": 0
            },
            "@_approve_7124": {
              "entryPoint": 4870,
              "id": 7124,
              "parameterSlots": 4,
              "returnSlots": 0
            },
            "@_baseURI_6439": {
              "entryPoint": 5644,
              "id": 6439,
              "parameterSlots": 0,
              "returnSlots": 1
            },
            "@_checkAuthorized_6698": {
              "entryPoint": 7753,
              "id": 6698,
              "parameterSlots": 3,
              "returnSlots": 0
            },
            "@_checkOwner_6002": {
              "entryPoint": 3187,
              "id": 6002,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@_getApproved_6625": {
              "entryPoint": 3048,
              "id": 6625,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@_isAuthorized_6661": {
              "entryPoint": 8288,
              "id": 6661,
              "parameterSlots": 3,
              "returnSlots": 1
            },
            "@_mint_6854": {
              "entryPoint": 7192,
              "id": 6854,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "@_msgSender_8016": {
              "entryPoint": 3109,
              "id": 8016,
              "parameterSlots": 0,
              "returnSlots": 1
            },
            "@_ownerOf_6612": {
              "entryPoint": 4809,
              "id": 6612,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@_removeTokenFromAllTokensEnumeration_7715": {
              "entryPoint": 6844,
              "id": 7715,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "@_removeTokenFromOwnerEnumeration_7667": {
              "entryPoint": 6609,
              "id": 7667,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "@_requireOwned_7190": {
              "entryPoint": 2912,
              "id": 7190,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@_safeMint_6869": {
              "entryPoint": 3157,
              "id": 6869,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "@_safeMint_6899": {
              "entryPoint": 5608,
              "id": 6899,
              "parameterSlots": 3,
              "returnSlots": 0
            },
            "@_setApprovalForAll_7161": {
              "entryPoint": 3612,
              "id": 7161,
              "parameterSlots": 3,
              "returnSlots": 0
            },
            "@_setTokenURI_7866": {
              "entryPoint": 3322,
              "id": 7866,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "@_transferOwnership_6064": {
              "entryPoint": 3414,
              "id": 6064,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "@_update_12933": {
              "entryPoint": 3135,
              "id": 12933,
              "parameterSlots": 3,
              "returnSlots": 1
            },
            "@_update_6804": {
              "entryPoint": 5998,
              "id": 6804,
              "parameterSlots": 3,
              "returnSlots": 1
            },
            "@_update_7554": {
              "entryPoint": 5323,
              "id": 7554,
              "parameterSlots": 3,
              "returnSlots": 1
            },
            "@approve_6455": {
              "entryPoint": 1305,
              "id": 6455,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "@balanceOf_6363": {
              "entryPoint": 2062,
              "id": 6363,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@burn_7354": {
              "entryPoint": 1903,
              "id": 7354,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "@checkOnERC721Received_8003": {
              "entryPoint": 3979,
              "id": 8003,
              "parameterSlots": 5,
              "returnSlots": 0
            },
            "@getApproved_6472": {
              "entryPoint": 1277,
              "id": 6472,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@isApprovedForAll_6505": {
              "entryPoint": 2533,
              "id": 6505,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "@log10_10700": {
              "entryPoint": 7949,
              "id": 10700,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@mintWithSpecificTokenId_13910": {
              "entryPoint": 1767,
              "id": 13910,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "@name_6385": {
              "entryPoint": 1131,
              "id": 6385,
              "parameterSlots": 0,
              "returnSlots": 1
            },
            "@ownerOf_6376": {
              "entryPoint": 2044,
              "id": 6376,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@owner_5985": {
              "entryPoint": 2268,
              "id": 5985,
              "parameterSlots": 0,
              "returnSlots": 1
            },
            "@renounceOwnership_6016": {
              "entryPoint": 2248,
              "id": 6016,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "@safeMint_12911": {
              "entryPoint": 1781,
              "id": 12911,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@safeTransferFrom_6569": {
              "entryPoint": 1871,
              "id": 6569,
              "parameterSlots": 3,
              "returnSlots": 0
            },
            "@safeTransferFrom_6599": {
              "entryPoint": 2478,
              "id": 6599,
              "parameterSlots": 4,
              "returnSlots": 0
            },
            "@setApprovalForAll_6488": {
              "entryPoint": 2456,
              "id": 6488,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "@supportsInterface_12984": {
              "entryPoint": 1113,
              "id": 12984,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@supportsInterface_6335": {
              "entryPoint": 5772,
              "id": 6335,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@supportsInterface_7419": {
              "entryPoint": 4687,
              "id": 7419,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@supportsInterface_7790": {
              "entryPoint": 2815,
              "id": 7790,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@supportsInterface_9309": {
              "entryPoint": 7647,
              "id": 9309,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@symbol_6394": {
              "entryPoint": 2310,
              "id": 6394,
              "parameterSlots": 0,
              "returnSlots": 1
            },
            "@toString_8164": {
              "entryPoint": 7441,
              "id": 8164,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@tokenByIndex_7485": {
              "entryPoint": 1926,
              "id": 7485,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@tokenOfOwnerByIndex_7448": {
              "entryPoint": 1598,
              "id": 7448,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "@tokenURI_12967": {
              "entryPoint": 2515,
              "id": 12967,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@tokenURI_6430": {
              "entryPoint": 5667,
              "id": 6430,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@tokenURI_7847": {
              "entryPoint": 4412,
              "id": 7847,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "@totalSupply_7458": {
              "entryPoint": 1327,
              "id": 7458,
              "parameterSlots": 0,
              "returnSlots": 1
            },
            "@transferFrom_6551": {
              "entryPoint": 1340,
              "id": 6551,
              "parameterSlots": 3,
              "returnSlots": 0
            },
            "@transferOwnership_6044": {
              "entryPoint": 2681,
              "id": 6044,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "abi_decode_available_length_t_bytes_memory_ptr": {
              "entryPoint": 9640,
              "id": null,
              "parameterSlots": 3,
              "returnSlots": 1
            },
            "abi_decode_t_address": {
              "entryPoint": 9080,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_t_bool": {
              "entryPoint": 9358,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_t_bytes4": {
              "entryPoint": 8568,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_t_bytes4_fromMemory": {
              "entryPoint": 11104,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_t_bytes_memory_ptr": {
              "entryPoint": 9706,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_t_uint256": {
              "entryPoint": 8899,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_tuple_t_address": {
              "entryPoint": 9290,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_tuple_t_addresst_address": {
              "entryPoint": 9883,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 2
            },
            "abi_decode_tuple_t_addresst_addresst_uint256": {
              "entryPoint": 9207,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 3
            },
            "abi_decode_tuple_t_addresst_addresst_uint256t_bytes_memory_ptr": {
              "entryPoint": 9752,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 4
            },
            "abi_decode_tuple_t_addresst_bool": {
              "entryPoint": 9379,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 2
            },
            "abi_decode_tuple_t_addresst_uint256": {
              "entryPoint": 9101,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 2
            },
            "abi_decode_tuple_t_bytes4": {
              "entryPoint": 8589,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_tuple_t_bytes4_fromMemory": {
              "entryPoint": 11125,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_decode_tuple_t_uint256": {
              "entryPoint": 8920,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_t_address_to_t_address_fromStack": {
              "entryPoint": 9015,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "abi_encode_t_bool_to_t_bool_fromStack": {
              "entryPoint": 8646,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack": {
              "entryPoint": 10971,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack": {
              "entryPoint": 8775,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack": {
              "entryPoint": 11181,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_t_uint256_to_t_uint256_fromStack": {
              "entryPoint": 9165,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "abi_encode_tuple_packed_t_string_memory_ptr_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed": {
              "entryPoint": 11230,
              "id": null,
              "parameterSlots": 3,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_address__to_t_address__fromStack_reversed": {
              "entryPoint": 9030,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed": {
              "entryPoint": 11028,
              "id": null,
              "parameterSlots": 5,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed": {
              "entryPoint": 10098,
              "id": null,
              "parameterSlots": 3,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_address_t_uint256_t_address__to_t_address_t_uint256_t_address__fromStack_reversed": {
              "entryPoint": 10043,
              "id": null,
              "parameterSlots": 4,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed": {
              "entryPoint": 8661,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed": {
              "entryPoint": 8832,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed": {
              "entryPoint": 9180,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "allocate_memory": {
              "entryPoint": 9549,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "allocate_unbounded": {
              "entryPoint": 8481,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 1
            },
            "array_allocation_size_t_bytes_memory_ptr": {
              "entryPoint": 9576,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "array_dataslot_t_string_storage": {
              "entryPoint": 10305,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "array_length_t_bytes_memory_ptr": {
              "entryPoint": 10943,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "array_length_t_string_memory_ptr": {
              "entryPoint": 8688,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack": {
              "entryPoint": 10954,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "array_storeLengthForEncoding_t_string_memory_ptr_fromStack": {
              "entryPoint": 8699,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack": {
              "entryPoint": 11170,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "checked_sub_t_uint256": {
              "entryPoint": 11266,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "clean_up_bytearray_end_slots_t_string_storage": {
              "entryPoint": 10592,
              "id": null,
              "parameterSlots": 3,
              "returnSlots": 0
            },
            "cleanup_t_address": {
              "entryPoint": 8997,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "cleanup_t_bool": {
              "entryPoint": 8634,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "cleanup_t_bytes4": {
              "entryPoint": 8501,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "cleanup_t_uint160": {
              "entryPoint": 8965,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "cleanup_t_uint256": {
              "entryPoint": 8866,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "clear_storage_range_t_bytes1": {
              "entryPoint": 10557,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "convert_t_uint256_to_t_uint256": {
              "entryPoint": 10447,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage": {
              "entryPoint": 10733,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "copy_calldata_to_memory_with_cleanup": {
              "entryPoint": 9625,
              "id": null,
              "parameterSlots": 3,
              "returnSlots": 0
            },
            "copy_memory_to_memory_with_cleanup": {
              "entryPoint": 8716,
              "id": null,
              "parameterSlots": 3,
              "returnSlots": 0
            },
            "divide_by_32_ceil": {
              "entryPoint": 10326,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "extract_byte_array_length": {
              "entryPoint": 9994,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "extract_used_part_and_set_length_of_short_byte_array": {
              "entryPoint": 10705,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "finalize_allocation": {
              "entryPoint": 9500,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "identity": {
              "entryPoint": 10437,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "increment_t_uint256": {
              "entryPoint": 10186,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "mask_bytes_dynamic": {
              "entryPoint": 10675,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "panic_error_0x11": {
              "entryPoint": 10139,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "panic_error_0x12": {
              "entryPoint": 11365,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "panic_error_0x22": {
              "entryPoint": 9947,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "panic_error_0x31": {
              "entryPoint": 11318,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "panic_error_0x32": {
              "entryPoint": 10258,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "panic_error_0x41": {
              "entryPoint": 9453,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "prepare_store_t_uint256": {
              "entryPoint": 10481,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d": {
              "entryPoint": 9443,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae": {
              "entryPoint": 9448,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db": {
              "entryPoint": 8496,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b": {
              "entryPoint": 8491,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 0
            },
            "round_up_to_mul_of_32": {
              "entryPoint": 8758,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 1
            },
            "shift_left_dynamic": {
              "entryPoint": 10342,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "shift_right_unsigned_dynamic": {
              "entryPoint": 10662,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 1
            },
            "storage_set_to_zero_t_uint256": {
              "entryPoint": 10533,
              "id": null,
              "parameterSlots": 2,
              "returnSlots": 0
            },
            "update_byte_slice_dynamic32": {
              "entryPoint": 10355,
              "id": null,
              "parameterSlots": 3,
              "returnSlots": 1
            },
            "update_storage_value_t_uint256_to_t_uint256": {
              "entryPoint": 10491,
              "id": null,
              "parameterSlots": 3,
              "returnSlots": 0
            },
            "validator_revert_t_address": {
              "entryPoint": 9057,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "validator_revert_t_bool": {
              "entryPoint": 9335,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "validator_revert_t_bytes4": {
              "entryPoint": 8545,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "validator_revert_t_uint256": {
              "entryPoint": 8876,
              "id": null,
              "parameterSlots": 1,
              "returnSlots": 0
            },
            "zero_value_for_split_t_uint256": {
              "entryPoint": 10528,
              "id": null,
              "parameterSlots": 0,
              "returnSlots": 1
            }
          },
          "generatedSources": [
            {
              "ast": {
                "nativeSrc": "0:20090:67",
                "nodeType": "YulBlock",
                "src": "0:20090:67",
                "statements": [
                  {
                    "body": {
                      "nativeSrc": "47:35:67",
                      "nodeType": "YulBlock",
                      "src": "47:35:67",
                      "statements": [
                        {
                          "nativeSrc": "57:19:67",
                          "nodeType": "YulAssignment",
                          "src": "57:19:67",
                          "value": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nativeSrc": "73:2:67",
                                "nodeType": "YulLiteral",
                                "src": "73:2:67",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nativeSrc": "67:5:67",
                              "nodeType": "YulIdentifier",
                              "src": "67:5:67"
                            },
                            "nativeSrc": "67:9:67",
                            "nodeType": "YulFunctionCall",
                            "src": "67:9:67"
                          },
                          "variableNames": [
                            {
                              "name": "memPtr",
                              "nativeSrc": "57:6:67",
                              "nodeType": "YulIdentifier",
                              "src": "57:6:67"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "allocate_unbounded",
                    "nativeSrc": "7:75:67",
                    "nodeType": "YulFunctionDefinition",
                    "returnVariables": [
                      {
                        "name": "memPtr",
                        "nativeSrc": "40:6:67",
                        "nodeType": "YulTypedName",
                        "src": "40:6:67",
                        "type": ""
                      }
                    ],
                    "src": "7:75:67"
                  },
                  {
                    "body": {
                      "nativeSrc": "177:28:67",
                      "nodeType": "YulBlock",
                      "src": "177:28:67",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nativeSrc": "194:1:67",
                                "nodeType": "YulLiteral",
                                "src": "194:1:67",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "197:1:67",
                                "nodeType": "YulLiteral",
                                "src": "197:1:67",
                                "type": "",
                                "value": "0"
                              }
                            ],
                            "functionName": {
                              "name": "revert",
                              "nativeSrc": "187:6:67",
                              "nodeType": "YulIdentifier",
                              "src": "187:6:67"
                            },
                            "nativeSrc": "187:12:67",
                            "nodeType": "YulFunctionCall",
                            "src": "187:12:67"
                          },
                          "nativeSrc": "187:12:67",
                          "nodeType": "YulExpressionStatement",
                          "src": "187:12:67"
                        }
                      ]
                    },
                    "name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
                    "nativeSrc": "88:117:67",
                    "nodeType": "YulFunctionDefinition",
                    "src": "88:117:67"
                  },
                  {
                    "body": {
                      "nativeSrc": "300:28:67",
                      "nodeType": "YulBlock",
                      "src": "300:28:67",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nativeSrc": "317:1:67",
                                "nodeType": "YulLiteral",
                                "src": "317:1:67",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "320:1:67",
                                "nodeType": "YulLiteral",
                                "src": "320:1:67",
                                "type": "",
                                "value": "0"
                              }
                            ],
                            "functionName": {
                              "name": "revert",
                              "nativeSrc": "310:6:67",
                              "nodeType": "YulIdentifier",
                              "src": "310:6:67"
                            },
                            "nativeSrc": "310:12:67",
                            "nodeType": "YulFunctionCall",
                            "src": "310:12:67"
                          },
                          "nativeSrc": "310:12:67",
                          "nodeType": "YulExpressionStatement",
                          "src": "310:12:67"
                        }
                      ]
                    },
                    "name": "revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db",
                    "nativeSrc": "211:117:67",
                    "nodeType": "YulFunctionDefinition",
                    "src": "211:117:67"
                  },
                  {
                    "body": {
                      "nativeSrc": "378:105:67",
                      "nodeType": "YulBlock",
                      "src": "378:105:67",
                      "statements": [
                        {
                          "nativeSrc": "388:89:67",
                          "nodeType": "YulAssignment",
                          "src": "388:89:67",
                          "value": {
                            "arguments": [
                              {
                                "name": "value",
                                "nativeSrc": "403:5:67",
                                "nodeType": "YulIdentifier",
                                "src": "403:5:67"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "410:66:67",
                                "nodeType": "YulLiteral",
                                "src": "410:66:67",
                                "type": "",
                                "value": "0xffffffff00000000000000000000000000000000000000000000000000000000"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nativeSrc": "399:3:67",
                              "nodeType": "YulIdentifier",
                              "src": "399:3:67"
                            },
                            "nativeSrc": "399:78:67",
                            "nodeType": "YulFunctionCall",
                            "src": "399:78:67"
                          },
                          "variableNames": [
                            {
                              "name": "cleaned",
                              "nativeSrc": "388:7:67",
                              "nodeType": "YulIdentifier",
                              "src": "388:7:67"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "cleanup_t_bytes4",
                    "nativeSrc": "334:149:67",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nativeSrc": "360:5:67",
                        "nodeType": "YulTypedName",
                        "src": "360:5:67",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "cleaned",
                        "nativeSrc": "370:7:67",
                        "nodeType": "YulTypedName",
                        "src": "370:7:67",
                        "type": ""
                      }
                    ],
                    "src": "334:149:67"
                  },
                  {
                    "body": {
                      "nativeSrc": "531:78:67",
                      "nodeType": "YulBlock",
                      "src": "531:78:67",
                      "statements": [
                        {
                          "body": {
                            "nativeSrc": "587:16:67",
                            "nodeType": "YulBlock",
                            "src": "587:16:67",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nativeSrc": "596:1:67",
                                      "nodeType": "YulLiteral",
                                      "src": "596:1:67",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nativeSrc": "599:1:67",
                                      "nodeType": "YulLiteral",
                                      "src": "599:1:67",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nativeSrc": "589:6:67",
                                    "nodeType": "YulIdentifier",
                                    "src": "589:6:67"
                                  },
                                  "nativeSrc": "589:12:67",
                                  "nodeType": "YulFunctionCall",
                                  "src": "589:12:67"
                                },
                                "nativeSrc": "589:12:67",
                                "nodeType": "YulExpressionStatement",
                                "src": "589:12:67"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nativeSrc": "554:5:67",
                                    "nodeType": "YulIdentifier",
                                    "src": "554:5:67"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "value",
                                        "nativeSrc": "578:5:67",
                                        "nodeType": "YulIdentifier",
                                        "src": "578:5:67"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "cleanup_t_bytes4",
                                      "nativeSrc": "561:16:67",
                                      "nodeType": "YulIdentifier",
                                      "src": "561:16:67"
                                    },
                                    "nativeSrc": "561:23:67",
                                    "nodeType": "YulFunctionCall",
                                    "src": "561:23:67"
                                  }
                                ],
                                "functionName": {
                                  "name": "eq",
                                  "nativeSrc": "551:2:67",
                                  "nodeType": "YulIdentifier",
                                  "src": "551:2:67"
                                },
                                "nativeSrc": "551:34:67",
                                "nodeType": "YulFunctionCall",
                                "src": "551:34:67"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nativeSrc": "544:6:67",
                              "nodeType": "YulIdentifier",
                              "src": "544:6:67"
                            },
                            "nativeSrc": "544:42:67",
                            "nodeType": "YulFunctionCall",
                            "src": "544:42:67"
                          },
                          "nativeSrc": "541:62:67",
                          "nodeType": "YulIf",
                          "src": "541:62:67"
                        }
                      ]
                    },
                    "name": "validator_revert_t_bytes4",
                    "nativeSrc": "489:120:67",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nativeSrc": "524:5:67",
                        "nodeType": "YulTypedName",
                        "src": "524:5:67",
                        "type": ""
                      }
                    ],
                    "src": "489:120:67"
                  },
                  {
                    "body": {
                      "nativeSrc": "666:86:67",
                      "nodeType": "YulBlock",
                      "src": "666:86:67",
                      "statements": [
                        {
                          "nativeSrc": "676:29:67",
                          "nodeType": "YulAssignment",
                          "src": "676:29:67",
                          "value": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nativeSrc": "698:6:67",
                                "nodeType": "YulIdentifier",
                                "src": "698:6:67"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nativeSrc": "685:12:67",
                              "nodeType": "YulIdentifier",
                              "src": "685:12:67"
                            },
                            "nativeSrc": "685:20:67",
                            "nodeType": "YulFunctionCall",
                            "src": "685:20:67"
                          },
                          "variableNames": [
                            {
                              "name": "value",
                              "nativeSrc": "676:5:67",
                              "nodeType": "YulIdentifier",
                              "src": "676:5:67"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value",
                                "nativeSrc": "740:5:67",
                                "nodeType": "YulIdentifier",
                                "src": "740:5:67"
                              }
                            ],
                            "functionName": {
                              "name": "validator_revert_t_bytes4",
                              "nativeSrc": "714:25:67",
                              "nodeType": "YulIdentifier",
                              "src": "714:25:67"
                            },
                            "nativeSrc": "714:32:67",
                            "nodeType": "YulFunctionCall",
                            "src": "714:32:67"
                          },
                          "nativeSrc": "714:32:67",
                          "nodeType": "YulExpressionStatement",
                          "src": "714:32:67"
                        }
                      ]
                    },
                    "name": "abi_decode_t_bytes4",
                    "nativeSrc": "615:137:67",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "offset",
                        "nativeSrc": "644:6:67",
                        "nodeType": "YulTypedName",
                        "src": "644:6:67",
                        "type": ""
                      },
                      {
                        "name": "end",
                        "nativeSrc": "652:3:67",
                        "nodeType": "YulTypedName",
                        "src": "652:3:67",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value",
                        "nativeSrc": "660:5:67",
                        "nodeType": "YulTypedName",
                        "src": "660:5:67",
                        "type": ""
                      }
                    ],
                    "src": "615:137:67"
                  },
                  {
                    "body": {
                      "nativeSrc": "823:262:67",
                      "nodeType": "YulBlock",
                      "src": "823:262:67",
                      "statements": [
                        {
                          "body": {
                            "nativeSrc": "869:83:67",
                            "nodeType": "YulBlock",
                            "src": "869:83:67",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
                                    "nativeSrc": "871:77:67",
                                    "nodeType": "YulIdentifier",
                                    "src": "871:77:67"
                                  },
                                  "nativeSrc": "871:79:67",
                                  "nodeType": "YulFunctionCall",
                                  "src": "871:79:67"
                                },
                                "nativeSrc": "871:79:67",
                                "nodeType": "YulExpressionStatement",
                                "src": "871:79:67"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nativeSrc": "844:7:67",
                                    "nodeType": "YulIdentifier",
                                    "src": "844:7:67"
                                  },
                                  {
                                    "name": "headStart",
                                    "nativeSrc": "853:9:67",
                                    "nodeType": "YulIdentifier",
                                    "src": "853:9:67"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nativeSrc": "840:3:67",
                                  "nodeType": "YulIdentifier",
                                  "src": "840:3:67"
                                },
                                "nativeSrc": "840:23:67",
                                "nodeType": "YulFunctionCall",
                                "src": "840:23:67"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "865:2:67",
                                "nodeType": "YulLiteral",
                                "src": "865:2:67",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nativeSrc": "836:3:67",
                              "nodeType": "YulIdentifier",
                              "src": "836:3:67"
                            },
                            "nativeSrc": "836:32:67",
                            "nodeType": "YulFunctionCall",
                            "src": "836:32:67"
                          },
                          "nativeSrc": "833:119:67",
                          "nodeType": "YulIf",
                          "src": "833:119:67"
                        },
                        {
                          "nativeSrc": "962:116:67",
                          "nodeType": "YulBlock",
                          "src": "962:116:67",
                          "statements": [
                            {
                              "nativeSrc": "977:15:67",
                              "nodeType": "YulVariableDeclaration",
                              "src": "977:15:67",
                              "value": {
                                "kind": "number",
                                "nativeSrc": "991:1:67",
                                "nodeType": "YulLiteral",
                                "src": "991:1:67",
                                "type": "",
                                "value": "0"
                              },
                              "variables": [
                                {
                                  "name": "offset",
                                  "nativeSrc": "981:6:67",
                                  "nodeType": "YulTypedName",
                                  "src": "981:6:67",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "nativeSrc": "1006:62:67",
                              "nodeType": "YulAssignment",
                              "src": "1006:62:67",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nativeSrc": "1040:9:67",
                                        "nodeType": "YulIdentifier",
                                        "src": "1040:9:67"
                                      },
                                      {
                                        "name": "offset",
                                        "nativeSrc": "1051:6:67",
                                        "nodeType": "YulIdentifier",
                                        "src": "1051:6:67"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "1036:3:67",
                                      "nodeType": "YulIdentifier",
                                      "src": "1036:3:67"
                                    },
                                    "nativeSrc": "1036:22:67",
                                    "nodeType": "YulFunctionCall",
                                    "src": "1036:22:67"
                                  },
                                  {
                                    "name": "dataEnd",
                                    "nativeSrc": "1060:7:67",
                                    "nodeType": "YulIdentifier",
                                    "src": "1060:7:67"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_decode_t_bytes4",
                                  "nativeSrc": "1016:19:67",
                                  "nodeType": "YulIdentifier",
                                  "src": "1016:19:67"
                                },
                                "nativeSrc": "1016:52:67",
                                "nodeType": "YulFunctionCall",
                                "src": "1016:52:67"
                              },
                              "variableNames": [
                                {
                                  "name": "value0",
                                  "nativeSrc": "1006:6:67",
                                  "nodeType": "YulIdentifier",
                                  "src": "1006:6:67"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_bytes4",
                    "nativeSrc": "758:327:67",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nativeSrc": "793:9:67",
                        "nodeType": "YulTypedName",
                        "src": "793:9:67",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nativeSrc": "804:7:67",
                        "nodeType": "YulTypedName",
                        "src": "804:7:67",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nativeSrc": "816:6:67",
                        "nodeType": "YulTypedName",
                        "src": "816:6:67",
                        "type": ""
                      }
                    ],
                    "src": "758:327:67"
                  },
                  {
                    "body": {
                      "nativeSrc": "1133:48:67",
                      "nodeType": "YulBlock",
                      "src": "1133:48:67",
                      "statements": [
                        {
                          "nativeSrc": "1143:32:67",
                          "nodeType": "YulAssignment",
                          "src": "1143:32:67",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nativeSrc": "1168:5:67",
                                    "nodeType": "YulIdentifier",
                                    "src": "1168:5:67"
                                  }
                                ],
                                "functionName": {
                                  "name": "iszero",
                                  "nativeSrc": "1161:6:67",
                                  "nodeType": "YulIdentifier",
                                  "src": "1161:6:67"
                                },
                                "nativeSrc": "1161:13:67",
                                "nodeType": "YulFunctionCall",
                                "src": "1161:13:67"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nativeSrc": "1154:6:67",
                              "nodeType": "YulIdentifier",
                              "src": "1154:6:67"
                            },
                            "nativeSrc": "1154:21:67",
                            "nodeType": "YulFunctionCall",
                            "src": "1154:21:67"
                          },
                          "variableNames": [
                            {
                              "name": "cleaned",
                              "nativeSrc": "1143:7:67",
                              "nodeType": "YulIdentifier",
                              "src": "1143:7:67"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "cleanup_t_bool",
                    "nativeSrc": "1091:90:67",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nativeSrc": "1115:5:67",
                        "nodeType": "YulTypedName",
                        "src": "1115:5:67",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "cleaned",
                        "nativeSrc": "1125:7:67",
                        "nodeType": "YulTypedName",
                        "src": "1125:7:67",
                        "type": ""
                      }
                    ],
                    "src": "1091:90:67"
                  },
                  {
                    "body": {
                      "nativeSrc": "1246:50:67",
                      "nodeType": "YulBlock",
                      "src": "1246:50:67",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nativeSrc": "1263:3:67",
                                "nodeType": "YulIdentifier",
                                "src": "1263:3:67"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nativeSrc": "1283:5:67",
                                    "nodeType": "YulIdentifier",
                                    "src": "1283:5:67"
                                  }
                                ],
                                "functionName": {
                                  "name": "cleanup_t_bool",
                                  "nativeSrc": "1268:14:67",
                                  "nodeType": "YulIdentifier",
                                  "src": "1268:14:67"
                                },
                                "nativeSrc": "1268:21:67",
                                "nodeType": "YulFunctionCall",
                                "src": "1268:21:67"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nativeSrc": "1256:6:67",
                              "nodeType": "YulIdentifier",
                              "src": "1256:6:67"
                            },
                            "nativeSrc": "1256:34:67",
                            "nodeType": "YulFunctionCall",
                            "src": "1256:34:67"
                          },
                          "nativeSrc": "1256:34:67",
                          "nodeType": "YulExpressionStatement",
                          "src": "1256:34:67"
                        }
                      ]
                    },
                    "name": "abi_encode_t_bool_to_t_bool_fromStack",
                    "nativeSrc": "1187:109:67",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nativeSrc": "1234:5:67",
                        "nodeType": "YulTypedName",
                        "src": "1234:5:67",
                        "type": ""
                      },
                      {
                        "name": "pos",
                        "nativeSrc": "1241:3:67",
                        "nodeType": "YulTypedName",
                        "src": "1241:3:67",
                        "type": ""
                      }
                    ],
                    "src": "1187:109:67"
                  },
                  {
                    "body": {
                      "nativeSrc": "1394:118:67",
                      "nodeType": "YulBlock",
                      "src": "1394:118:67",
                      "statements": [
                        {
                          "nativeSrc": "1404:26:67",
                          "nodeType": "YulAssignment",
                          "src": "1404:26:67",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nativeSrc": "1416:9:67",
                                "nodeType": "YulIdentifier",
                                "src": "1416:9:67"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "1427:2:67",
                                "nodeType": "YulLiteral",
                                "src": "1427:2:67",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nativeSrc": "1412:3:67",
                              "nodeType": "YulIdentifier",
                              "src": "1412:3:67"
                            },
                            "nativeSrc": "1412:18:67",
                            "nodeType": "YulFunctionCall",
                            "src": "1412:18:67"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nativeSrc": "1404:4:67",
                              "nodeType": "YulIdentifier",
                              "src": "1404:4:67"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value0",
                                "nativeSrc": "1478:6:67",
                                "nodeType": "YulIdentifier",
                                "src": "1478:6:67"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nativeSrc": "1491:9:67",
                                    "nodeType": "YulIdentifier",
                                    "src": "1491:9:67"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "1502:1:67",
                                    "nodeType": "YulLiteral",
                                    "src": "1502:1:67",
                                    "type": "",
                                    "value": "0"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "1487:3:67",
                                  "nodeType": "YulIdentifier",
                                  "src": "1487:3:67"
                                },
                                "nativeSrc": "1487:17:67",
                                "nodeType": "YulFunctionCall",
                                "src": "1487:17:67"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_t_bool_to_t_bool_fromStack",
                              "nativeSrc": "1440:37:67",
                              "nodeType": "YulIdentifier",
                              "src": "1440:37:67"
                            },
                            "nativeSrc": "1440:65:67",
                            "nodeType": "YulFunctionCall",
                            "src": "1440:65:67"
                          },
                          "nativeSrc": "1440:65:67",
                          "nodeType": "YulExpressionStatement",
                          "src": "1440:65:67"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed",
                    "nativeSrc": "1302:210:67",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nativeSrc": "1366:9:67",
                        "nodeType": "YulTypedName",
                        "src": "1366:9:67",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nativeSrc": "1378:6:67",
                        "nodeType": "YulTypedName",
                        "src": "1378:6:67",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nativeSrc": "1389:4:67",
                        "nodeType": "YulTypedName",
                        "src": "1389:4:67",
                        "type": ""
                      }
                    ],
                    "src": "1302:210:67"
                  },
                  {
                    "body": {
                      "nativeSrc": "1577:40:67",
                      "nodeType": "YulBlock",
                      "src": "1577:40:67",
                      "statements": [
                        {
                          "nativeSrc": "1588:22:67",
                          "nodeType": "YulAssignment",
                          "src": "1588:22:67",
                          "value": {
                            "arguments": [
                              {
                                "name": "value",
                                "nativeSrc": "1604:5:67",
                                "nodeType": "YulIdentifier",
                                "src": "1604:5:67"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nativeSrc": "1598:5:67",
                              "nodeType": "YulIdentifier",
                              "src": "1598:5:67"
                            },
                            "nativeSrc": "1598:12:67",
                            "nodeType": "YulFunctionCall",
                            "src": "1598:12:67"
                          },
                          "variableNames": [
                            {
                              "name": "length",
                              "nativeSrc": "1588:6:67",
                              "nodeType": "YulIdentifier",
                              "src": "1588:6:67"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "array_length_t_string_memory_ptr",
                    "nativeSrc": "1518:99:67",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nativeSrc": "1560:5:67",
                        "nodeType": "YulTypedName",
                        "src": "1560:5:67",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "length",
                        "nativeSrc": "1570:6:67",
                        "nodeType": "YulTypedName",
                        "src": "1570:6:67",
                        "type": ""
                      }
                    ],
                    "src": "1518:99:67"
                  },
                  {
                    "body": {
                      "nativeSrc": "1719:73:67",
                      "nodeType": "YulBlock",
                      "src": "1719:73:67",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nativeSrc": "1736:3:67",
                                "nodeType": "YulIdentifier",
                                "src": "1736:3:67"
                              },
                              {
                                "name": "length",
                                "nativeSrc": "1741:6:67",
                                "nodeType": "YulIdentifier",
                                "src": "1741:6:67"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nativeSrc": "1729:6:67",
                              "nodeType": "YulIdentifier",
                              "src": "1729:6:67"
                            },
                            "nativeSrc": "1729:19:67",
                            "nodeType": "YulFunctionCall",
                            "src": "1729:19:67"
                          },
                          "nativeSrc": "1729:19:67",
                          "nodeType": "YulExpressionStatement",
                          "src": "1729:19:67"
                        },
                        {
                          "nativeSrc": "1757:29:67",
                          "nodeType": "YulAssignment",
                          "src": "1757:29:67",
                          "value": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nativeSrc": "1776:3:67",
                                "nodeType": "YulIdentifier",
                                "src": "1776:3:67"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "1781:4:67",
                                "nodeType": "YulLiteral",
                                "src": "1781:4:67",
                                "type": "",
                                "value": "0x20"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nativeSrc": "1772:3:67",
                              "nodeType": "YulIdentifier",
                              "src": "1772:3:67"
                            },
                            "nativeSrc": "1772:14:67",
                            "nodeType": "YulFunctionCall",
                            "src": "1772:14:67"
                          },
                          "variableNames": [
                            {
                              "name": "updated_pos",
                              "nativeSrc": "1757:11:67",
                              "nodeType": "YulIdentifier",
                              "src": "1757:11:67"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
                    "nativeSrc": "1623:169:67",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "pos",
                        "nativeSrc": "1691:3:67",
                        "nodeType": "YulTypedName",
                        "src": "1691:3:67",
                        "type": ""
                      },
                      {
                        "name": "length",
                        "nativeSrc": "1696:6:67",
                        "nodeType": "YulTypedName",
                        "src": "1696:6:67",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "updated_pos",
                        "nativeSrc": "1707:11:67",
                        "nodeType": "YulTypedName",
                        "src": "1707:11:67",
                        "type": ""
                      }
                    ],
                    "src": "1623:169:67"
                  },
                  {
                    "body": {
                      "nativeSrc": "1860:186:67",
                      "nodeType": "YulBlock",
                      "src": "1860:186:67",
                      "statements": [
                        {
                          "nativeSrc": "1871:10:67",
                          "nodeType": "YulVariableDeclaration",
                          "src": "1871:10:67",
                          "value": {
                            "kind": "number",
                            "nativeSrc": "1880:1:67",
                            "nodeType": "YulLiteral",
                            "src": "1880:1:67",
                            "type": "",
                            "value": "0"
                          },
                          "variables": [
                            {
                              "name": "i",
                              "nativeSrc": "1875:1:67",
                              "nodeType": "YulTypedName",
                              "src": "1875:1:67",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nativeSrc": "1940:63:67",
                            "nodeType": "YulBlock",
                            "src": "1940:63:67",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "arguments": [
                                        {
                                          "name": "dst",
                                          "nativeSrc": "1965:3:67",
                                          "nodeType": "YulIdentifier",
                                          "src": "1965:3:67"
                                        },
                                        {
                                          "name": "i",
                                          "nativeSrc": "1970:1:67",
                                          "nodeType": "YulIdentifier",
                                          "src": "1970:1:67"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nativeSrc": "1961:3:67",
                                        "nodeType": "YulIdentifier",
                                        "src": "1961:3:67"
                                      },
                                      "nativeSrc": "1961:11:67",
                                      "nodeType": "YulFunctionCall",
                                      "src": "1961:11:67"
                                    },
                                    {
                                      "arguments": [
                                        {
                                          "arguments": [
                                            {
                                              "name": "src",
                                              "nativeSrc": "1984:3:67",
                                              "nodeType": "YulIdentifier",
                                              "src": "1984:3:67"
                                            },
                                            {
                                              "name": "i",
                                              "nativeSrc": "1989:1:67",
                                              "nodeType": "YulIdentifier",
                                              "src": "1989:1:67"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "add",
                                            "nativeSrc": "1980:3:67",
                                            "nodeType": "YulIdentifier",
                                            "src": "1980:3:67"
                                          },
                                          "nativeSrc": "1980:11:67",
                                          "nodeType": "YulFunctionCall",
                                          "src": "1980:11:67"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "mload",
                                        "nativeSrc": "1974:5:67",
                                        "nodeType": "YulIdentifier",
                                        "src": "1974:5:67"
                                      },
                                      "nativeSrc": "1974:18:67",
                                      "nodeType": "YulFunctionCall",
                                      "src": "1974:18:67"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nativeSrc": "1954:6:67",
                                    "nodeType": "YulIdentifier",
                                    "src": "1954:6:67"
                                  },
                                  "nativeSrc": "1954:39:67",
                                  "nodeType": "YulFunctionCall",
                                  "src": "1954:39:67"
                                },
                                "nativeSrc": "1954:39:67",
                                "nodeType": "YulExpressionStatement",
                                "src": "1954:39:67"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "i",
                                "nativeSrc": "1901:1:67",
                                "nodeType": "YulIdentifier",
                                "src": "1901:1:67"
                              },
                              {
                                "name": "length",
                                "nativeSrc": "1904:6:67",
                                "nodeType": "YulIdentifier",
                                "src": "1904:6:67"
                              }
                            ],
                            "functionName": {
                              "name": "lt",
                              "nativeSrc": "1898:2:67",
                              "nodeType": "YulIdentifier",
                              "src": "1898:2:67"
                            },
                            "nativeSrc": "1898:13:67",
                            "nodeType": "YulFunctionCall",
                            "src": "1898:13:67"
                          },
                          "nativeSrc": "1890:113:67",
                          "nodeType": "YulForLoop",
                          "post": {
                            "nativeSrc": "1912:19:67",
                            "nodeType": "YulBlock",
                            "src": "1912:19:67",
                            "statements": [
                              {
                                "nativeSrc": "1914:15:67",
                                "nodeType": "YulAssignment",
                                "src": "1914:15:67",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "i",
                                      "nativeSrc": "1923:1:67",
                                      "nodeType": "YulIdentifier",
                                      "src": "1923:1:67"
                                    },
                                    {
                                      "kind": "number",
                                      "nativeSrc": "1926:2:67",
                                      "nodeType": "YulLiteral",
                                      "src": "1926:2:67",
                                      "type": "",
                                      "value": "32"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nativeSrc": "1919:3:67",
                                    "nodeType": "YulIdentifier",
                                    "src": "1919:3:67"
                                  },
                                  "nativeSrc": "1919:10:67",
                                  "nodeType": "YulFunctionCall",
                                  "src": "1919:10:67"
                                },
                                "variableNames": [
                                  {
                                    "name": "i",
                                    "nativeSrc": "1914:1:67",
                                    "nodeType": "YulIdentifier",
                                    "src": "1914:1:67"
                                  }
                                ]
                              }
                            ]
                          },
                          "pre": {
                            "nativeSrc": "1894:3:67",
                            "nodeType": "YulBlock",
                            "src": "1894:3:67",
                            "statements": []
                          },
                          "src": "1890:113:67"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dst",
                                    "nativeSrc": "2023:3:67",
                                    "nodeType": "YulIdentifier",
                                    "src": "2023:3:67"
                                  },
                                  {
                                    "name": "length",
                                    "nativeSrc": "2028:6:67",
                                    "nodeType": "YulIdentifier",
                                    "src": "2028:6:67"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "2019:3:67",
                                  "nodeType": "YulIdentifier",
                                  "src": "2019:3:67"
                                },
                                "nativeSrc": "2019:16:67",
                                "nodeType": "YulFunctionCall",
                                "src": "2019:16:67"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "2037:1:67",
                                "nodeType": "YulLiteral",
                                "src": "2037:1:67",
                                "type": "",
                                "value": "0"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nativeSrc": "2012:6:67",
                              "nodeType": "YulIdentifier",
                              "src": "2012:6:67"
                            },
                            "nativeSrc": "2012:27:67",
                            "nodeType": "YulFunctionCall",
                            "src": "2012:27:67"
                          },
                          "nativeSrc": "2012:27:67",
                          "nodeType": "YulExpressionStatement",
                          "src": "2012:27:67"
                        }
                      ]
                    },
                    "name": "copy_memory_to_memory_with_cleanup",
                    "nativeSrc": "1798:248:67",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "src",
                        "nativeSrc": "1842:3:67",
                        "nodeType": "YulTypedName",
                        "src": "1842:3:67",
                        "type": ""
                      },
                      {
                        "name": "dst",
                        "nativeSrc": "1847:3:67",
                        "nodeType": "YulTypedName",
                        "src": "1847:3:67",
                        "type": ""
                      },
                      {
                        "name": "length",
                        "nativeSrc": "1852:6:67",
                        "nodeType": "YulTypedName",
                        "src": "1852:6:67",
                        "type": ""
                      }
                    ],
                    "src": "1798:248:67"
                  },
                  {
                    "body": {
                      "nativeSrc": "2100:54:67",
                      "nodeType": "YulBlock",
                      "src": "2100:54:67",
                      "statements": [
                        {
                          "nativeSrc": "2110:38:67",
                          "nodeType": "YulAssignment",
                          "src": "2110:38:67",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nativeSrc": "2128:5:67",
                                    "nodeType": "YulIdentifier",
                                    "src": "2128:5:67"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "2135:2:67",
                                    "nodeType": "YulLiteral",
                                    "src": "2135:2:67",
                                    "type": "",
                                    "value": "31"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "2124:3:67",
                                  "nodeType": "YulIdentifier",
                                  "src": "2124:3:67"
                                },
                                "nativeSrc": "2124:14:67",
                                "nodeType": "YulFunctionCall",
                                "src": "2124:14:67"
                              },
                              {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nativeSrc": "2144:2:67",
                                    "nodeType": "YulLiteral",
                                    "src": "2144:2:67",
                                    "type": "",
                                    "value": "31"
                                  }
                                ],
                                "functionName": {
                                  "name": "not",
                                  "nativeSrc": "2140:3:67",
                                  "nodeType": "YulIdentifier",
                                  "src": "2140:3:67"
                                },
                                "nativeSrc": "2140:7:67",
                                "nodeType": "YulFunctionCall",
                                "src": "2140:7:67"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nativeSrc": "2120:3:67",
                              "nodeType": "YulIdentifier",
                              "src": "2120:3:67"
                            },
                            "nativeSrc": "2120:28:67",
                            "nodeType": "YulFunctionCall",
                            "src": "2120:28:67"
                          },
                          "variableNames": [
                            {
                              "name": "result",
                              "nativeSrc": "2110:6:67",
                              "nodeType": "YulIdentifier",
                              "src": "2110:6:67"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "round_up_to_mul_of_32",
                    "nativeSrc": "2052:102:67",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nativeSrc": "2083:5:67",
                        "nodeType": "YulTypedName",
                        "src": "2083:5:67",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "result",
                        "nativeSrc": "2093:6:67",
                        "nodeType": "YulTypedName",
                        "src": "2093:6:67",
                        "type": ""
                      }
                    ],
                    "src": "2052:102:67"
                  },
                  {
                    "body": {
                      "nativeSrc": "2252:285:67",
                      "nodeType": "YulBlock",
                      "src": "2252:285:67",
                      "statements": [
                        {
                          "nativeSrc": "2262:53:67",
                          "nodeType": "YulVariableDeclaration",
                          "src": "2262:53:67",
                          "value": {
                            "arguments": [
                              {
                                "name": "value",
                                "nativeSrc": "2309:5:67",
                                "nodeType": "YulIdentifier",
                                "src": "2309:5:67"
                              }
                            ],
                            "functionName": {
                              "name": "array_length_t_string_memory_ptr",
                              "nativeSrc": "2276:32:67",
                              "nodeType": "YulIdentifier",
                              "src": "2276:32:67"
                            },
                            "nativeSrc": "2276:39:67",
                            "nodeType": "YulFunctionCall",
                            "src": "2276:39:67"
                          },
                          "variables": [
                            {
                              "name": "length",
                              "nativeSrc": "2266:6:67",
                              "nodeType": "YulTypedName",
                              "src": "2266:6:67",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nativeSrc": "2324:78:67",
                          "nodeType": "YulAssignment",
                          "src": "2324:78:67",
                          "value": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nativeSrc": "2390:3:67",
                                "nodeType": "YulIdentifier",
                                "src": "2390:3:67"
                              },
                              {
                                "name": "length",
                                "nativeSrc": "2395:6:67",
                                "nodeType": "YulIdentifier",
                                "src": "2395:6:67"
                              }
                            ],
                            "functionName": {
                              "name": "array_storeLengthForEncoding_t_string_memory_ptr_fromStack",
                              "nativeSrc": "2331:58:67",
                              "nodeType": "YulIdentifier",
                              "src": "2331:58:67"
                            },
                            "nativeSrc": "2331:71:67",
                            "nodeType": "YulFunctionCall",
                            "src": "2331:71:67"
                          },
                          "variableNames": [
                            {
                              "name": "pos",
                              "nativeSrc": "2324:3:67",
                              "nodeType": "YulIdentifier",
                              "src": "2324:3:67"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nativeSrc": "2450:5:67",
                                    "nodeType": "YulIdentifier",
                                    "src": "2450:5:67"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "2457:4:67",
                                    "nodeType": "YulLiteral",
                                    "src": "2457:4:67",
                                    "type": "",
                                    "value": "0x20"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "2446:3:67",
                                  "nodeType": "YulIdentifier",
                                  "src": "2446:3:67"
                                },
                                "nativeSrc": "2446:16:67",
                                "nodeType": "YulFunctionCall",
                                "src": "2446:16:67"
                              },
                              {
                                "name": "pos",
                                "nativeSrc": "2464:3:67",
                                "nodeType": "YulIdentifier",
                                "src": "2464:3:67"
                              },
                              {
                                "name": "length",
                                "nativeSrc": "2469:6:67",
                                "nodeType": "YulIdentifier",
                                "src": "2469:6:67"
                              }
                            ],
                            "functionName": {
                              "name": "copy_memory_to_memory_with_cleanup",
                              "nativeSrc": "2411:34:67",
                              "nodeType": "YulIdentifier",
                              "src": "2411:34:67"
                            },
                            "nativeSrc": "2411:65:67",
                            "nodeType": "YulFunctionCall",
                            "src": "2411:65:67"
                          },
                          "nativeSrc": "2411:65:67",
                          "nodeType": "YulExpressionStatement",
                          "src": "2411:65:67"
                        },
                        {
                          "nativeSrc": "2485:46:67",
                          "nodeType": "YulAssignment",
                          "src": "2485:46:67",
                          "value": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nativeSrc": "2496:3:67",
                                "nodeType": "YulIdentifier",
                                "src": "2496:3:67"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "length",
                                    "nativeSrc": "2523:6:67",
                                    "nodeType": "YulIdentifier",
                                    "src": "2523:6:67"
                                  }
                                ],
                                "functionName": {
                                  "name": "round_up_to_mul_of_32",
                                  "nativeSrc": "2501:21:67",
                                  "nodeType": "YulIdentifier",
                                  "src": "2501:21:67"
                                },
                                "nativeSrc": "2501:29:67",
                                "nodeType": "YulFunctionCall",
                                "src": "2501:29:67"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nativeSrc": "2492:3:67",
                              "nodeType": "YulIdentifier",
                              "src": "2492:3:67"
                            },
                            "nativeSrc": "2492:39:67",
                            "nodeType": "YulFunctionCall",
                            "src": "2492:39:67"
                          },
                          "variableNames": [
                            {
                              "name": "end",
                              "nativeSrc": "2485:3:67",
                              "nodeType": "YulIdentifier",
                              "src": "2485:3:67"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack",
                    "nativeSrc": "2160:377:67",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nativeSrc": "2233:5:67",
                        "nodeType": "YulTypedName",
                        "src": "2233:5:67",
                        "type": ""
                      },
                      {
                        "name": "pos",
                        "nativeSrc": "2240:3:67",
                        "nodeType": "YulTypedName",
                        "src": "2240:3:67",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "end",
                        "nativeSrc": "2248:3:67",
                        "nodeType": "YulTypedName",
                        "src": "2248:3:67",
                        "type": ""
                      }
                    ],
                    "src": "2160:377:67"
                  },
                  {
                    "body": {
                      "nativeSrc": "2661:195:67",
                      "nodeType": "YulBlock",
                      "src": "2661:195:67",
                      "statements": [
                        {
                          "nativeSrc": "2671:26:67",
                          "nodeType": "YulAssignment",
                          "src": "2671:26:67",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nativeSrc": "2683:9:67",
                                "nodeType": "YulIdentifier",
                                "src": "2683:9:67"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "2694:2:67",
                                "nodeType": "YulLiteral",
                                "src": "2694:2:67",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nativeSrc": "2679:3:67",
                              "nodeType": "YulIdentifier",
                              "src": "2679:3:67"
                            },
                            "nativeSrc": "2679:18:67",
                            "nodeType": "YulFunctionCall",
                            "src": "2679:18:67"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nativeSrc": "2671:4:67",
                              "nodeType": "YulIdentifier",
                              "src": "2671:4:67"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nativeSrc": "2718:9:67",
                                    "nodeType": "YulIdentifier",
                                    "src": "2718:9:67"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "2729:1:67",
                                    "nodeType": "YulLiteral",
                                    "src": "2729:1:67",
                                    "type": "",
                                    "value": "0"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "2714:3:67",
                                  "nodeType": "YulIdentifier",
                                  "src": "2714:3:67"
                                },
                                "nativeSrc": "2714:17:67",
                                "nodeType": "YulFunctionCall",
                                "src": "2714:17:67"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "tail",
                                    "nativeSrc": "2737:4:67",
                                    "nodeType": "YulIdentifier",
                                    "src": "2737:4:67"
                                  },
                                  {
                                    "name": "headStart",
                                    "nativeSrc": "2743:9:67",
                                    "nodeType": "YulIdentifier",
                                    "src": "2743:9:67"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nativeSrc": "2733:3:67",
                                  "nodeType": "YulIdentifier",
                                  "src": "2733:3:67"
                                },
                                "nativeSrc": "2733:20:67",
                                "nodeType": "YulFunctionCall",
                                "src": "2733:20:67"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nativeSrc": "2707:6:67",
                              "nodeType": "YulIdentifier",
                              "src": "2707:6:67"
                            },
                            "nativeSrc": "2707:47:67",
                            "nodeType": "YulFunctionCall",
                            "src": "2707:47:67"
                          },
                          "nativeSrc": "2707:47:67",
                          "nodeType": "YulExpressionStatement",
                          "src": "2707:47:67"
                        },
                        {
                          "nativeSrc": "2763:86:67",
                          "nodeType": "YulAssignment",
                          "src": "2763:86:67",
                          "value": {
                            "arguments": [
                              {
                                "name": "value0",
                                "nativeSrc": "2835:6:67",
                                "nodeType": "YulIdentifier",
                                "src": "2835:6:67"
                              },
                              {
                                "name": "tail",
                                "nativeSrc": "2844:4:67",
                                "nodeType": "YulIdentifier",
                                "src": "2844:4:67"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack",
                              "nativeSrc": "2771:63:67",
                              "nodeType": "YulIdentifier",
                              "src": "2771:63:67"
                            },
                            "nativeSrc": "2771:78:67",
                            "nodeType": "YulFunctionCall",
                            "src": "2771:78:67"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nativeSrc": "2763:4:67",
                              "nodeType": "YulIdentifier",
                              "src": "2763:4:67"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed",
                    "nativeSrc": "2543:313:67",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nativeSrc": "2633:9:67",
                        "nodeType": "YulTypedName",
                        "src": "2633:9:67",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nativeSrc": "2645:6:67",
                        "nodeType": "YulTypedName",
                        "src": "2645:6:67",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nativeSrc": "2656:4:67",
                        "nodeType": "YulTypedName",
                        "src": "2656:4:67",
                        "type": ""
                      }
                    ],
                    "src": "2543:313:67"
                  },
                  {
                    "body": {
                      "nativeSrc": "2907:32:67",
                      "nodeType": "YulBlock",
                      "src": "2907:32:67",
                      "statements": [
                        {
                          "nativeSrc": "2917:16:67",
                          "nodeType": "YulAssignment",
                          "src": "2917:16:67",
                          "value": {
                            "name": "value",
                            "nativeSrc": "2928:5:67",
                            "nodeType": "YulIdentifier",
                            "src": "2928:5:67"
                          },
                          "variableNames": [
                            {
                              "name": "cleaned",
                              "nativeSrc": "2917:7:67",
                              "nodeType": "YulIdentifier",
                              "src": "2917:7:67"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "cleanup_t_uint256",
                    "nativeSrc": "2862:77:67",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nativeSrc": "2889:5:67",
                        "nodeType": "YulTypedName",
                        "src": "2889:5:67",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "cleaned",
                        "nativeSrc": "2899:7:67",
                        "nodeType": "YulTypedName",
                        "src": "2899:7:67",
                        "type": ""
                      }
                    ],
                    "src": "2862:77:67"
                  },
                  {
                    "body": {
                      "nativeSrc": "2988:79:67",
                      "nodeType": "YulBlock",
                      "src": "2988:79:67",
                      "statements": [
                        {
                          "body": {
                            "nativeSrc": "3045:16:67",
                            "nodeType": "YulBlock",
                            "src": "3045:16:67",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nativeSrc": "3054:1:67",
                                      "nodeType": "YulLiteral",
                                      "src": "3054:1:67",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nativeSrc": "3057:1:67",
                                      "nodeType": "YulLiteral",
                                      "src": "3057:1:67",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nativeSrc": "3047:6:67",
                                    "nodeType": "YulIdentifier",
                                    "src": "3047:6:67"
                                  },
                                  "nativeSrc": "3047:12:67",
                                  "nodeType": "YulFunctionCall",
                                  "src": "3047:12:67"
                                },
                                "nativeSrc": "3047:12:67",
                                "nodeType": "YulExpressionStatement",
                                "src": "3047:12:67"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nativeSrc": "3011:5:67",
                                    "nodeType": "YulIdentifier",
                                    "src": "3011:5:67"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "value",
                                        "nativeSrc": "3036:5:67",
                                        "nodeType": "YulIdentifier",
                                        "src": "3036:5:67"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "cleanup_t_uint256",
                                      "nativeSrc": "3018:17:67",
                                      "nodeType": "YulIdentifier",
                                      "src": "3018:17:67"
                                    },
                                    "nativeSrc": "3018:24:67",
                                    "nodeType": "YulFunctionCall",
                                    "src": "3018:24:67"
                                  }
                                ],
                                "functionName": {
                                  "name": "eq",
                                  "nativeSrc": "3008:2:67",
                                  "nodeType": "YulIdentifier",
                                  "src": "3008:2:67"
                                },
                                "nativeSrc": "3008:35:67",
                                "nodeType": "YulFunctionCall",
                                "src": "3008:35:67"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nativeSrc": "3001:6:67",
                              "nodeType": "YulIdentifier",
                              "src": "3001:6:67"
                            },
                            "nativeSrc": "3001:43:67",
                            "nodeType": "YulFunctionCall",
                            "src": "3001:43:67"
                          },
                          "nativeSrc": "2998:63:67",
                          "nodeType": "YulIf",
                          "src": "2998:63:67"
                        }
                      ]
                    },
                    "name": "validator_revert_t_uint256",
                    "nativeSrc": "2945:122:67",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nativeSrc": "2981:5:67",
                        "nodeType": "YulTypedName",
                        "src": "2981:5:67",
                        "type": ""
                      }
                    ],
                    "src": "2945:122:67"
                  },
                  {
                    "body": {
                      "nativeSrc": "3125:87:67",
                      "nodeType": "YulBlock",
                      "src": "3125:87:67",
                      "statements": [
                        {
                          "nativeSrc": "3135:29:67",
                          "nodeType": "YulAssignment",
                          "src": "3135:29:67",
                          "value": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nativeSrc": "3157:6:67",
                                "nodeType": "YulIdentifier",
                                "src": "3157:6:67"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nativeSrc": "3144:12:67",
                              "nodeType": "YulIdentifier",
                              "src": "3144:12:67"
                            },
                            "nativeSrc": "3144:20:67",
                            "nodeType": "YulFunctionCall",
                            "src": "3144:20:67"
                          },
                          "variableNames": [
                            {
                              "name": "value",
                              "nativeSrc": "3135:5:67",
                              "nodeType": "YulIdentifier",
                              "src": "3135:5:67"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value",
                                "nativeSrc": "3200:5:67",
                                "nodeType": "YulIdentifier",
                                "src": "3200:5:67"
                              }
                            ],
                            "functionName": {
                              "name": "validator_revert_t_uint256",
                              "nativeSrc": "3173:26:67",
                              "nodeType": "YulIdentifier",
                              "src": "3173:26:67"
                            },
                            "nativeSrc": "3173:33:67",
                            "nodeType": "YulFunctionCall",
                            "src": "3173:33:67"
                          },
                          "nativeSrc": "3173:33:67",
                          "nodeType": "YulExpressionStatement",
                          "src": "3173:33:67"
                        }
                      ]
                    },
                    "name": "abi_decode_t_uint256",
                    "nativeSrc": "3073:139:67",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "offset",
                        "nativeSrc": "3103:6:67",
                        "nodeType": "YulTypedName",
                        "src": "3103:6:67",
                        "type": ""
                      },
                      {
                        "name": "end",
                        "nativeSrc": "3111:3:67",
                        "nodeType": "YulTypedName",
                        "src": "3111:3:67",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value",
                        "nativeSrc": "3119:5:67",
                        "nodeType": "YulTypedName",
                        "src": "3119:5:67",
                        "type": ""
                      }
                    ],
                    "src": "3073:139:67"
                  },
                  {
                    "body": {
                      "nativeSrc": "3284:263:67",
                      "nodeType": "YulBlock",
                      "src": "3284:263:67",
                      "statements": [
                        {
                          "body": {
                            "nativeSrc": "3330:83:67",
                            "nodeType": "YulBlock",
                            "src": "3330:83:67",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
                                    "nativeSrc": "3332:77:67",
                                    "nodeType": "YulIdentifier",
                                    "src": "3332:77:67"
                                  },
                                  "nativeSrc": "3332:79:67",
                                  "nodeType": "YulFunctionCall",
                                  "src": "3332:79:67"
                                },
                                "nativeSrc": "3332:79:67",
                                "nodeType": "YulExpressionStatement",
                                "src": "3332:79:67"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nativeSrc": "3305:7:67",
                                    "nodeType": "YulIdentifier",
                                    "src": "3305:7:67"
                                  },
                                  {
                                    "name": "headStart",
                                    "nativeSrc": "3314:9:67",
                                    "nodeType": "YulIdentifier",
                                    "src": "3314:9:67"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nativeSrc": "3301:3:67",
                                  "nodeType": "YulIdentifier",
                                  "src": "3301:3:67"
                                },
                                "nativeSrc": "3301:23:67",
                                "nodeType": "YulFunctionCall",
                                "src": "3301:23:67"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "3326:2:67",
                                "nodeType": "YulLiteral",
                                "src": "3326:2:67",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nativeSrc": "3297:3:67",
                              "nodeType": "YulIdentifier",
                              "src": "3297:3:67"
                            },
                            "nativeSrc": "3297:32:67",
                            "nodeType": "YulFunctionCall",
                            "src": "3297:32:67"
                          },
                          "nativeSrc": "3294:119:67",
                          "nodeType": "YulIf",
                          "src": "3294:119:67"
                        },
                        {
                          "nativeSrc": "3423:117:67",
                          "nodeType": "YulBlock",
                          "src": "3423:117:67",
                          "statements": [
                            {
                              "nativeSrc": "3438:15:67",
                              "nodeType": "YulVariableDeclaration",
                              "src": "3438:15:67",
                              "value": {
                                "kind": "number",
                                "nativeSrc": "3452:1:67",
                                "nodeType": "YulLiteral",
                                "src": "3452:1:67",
                                "type": "",
                                "value": "0"
                              },
                              "variables": [
                                {
                                  "name": "offset",
                                  "nativeSrc": "3442:6:67",
                                  "nodeType": "YulTypedName",
                                  "src": "3442:6:67",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "nativeSrc": "3467:63:67",
                              "nodeType": "YulAssignment",
                              "src": "3467:63:67",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nativeSrc": "3502:9:67",
                                        "nodeType": "YulIdentifier",
                                        "src": "3502:9:67"
                                      },
                                      {
                                        "name": "offset",
                                        "nativeSrc": "3513:6:67",
                                        "nodeType": "YulIdentifier",
                                        "src": "3513:6:67"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "3498:3:67",
                                      "nodeType": "YulIdentifier",
                                      "src": "3498:3:67"
                                    },
                                    "nativeSrc": "3498:22:67",
                                    "nodeType": "YulFunctionCall",
                                    "src": "3498:22:67"
                                  },
                                  {
                                    "name": "dataEnd",
                                    "nativeSrc": "3522:7:67",
                                    "nodeType": "YulIdentifier",
                                    "src": "3522:7:67"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_decode_t_uint256",
                                  "nativeSrc": "3477:20:67",
                                  "nodeType": "YulIdentifier",
                                  "src": "3477:20:67"
                                },
                                "nativeSrc": "3477:53:67",
                                "nodeType": "YulFunctionCall",
                                "src": "3477:53:67"
                              },
                              "variableNames": [
                                {
                                  "name": "value0",
                                  "nativeSrc": "3467:6:67",
                                  "nodeType": "YulIdentifier",
                                  "src": "3467:6:67"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_uint256",
                    "nativeSrc": "3218:329:67",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nativeSrc": "3254:9:67",
                        "nodeType": "YulTypedName",
                        "src": "3254:9:67",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nativeSrc": "3265:7:67",
                        "nodeType": "YulTypedName",
                        "src": "3265:7:67",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nativeSrc": "3277:6:67",
                        "nodeType": "YulTypedName",
                        "src": "3277:6:67",
                        "type": ""
                      }
                    ],
                    "src": "3218:329:67"
                  },
                  {
                    "body": {
                      "nativeSrc": "3598:81:67",
                      "nodeType": "YulBlock",
                      "src": "3598:81:67",
                      "statements": [
                        {
                          "nativeSrc": "3608:65:67",
                          "nodeType": "YulAssignment",
                          "src": "3608:65:67",
                          "value": {
                            "arguments": [
                              {
                                "name": "value",
                                "nativeSrc": "3623:5:67",
                                "nodeType": "YulIdentifier",
                                "src": "3623:5:67"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "3630:42:67",
                                "nodeType": "YulLiteral",
                                "src": "3630:42:67",
                                "type": "",
                                "value": "0xffffffffffffffffffffffffffffffffffffffff"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nativeSrc": "3619:3:67",
                              "nodeType": "YulIdentifier",
                              "src": "3619:3:67"
                            },
                            "nativeSrc": "3619:54:67",
                            "nodeType": "YulFunctionCall",
                            "src": "3619:54:67"
                          },
                          "variableNames": [
                            {
                              "name": "cleaned",
                              "nativeSrc": "3608:7:67",
                              "nodeType": "YulIdentifier",
                              "src": "3608:7:67"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "cleanup_t_uint160",
                    "nativeSrc": "3553:126:67",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nativeSrc": "3580:5:67",
                        "nodeType": "YulTypedName",
                        "src": "3580:5:67",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "cleaned",
                        "nativeSrc": "3590:7:67",
                        "nodeType": "YulTypedName",
                        "src": "3590:7:67",
                        "type": ""
                      }
                    ],
                    "src": "3553:126:67"
                  },
                  {
                    "body": {
                      "nativeSrc": "3730:51:67",
                      "nodeType": "YulBlock",
                      "src": "3730:51:67",
                      "statements": [
                        {
                          "nativeSrc": "3740:35:67",
                          "nodeType": "YulAssignment",
                          "src": "3740:35:67",
                          "value": {
                            "arguments": [
                              {
                                "name": "value",
                                "nativeSrc": "3769:5:67",
                                "nodeType": "YulIdentifier",
                                "src": "3769:5:67"
                              }
                            ],
                            "functionName": {
                              "name": "cleanup_t_uint160",
                              "nativeSrc": "3751:17:67",
                              "nodeType": "YulIdentifier",
                              "src": "3751:17:67"
                            },
                            "nativeSrc": "3751:24:67",
                            "nodeType": "YulFunctionCall",
                            "src": "3751:24:67"
                          },
                          "variableNames": [
                            {
                              "name": "cleaned",
                              "nativeSrc": "3740:7:67",
                              "nodeType": "YulIdentifier",
                              "src": "3740:7:67"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "cleanup_t_address",
                    "nativeSrc": "3685:96:67",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nativeSrc": "3712:5:67",
                        "nodeType": "YulTypedName",
                        "src": "3712:5:67",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "cleaned",
                        "nativeSrc": "3722:7:67",
                        "nodeType": "YulTypedName",
                        "src": "3722:7:67",
                        "type": ""
                      }
                    ],
                    "src": "3685:96:67"
                  },
                  {
                    "body": {
                      "nativeSrc": "3852:53:67",
                      "nodeType": "YulBlock",
                      "src": "3852:53:67",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nativeSrc": "3869:3:67",
                                "nodeType": "YulIdentifier",
                                "src": "3869:3:67"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nativeSrc": "3892:5:67",
                                    "nodeType": "YulIdentifier",
                                    "src": "3892:5:67"
                                  }
                                ],
                                "functionName": {
                                  "name": "cleanup_t_address",
                                  "nativeSrc": "3874:17:67",
                                  "nodeType": "YulIdentifier",
                                  "src": "3874:17:67"
                                },
                                "nativeSrc": "3874:24:67",
                                "nodeType": "YulFunctionCall",
                                "src": "3874:24:67"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nativeSrc": "3862:6:67",
                              "nodeType": "YulIdentifier",
                              "src": "3862:6:67"
                            },
                            "nativeSrc": "3862:37:67",
                            "nodeType": "YulFunctionCall",
                            "src": "3862:37:67"
                          },
                          "nativeSrc": "3862:37:67",
                          "nodeType": "YulExpressionStatement",
                          "src": "3862:37:67"
                        }
                      ]
                    },
                    "name": "abi_encode_t_address_to_t_address_fromStack",
                    "nativeSrc": "3787:118:67",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nativeSrc": "3840:5:67",
                        "nodeType": "YulTypedName",
                        "src": "3840:5:67",
                        "type": ""
                      },
                      {
                        "name": "pos",
                        "nativeSrc": "3847:3:67",
                        "nodeType": "YulTypedName",
                        "src": "3847:3:67",
                        "type": ""
                      }
                    ],
                    "src": "3787:118:67"
                  },
                  {
                    "body": {
                      "nativeSrc": "4009:124:67",
                      "nodeType": "YulBlock",
                      "src": "4009:124:67",
                      "statements": [
                        {
                          "nativeSrc": "4019:26:67",
                          "nodeType": "YulAssignment",
                          "src": "4019:26:67",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nativeSrc": "4031:9:67",
                                "nodeType": "YulIdentifier",
                                "src": "4031:9:67"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "4042:2:67",
                                "nodeType": "YulLiteral",
                                "src": "4042:2:67",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nativeSrc": "4027:3:67",
                              "nodeType": "YulIdentifier",
                              "src": "4027:3:67"
                            },
                            "nativeSrc": "4027:18:67",
                            "nodeType": "YulFunctionCall",
                            "src": "4027:18:67"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nativeSrc": "4019:4:67",
                              "nodeType": "YulIdentifier",
                              "src": "4019:4:67"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value0",
                                "nativeSrc": "4099:6:67",
                                "nodeType": "YulIdentifier",
                                "src": "4099:6:67"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nativeSrc": "4112:9:67",
                                    "nodeType": "YulIdentifier",
                                    "src": "4112:9:67"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "4123:1:67",
                                    "nodeType": "YulLiteral",
                                    "src": "4123:1:67",
                                    "type": "",
                                    "value": "0"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "4108:3:67",
                                  "nodeType": "YulIdentifier",
                                  "src": "4108:3:67"
                                },
                                "nativeSrc": "4108:17:67",
                                "nodeType": "YulFunctionCall",
                                "src": "4108:17:67"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_t_address_to_t_address_fromStack",
                              "nativeSrc": "4055:43:67",
                              "nodeType": "YulIdentifier",
                              "src": "4055:43:67"
                            },
                            "nativeSrc": "4055:71:67",
                            "nodeType": "YulFunctionCall",
                            "src": "4055:71:67"
                          },
                          "nativeSrc": "4055:71:67",
                          "nodeType": "YulExpressionStatement",
                          "src": "4055:71:67"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_address__to_t_address__fromStack_reversed",
                    "nativeSrc": "3911:222:67",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nativeSrc": "3981:9:67",
                        "nodeType": "YulTypedName",
                        "src": "3981:9:67",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nativeSrc": "3993:6:67",
                        "nodeType": "YulTypedName",
                        "src": "3993:6:67",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nativeSrc": "4004:4:67",
                        "nodeType": "YulTypedName",
                        "src": "4004:4:67",
                        "type": ""
                      }
                    ],
                    "src": "3911:222:67"
                  },
                  {
                    "body": {
                      "nativeSrc": "4182:79:67",
                      "nodeType": "YulBlock",
                      "src": "4182:79:67",
                      "statements": [
                        {
                          "body": {
                            "nativeSrc": "4239:16:67",
                            "nodeType": "YulBlock",
                            "src": "4239:16:67",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nativeSrc": "4248:1:67",
                                      "nodeType": "YulLiteral",
                                      "src": "4248:1:67",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nativeSrc": "4251:1:67",
                                      "nodeType": "YulLiteral",
                                      "src": "4251:1:67",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nativeSrc": "4241:6:67",
                                    "nodeType": "YulIdentifier",
                                    "src": "4241:6:67"
                                  },
                                  "nativeSrc": "4241:12:67",
                                  "nodeType": "YulFunctionCall",
                                  "src": "4241:12:67"
                                },
                                "nativeSrc": "4241:12:67",
                                "nodeType": "YulExpressionStatement",
                                "src": "4241:12:67"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nativeSrc": "4205:5:67",
                                    "nodeType": "YulIdentifier",
                                    "src": "4205:5:67"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "value",
                                        "nativeSrc": "4230:5:67",
                                        "nodeType": "YulIdentifier",
                                        "src": "4230:5:67"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "cleanup_t_address",
                                      "nativeSrc": "4212:17:67",
                                      "nodeType": "YulIdentifier",
                                      "src": "4212:17:67"
                                    },
                                    "nativeSrc": "4212:24:67",
                                    "nodeType": "YulFunctionCall",
                                    "src": "4212:24:67"
                                  }
                                ],
                                "functionName": {
                                  "name": "eq",
                                  "nativeSrc": "4202:2:67",
                                  "nodeType": "YulIdentifier",
                                  "src": "4202:2:67"
                                },
                                "nativeSrc": "4202:35:67",
                                "nodeType": "YulFunctionCall",
                                "src": "4202:35:67"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nativeSrc": "4195:6:67",
                              "nodeType": "YulIdentifier",
                              "src": "4195:6:67"
                            },
                            "nativeSrc": "4195:43:67",
                            "nodeType": "YulFunctionCall",
                            "src": "4195:43:67"
                          },
                          "nativeSrc": "4192:63:67",
                          "nodeType": "YulIf",
                          "src": "4192:63:67"
                        }
                      ]
                    },
                    "name": "validator_revert_t_address",
                    "nativeSrc": "4139:122:67",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nativeSrc": "4175:5:67",
                        "nodeType": "YulTypedName",
                        "src": "4175:5:67",
                        "type": ""
                      }
                    ],
                    "src": "4139:122:67"
                  },
                  {
                    "body": {
                      "nativeSrc": "4319:87:67",
                      "nodeType": "YulBlock",
                      "src": "4319:87:67",
                      "statements": [
                        {
                          "nativeSrc": "4329:29:67",
                          "nodeType": "YulAssignment",
                          "src": "4329:29:67",
                          "value": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nativeSrc": "4351:6:67",
                                "nodeType": "YulIdentifier",
                                "src": "4351:6:67"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nativeSrc": "4338:12:67",
                              "nodeType": "YulIdentifier",
                              "src": "4338:12:67"
                            },
                            "nativeSrc": "4338:20:67",
                            "nodeType": "YulFunctionCall",
                            "src": "4338:20:67"
                          },
                          "variableNames": [
                            {
                              "name": "value",
                              "nativeSrc": "4329:5:67",
                              "nodeType": "YulIdentifier",
                              "src": "4329:5:67"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value",
                                "nativeSrc": "4394:5:67",
                                "nodeType": "YulIdentifier",
                                "src": "4394:5:67"
                              }
                            ],
                            "functionName": {
                              "name": "validator_revert_t_address",
                              "nativeSrc": "4367:26:67",
                              "nodeType": "YulIdentifier",
                              "src": "4367:26:67"
                            },
                            "nativeSrc": "4367:33:67",
                            "nodeType": "YulFunctionCall",
                            "src": "4367:33:67"
                          },
                          "nativeSrc": "4367:33:67",
                          "nodeType": "YulExpressionStatement",
                          "src": "4367:33:67"
                        }
                      ]
                    },
                    "name": "abi_decode_t_address",
                    "nativeSrc": "4267:139:67",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "offset",
                        "nativeSrc": "4297:6:67",
                        "nodeType": "YulTypedName",
                        "src": "4297:6:67",
                        "type": ""
                      },
                      {
                        "name": "end",
                        "nativeSrc": "4305:3:67",
                        "nodeType": "YulTypedName",
                        "src": "4305:3:67",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value",
                        "nativeSrc": "4313:5:67",
                        "nodeType": "YulTypedName",
                        "src": "4313:5:67",
                        "type": ""
                      }
                    ],
                    "src": "4267:139:67"
                  },
                  {
                    "body": {
                      "nativeSrc": "4495:391:67",
                      "nodeType": "YulBlock",
                      "src": "4495:391:67",
                      "statements": [
                        {
                          "body": {
                            "nativeSrc": "4541:83:67",
                            "nodeType": "YulBlock",
                            "src": "4541:83:67",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
                                    "nativeSrc": "4543:77:67",
                                    "nodeType": "YulIdentifier",
                                    "src": "4543:77:67"
                                  },
                                  "nativeSrc": "4543:79:67",
                                  "nodeType": "YulFunctionCall",
                                  "src": "4543:79:67"
                                },
                                "nativeSrc": "4543:79:67",
                                "nodeType": "YulExpressionStatement",
                                "src": "4543:79:67"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nativeSrc": "4516:7:67",
                                    "nodeType": "YulIdentifier",
                                    "src": "4516:7:67"
                                  },
                                  {
                                    "name": "headStart",
                                    "nativeSrc": "4525:9:67",
                                    "nodeType": "YulIdentifier",
                                    "src": "4525:9:67"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nativeSrc": "4512:3:67",
                                  "nodeType": "YulIdentifier",
                                  "src": "4512:3:67"
                                },
                                "nativeSrc": "4512:23:67",
                                "nodeType": "YulFunctionCall",
                                "src": "4512:23:67"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "4537:2:67",
                                "nodeType": "YulLiteral",
                                "src": "4537:2:67",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nativeSrc": "4508:3:67",
                              "nodeType": "YulIdentifier",
                              "src": "4508:3:67"
                            },
                            "nativeSrc": "4508:32:67",
                            "nodeType": "YulFunctionCall",
                            "src": "4508:32:67"
                          },
                          "nativeSrc": "4505:119:67",
                          "nodeType": "YulIf",
                          "src": "4505:119:67"
                        },
                        {
                          "nativeSrc": "4634:117:67",
                          "nodeType": "YulBlock",
                          "src": "4634:117:67",
                          "statements": [
                            {
                              "nativeSrc": "4649:15:67",
                              "nodeType": "YulVariableDeclaration",
                              "src": "4649:15:67",
                              "value": {
                                "kind": "number",
                                "nativeSrc": "4663:1:67",
                                "nodeType": "YulLiteral",
                                "src": "4663:1:67",
                                "type": "",
                                "value": "0"
                              },
                              "variables": [
                                {
                                  "name": "offset",
                                  "nativeSrc": "4653:6:67",
                                  "nodeType": "YulTypedName",
                                  "src": "4653:6:67",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "nativeSrc": "4678:63:67",
                              "nodeType": "YulAssignment",
                              "src": "4678:63:67",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nativeSrc": "4713:9:67",
                                        "nodeType": "YulIdentifier",
                                        "src": "4713:9:67"
                                      },
                                      {
                                        "name": "offset",
                                        "nativeSrc": "4724:6:67",
                                        "nodeType": "YulIdentifier",
                                        "src": "4724:6:67"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "4709:3:67",
                                      "nodeType": "YulIdentifier",
                                      "src": "4709:3:67"
                                    },
                                    "nativeSrc": "4709:22:67",
                                    "nodeType": "YulFunctionCall",
                                    "src": "4709:22:67"
                                  },
                                  {
                                    "name": "dataEnd",
                                    "nativeSrc": "4733:7:67",
                                    "nodeType": "YulIdentifier",
                                    "src": "4733:7:67"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_decode_t_address",
                                  "nativeSrc": "4688:20:67",
                                  "nodeType": "YulIdentifier",
                                  "src": "4688:20:67"
                                },
                                "nativeSrc": "4688:53:67",
                                "nodeType": "YulFunctionCall",
                                "src": "4688:53:67"
                              },
                              "variableNames": [
                                {
                                  "name": "value0",
                                  "nativeSrc": "4678:6:67",
                                  "nodeType": "YulIdentifier",
                                  "src": "4678:6:67"
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "nativeSrc": "4761:118:67",
                          "nodeType": "YulBlock",
                          "src": "4761:118:67",
                          "statements": [
                            {
                              "nativeSrc": "4776:16:67",
                              "nodeType": "YulVariableDeclaration",
                              "src": "4776:16:67",
                              "value": {
                                "kind": "number",
                                "nativeSrc": "4790:2:67",
                                "nodeType": "YulLiteral",
                                "src": "4790:2:67",
                                "type": "",
                                "value": "32"
                              },
                              "variables": [
                                {
                                  "name": "offset",
                                  "nativeSrc": "4780:6:67",
                                  "nodeType": "YulTypedName",
                                  "src": "4780:6:67",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "nativeSrc": "4806:63:67",
                              "nodeType": "YulAssignment",
                              "src": "4806:63:67",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nativeSrc": "4841:9:67",
                                        "nodeType": "YulIdentifier",
                                        "src": "4841:9:67"
                                      },
                                      {
                                        "name": "offset",
                                        "nativeSrc": "4852:6:67",
                                        "nodeType": "YulIdentifier",
                                        "src": "4852:6:67"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "4837:3:67",
                                      "nodeType": "YulIdentifier",
                                      "src": "4837:3:67"
                                    },
                                    "nativeSrc": "4837:22:67",
                                    "nodeType": "YulFunctionCall",
                                    "src": "4837:22:67"
                                  },
                                  {
                                    "name": "dataEnd",
                                    "nativeSrc": "4861:7:67",
                                    "nodeType": "YulIdentifier",
                                    "src": "4861:7:67"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_decode_t_uint256",
                                  "nativeSrc": "4816:20:67",
                                  "nodeType": "YulIdentifier",
                                  "src": "4816:20:67"
                                },
                                "nativeSrc": "4816:53:67",
                                "nodeType": "YulFunctionCall",
                                "src": "4816:53:67"
                              },
                              "variableNames": [
                                {
                                  "name": "value1",
                                  "nativeSrc": "4806:6:67",
                                  "nodeType": "YulIdentifier",
                                  "src": "4806:6:67"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_addresst_uint256",
                    "nativeSrc": "4412:474:67",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nativeSrc": "4457:9:67",
                        "nodeType": "YulTypedName",
                        "src": "4457:9:67",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nativeSrc": "4468:7:67",
                        "nodeType": "YulTypedName",
                        "src": "4468:7:67",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nativeSrc": "4480:6:67",
                        "nodeType": "YulTypedName",
                        "src": "4480:6:67",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nativeSrc": "4488:6:67",
                        "nodeType": "YulTypedName",
                        "src": "4488:6:67",
                        "type": ""
                      }
                    ],
                    "src": "4412:474:67"
                  },
                  {
                    "body": {
                      "nativeSrc": "4957:53:67",
                      "nodeType": "YulBlock",
                      "src": "4957:53:67",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nativeSrc": "4974:3:67",
                                "nodeType": "YulIdentifier",
                                "src": "4974:3:67"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nativeSrc": "4997:5:67",
                                    "nodeType": "YulIdentifier",
                                    "src": "4997:5:67"
                                  }
                                ],
                                "functionName": {
                                  "name": "cleanup_t_uint256",
                                  "nativeSrc": "4979:17:67",
                                  "nodeType": "YulIdentifier",
                                  "src": "4979:17:67"
                                },
                                "nativeSrc": "4979:24:67",
                                "nodeType": "YulFunctionCall",
                                "src": "4979:24:67"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nativeSrc": "4967:6:67",
                              "nodeType": "YulIdentifier",
                              "src": "4967:6:67"
                            },
                            "nativeSrc": "4967:37:67",
                            "nodeType": "YulFunctionCall",
                            "src": "4967:37:67"
                          },
                          "nativeSrc": "4967:37:67",
                          "nodeType": "YulExpressionStatement",
                          "src": "4967:37:67"
                        }
                      ]
                    },
                    "name": "abi_encode_t_uint256_to_t_uint256_fromStack",
                    "nativeSrc": "4892:118:67",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nativeSrc": "4945:5:67",
                        "nodeType": "YulTypedName",
                        "src": "4945:5:67",
                        "type": ""
                      },
                      {
                        "name": "pos",
                        "nativeSrc": "4952:3:67",
                        "nodeType": "YulTypedName",
                        "src": "4952:3:67",
                        "type": ""
                      }
                    ],
                    "src": "4892:118:67"
                  },
                  {
                    "body": {
                      "nativeSrc": "5114:124:67",
                      "nodeType": "YulBlock",
                      "src": "5114:124:67",
                      "statements": [
                        {
                          "nativeSrc": "5124:26:67",
                          "nodeType": "YulAssignment",
                          "src": "5124:26:67",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nativeSrc": "5136:9:67",
                                "nodeType": "YulIdentifier",
                                "src": "5136:9:67"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "5147:2:67",
                                "nodeType": "YulLiteral",
                                "src": "5147:2:67",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nativeSrc": "5132:3:67",
                              "nodeType": "YulIdentifier",
                              "src": "5132:3:67"
                            },
                            "nativeSrc": "5132:18:67",
                            "nodeType": "YulFunctionCall",
                            "src": "5132:18:67"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nativeSrc": "5124:4:67",
                              "nodeType": "YulIdentifier",
                              "src": "5124:4:67"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value0",
                                "nativeSrc": "5204:6:67",
                                "nodeType": "YulIdentifier",
                                "src": "5204:6:67"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nativeSrc": "5217:9:67",
                                    "nodeType": "YulIdentifier",
                                    "src": "5217:9:67"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "5228:1:67",
                                    "nodeType": "YulLiteral",
                                    "src": "5228:1:67",
                                    "type": "",
                                    "value": "0"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "5213:3:67",
                                  "nodeType": "YulIdentifier",
                                  "src": "5213:3:67"
                                },
                                "nativeSrc": "5213:17:67",
                                "nodeType": "YulFunctionCall",
                                "src": "5213:17:67"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_t_uint256_to_t_uint256_fromStack",
                              "nativeSrc": "5160:43:67",
                              "nodeType": "YulIdentifier",
                              "src": "5160:43:67"
                            },
                            "nativeSrc": "5160:71:67",
                            "nodeType": "YulFunctionCall",
                            "src": "5160:71:67"
                          },
                          "nativeSrc": "5160:71:67",
                          "nodeType": "YulExpressionStatement",
                          "src": "5160:71:67"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed",
                    "nativeSrc": "5016:222:67",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nativeSrc": "5086:9:67",
                        "nodeType": "YulTypedName",
                        "src": "5086:9:67",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nativeSrc": "5098:6:67",
                        "nodeType": "YulTypedName",
                        "src": "5098:6:67",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nativeSrc": "5109:4:67",
                        "nodeType": "YulTypedName",
                        "src": "5109:4:67",
                        "type": ""
                      }
                    ],
                    "src": "5016:222:67"
                  },
                  {
                    "body": {
                      "nativeSrc": "5344:519:67",
                      "nodeType": "YulBlock",
                      "src": "5344:519:67",
                      "statements": [
                        {
                          "body": {
                            "nativeSrc": "5390:83:67",
                            "nodeType": "YulBlock",
                            "src": "5390:83:67",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
                                    "nativeSrc": "5392:77:67",
                                    "nodeType": "YulIdentifier",
                                    "src": "5392:77:67"
                                  },
                                  "nativeSrc": "5392:79:67",
                                  "nodeType": "YulFunctionCall",
                                  "src": "5392:79:67"
                                },
                                "nativeSrc": "5392:79:67",
                                "nodeType": "YulExpressionStatement",
                                "src": "5392:79:67"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nativeSrc": "5365:7:67",
                                    "nodeType": "YulIdentifier",
                                    "src": "5365:7:67"
                                  },
                                  {
                                    "name": "headStart",
                                    "nativeSrc": "5374:9:67",
                                    "nodeType": "YulIdentifier",
                                    "src": "5374:9:67"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nativeSrc": "5361:3:67",
                                  "nodeType": "YulIdentifier",
                                  "src": "5361:3:67"
                                },
                                "nativeSrc": "5361:23:67",
                                "nodeType": "YulFunctionCall",
                                "src": "5361:23:67"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "5386:2:67",
                                "nodeType": "YulLiteral",
                                "src": "5386:2:67",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nativeSrc": "5357:3:67",
                              "nodeType": "YulIdentifier",
                              "src": "5357:3:67"
                            },
                            "nativeSrc": "5357:32:67",
                            "nodeType": "YulFunctionCall",
                            "src": "5357:32:67"
                          },
                          "nativeSrc": "5354:119:67",
                          "nodeType": "YulIf",
                          "src": "5354:119:67"
                        },
                        {
                          "nativeSrc": "5483:117:67",
                          "nodeType": "YulBlock",
                          "src": "5483:117:67",
                          "statements": [
                            {
                              "nativeSrc": "5498:15:67",
                              "nodeType": "YulVariableDeclaration",
                              "src": "5498:15:67",
                              "value": {
                                "kind": "number",
                                "nativeSrc": "5512:1:67",
                                "nodeType": "YulLiteral",
                                "src": "5512:1:67",
                                "type": "",
                                "value": "0"
                              },
                              "variables": [
                                {
                                  "name": "offset",
                                  "nativeSrc": "5502:6:67",
                                  "nodeType": "YulTypedName",
                                  "src": "5502:6:67",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "nativeSrc": "5527:63:67",
                              "nodeType": "YulAssignment",
                              "src": "5527:63:67",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nativeSrc": "5562:9:67",
                                        "nodeType": "YulIdentifier",
                                        "src": "5562:9:67"
                                      },
                                      {
                                        "name": "offset",
                                        "nativeSrc": "5573:6:67",
                                        "nodeType": "YulIdentifier",
                                        "src": "5573:6:67"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "5558:3:67",
                                      "nodeType": "YulIdentifier",
                                      "src": "5558:3:67"
                                    },
                                    "nativeSrc": "5558:22:67",
                                    "nodeType": "YulFunctionCall",
                                    "src": "5558:22:67"
                                  },
                                  {
                                    "name": "dataEnd",
                                    "nativeSrc": "5582:7:67",
                                    "nodeType": "YulIdentifier",
                                    "src": "5582:7:67"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_decode_t_address",
                                  "nativeSrc": "5537:20:67",
                                  "nodeType": "YulIdentifier",
                                  "src": "5537:20:67"
                                },
                                "nativeSrc": "5537:53:67",
                                "nodeType": "YulFunctionCall",
                                "src": "5537:53:67"
                              },
                              "variableNames": [
                                {
                                  "name": "value0",
                                  "nativeSrc": "5527:6:67",
                                  "nodeType": "YulIdentifier",
                                  "src": "5527:6:67"
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "nativeSrc": "5610:118:67",
                          "nodeType": "YulBlock",
                          "src": "5610:118:67",
                          "statements": [
                            {
                              "nativeSrc": "5625:16:67",
                              "nodeType": "YulVariableDeclaration",
                              "src": "5625:16:67",
                              "value": {
                                "kind": "number",
                                "nativeSrc": "5639:2:67",
                                "nodeType": "YulLiteral",
                                "src": "5639:2:67",
                                "type": "",
                                "value": "32"
                              },
                              "variables": [
                                {
                                  "name": "offset",
                                  "nativeSrc": "5629:6:67",
                                  "nodeType": "YulTypedName",
                                  "src": "5629:6:67",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "nativeSrc": "5655:63:67",
                              "nodeType": "YulAssignment",
                              "src": "5655:63:67",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nativeSrc": "5690:9:67",
                                        "nodeType": "YulIdentifier",
                                        "src": "5690:9:67"
                                      },
                                      {
                                        "name": "offset",
                                        "nativeSrc": "5701:6:67",
                                        "nodeType": "YulIdentifier",
                                        "src": "5701:6:67"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "5686:3:67",
                                      "nodeType": "YulIdentifier",
                                      "src": "5686:3:67"
                                    },
                                    "nativeSrc": "5686:22:67",
                                    "nodeType": "YulFunctionCall",
                                    "src": "5686:22:67"
                                  },
                                  {
                                    "name": "dataEnd",
                                    "nativeSrc": "5710:7:67",
                                    "nodeType": "YulIdentifier",
                                    "src": "5710:7:67"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_decode_t_address",
                                  "nativeSrc": "5665:20:67",
                                  "nodeType": "YulIdentifier",
                                  "src": "5665:20:67"
                                },
                                "nativeSrc": "5665:53:67",
                                "nodeType": "YulFunctionCall",
                                "src": "5665:53:67"
                              },
                              "variableNames": [
                                {
                                  "name": "value1",
                                  "nativeSrc": "5655:6:67",
                                  "nodeType": "YulIdentifier",
                                  "src": "5655:6:67"
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "nativeSrc": "5738:118:67",
                          "nodeType": "YulBlock",
                          "src": "5738:118:67",
                          "statements": [
                            {
                              "nativeSrc": "5753:16:67",
                              "nodeType": "YulVariableDeclaration",
                              "src": "5753:16:67",
                              "value": {
                                "kind": "number",
                                "nativeSrc": "5767:2:67",
                                "nodeType": "YulLiteral",
                                "src": "5767:2:67",
                                "type": "",
                                "value": "64"
                              },
                              "variables": [
                                {
                                  "name": "offset",
                                  "nativeSrc": "5757:6:67",
                                  "nodeType": "YulTypedName",
                                  "src": "5757:6:67",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "nativeSrc": "5783:63:67",
                              "nodeType": "YulAssignment",
                              "src": "5783:63:67",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nativeSrc": "5818:9:67",
                                        "nodeType": "YulIdentifier",
                                        "src": "5818:9:67"
                                      },
                                      {
                                        "name": "offset",
                                        "nativeSrc": "5829:6:67",
                                        "nodeType": "YulIdentifier",
                                        "src": "5829:6:67"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "5814:3:67",
                                      "nodeType": "YulIdentifier",
                                      "src": "5814:3:67"
                                    },
                                    "nativeSrc": "5814:22:67",
                                    "nodeType": "YulFunctionCall",
                                    "src": "5814:22:67"
                                  },
                                  {
                                    "name": "dataEnd",
                                    "nativeSrc": "5838:7:67",
                                    "nodeType": "YulIdentifier",
                                    "src": "5838:7:67"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_decode_t_uint256",
                                  "nativeSrc": "5793:20:67",
                                  "nodeType": "YulIdentifier",
                                  "src": "5793:20:67"
                                },
                                "nativeSrc": "5793:53:67",
                                "nodeType": "YulFunctionCall",
                                "src": "5793:53:67"
                              },
                              "variableNames": [
                                {
                                  "name": "value2",
                                  "nativeSrc": "5783:6:67",
                                  "nodeType": "YulIdentifier",
                                  "src": "5783:6:67"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_addresst_addresst_uint256",
                    "nativeSrc": "5244:619:67",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nativeSrc": "5298:9:67",
                        "nodeType": "YulTypedName",
                        "src": "5298:9:67",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nativeSrc": "5309:7:67",
                        "nodeType": "YulTypedName",
                        "src": "5309:7:67",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nativeSrc": "5321:6:67",
                        "nodeType": "YulTypedName",
                        "src": "5321:6:67",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nativeSrc": "5329:6:67",
                        "nodeType": "YulTypedName",
                        "src": "5329:6:67",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nativeSrc": "5337:6:67",
                        "nodeType": "YulTypedName",
                        "src": "5337:6:67",
                        "type": ""
                      }
                    ],
                    "src": "5244:619:67"
                  },
                  {
                    "body": {
                      "nativeSrc": "5935:263:67",
                      "nodeType": "YulBlock",
                      "src": "5935:263:67",
                      "statements": [
                        {
                          "body": {
                            "nativeSrc": "5981:83:67",
                            "nodeType": "YulBlock",
                            "src": "5981:83:67",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
                                    "nativeSrc": "5983:77:67",
                                    "nodeType": "YulIdentifier",
                                    "src": "5983:77:67"
                                  },
                                  "nativeSrc": "5983:79:67",
                                  "nodeType": "YulFunctionCall",
                                  "src": "5983:79:67"
                                },
                                "nativeSrc": "5983:79:67",
                                "nodeType": "YulExpressionStatement",
                                "src": "5983:79:67"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nativeSrc": "5956:7:67",
                                    "nodeType": "YulIdentifier",
                                    "src": "5956:7:67"
                                  },
                                  {
                                    "name": "headStart",
                                    "nativeSrc": "5965:9:67",
                                    "nodeType": "YulIdentifier",
                                    "src": "5965:9:67"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nativeSrc": "5952:3:67",
                                  "nodeType": "YulIdentifier",
                                  "src": "5952:3:67"
                                },
                                "nativeSrc": "5952:23:67",
                                "nodeType": "YulFunctionCall",
                                "src": "5952:23:67"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "5977:2:67",
                                "nodeType": "YulLiteral",
                                "src": "5977:2:67",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nativeSrc": "5948:3:67",
                              "nodeType": "YulIdentifier",
                              "src": "5948:3:67"
                            },
                            "nativeSrc": "5948:32:67",
                            "nodeType": "YulFunctionCall",
                            "src": "5948:32:67"
                          },
                          "nativeSrc": "5945:119:67",
                          "nodeType": "YulIf",
                          "src": "5945:119:67"
                        },
                        {
                          "nativeSrc": "6074:117:67",
                          "nodeType": "YulBlock",
                          "src": "6074:117:67",
                          "statements": [
                            {
                              "nativeSrc": "6089:15:67",
                              "nodeType": "YulVariableDeclaration",
                              "src": "6089:15:67",
                              "value": {
                                "kind": "number",
                                "nativeSrc": "6103:1:67",
                                "nodeType": "YulLiteral",
                                "src": "6103:1:67",
                                "type": "",
                                "value": "0"
                              },
                              "variables": [
                                {
                                  "name": "offset",
                                  "nativeSrc": "6093:6:67",
                                  "nodeType": "YulTypedName",
                                  "src": "6093:6:67",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "nativeSrc": "6118:63:67",
                              "nodeType": "YulAssignment",
                              "src": "6118:63:67",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nativeSrc": "6153:9:67",
                                        "nodeType": "YulIdentifier",
                                        "src": "6153:9:67"
                                      },
                                      {
                                        "name": "offset",
                                        "nativeSrc": "6164:6:67",
                                        "nodeType": "YulIdentifier",
                                        "src": "6164:6:67"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "6149:3:67",
                                      "nodeType": "YulIdentifier",
                                      "src": "6149:3:67"
                                    },
                                    "nativeSrc": "6149:22:67",
                                    "nodeType": "YulFunctionCall",
                                    "src": "6149:22:67"
                                  },
                                  {
                                    "name": "dataEnd",
                                    "nativeSrc": "6173:7:67",
                                    "nodeType": "YulIdentifier",
                                    "src": "6173:7:67"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_decode_t_address",
                                  "nativeSrc": "6128:20:67",
                                  "nodeType": "YulIdentifier",
                                  "src": "6128:20:67"
                                },
                                "nativeSrc": "6128:53:67",
                                "nodeType": "YulFunctionCall",
                                "src": "6128:53:67"
                              },
                              "variableNames": [
                                {
                                  "name": "value0",
                                  "nativeSrc": "6118:6:67",
                                  "nodeType": "YulIdentifier",
                                  "src": "6118:6:67"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_address",
                    "nativeSrc": "5869:329:67",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nativeSrc": "5905:9:67",
                        "nodeType": "YulTypedName",
                        "src": "5905:9:67",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nativeSrc": "5916:7:67",
                        "nodeType": "YulTypedName",
                        "src": "5916:7:67",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nativeSrc": "5928:6:67",
                        "nodeType": "YulTypedName",
                        "src": "5928:6:67",
                        "type": ""
                      }
                    ],
                    "src": "5869:329:67"
                  },
                  {
                    "body": {
                      "nativeSrc": "6244:76:67",
                      "nodeType": "YulBlock",
                      "src": "6244:76:67",
                      "statements": [
                        {
                          "body": {
                            "nativeSrc": "6298:16:67",
                            "nodeType": "YulBlock",
                            "src": "6298:16:67",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nativeSrc": "6307:1:67",
                                      "nodeType": "YulLiteral",
                                      "src": "6307:1:67",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nativeSrc": "6310:1:67",
                                      "nodeType": "YulLiteral",
                                      "src": "6310:1:67",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nativeSrc": "6300:6:67",
                                    "nodeType": "YulIdentifier",
                                    "src": "6300:6:67"
                                  },
                                  "nativeSrc": "6300:12:67",
                                  "nodeType": "YulFunctionCall",
                                  "src": "6300:12:67"
                                },
                                "nativeSrc": "6300:12:67",
                                "nodeType": "YulExpressionStatement",
                                "src": "6300:12:67"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nativeSrc": "6267:5:67",
                                    "nodeType": "YulIdentifier",
                                    "src": "6267:5:67"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "value",
                                        "nativeSrc": "6289:5:67",
                                        "nodeType": "YulIdentifier",
                                        "src": "6289:5:67"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "cleanup_t_bool",
                                      "nativeSrc": "6274:14:67",
                                      "nodeType": "YulIdentifier",
                                      "src": "6274:14:67"
                                    },
                                    "nativeSrc": "6274:21:67",
                                    "nodeType": "YulFunctionCall",
                                    "src": "6274:21:67"
                                  }
                                ],
                                "functionName": {
                                  "name": "eq",
                                  "nativeSrc": "6264:2:67",
                                  "nodeType": "YulIdentifier",
                                  "src": "6264:2:67"
                                },
                                "nativeSrc": "6264:32:67",
                                "nodeType": "YulFunctionCall",
                                "src": "6264:32:67"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nativeSrc": "6257:6:67",
                              "nodeType": "YulIdentifier",
                              "src": "6257:6:67"
                            },
                            "nativeSrc": "6257:40:67",
                            "nodeType": "YulFunctionCall",
                            "src": "6257:40:67"
                          },
                          "nativeSrc": "6254:60:67",
                          "nodeType": "YulIf",
                          "src": "6254:60:67"
                        }
                      ]
                    },
                    "name": "validator_revert_t_bool",
                    "nativeSrc": "6204:116:67",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nativeSrc": "6237:5:67",
                        "nodeType": "YulTypedName",
                        "src": "6237:5:67",
                        "type": ""
                      }
                    ],
                    "src": "6204:116:67"
                  },
                  {
                    "body": {
                      "nativeSrc": "6375:84:67",
                      "nodeType": "YulBlock",
                      "src": "6375:84:67",
                      "statements": [
                        {
                          "nativeSrc": "6385:29:67",
                          "nodeType": "YulAssignment",
                          "src": "6385:29:67",
                          "value": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nativeSrc": "6407:6:67",
                                "nodeType": "YulIdentifier",
                                "src": "6407:6:67"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nativeSrc": "6394:12:67",
                              "nodeType": "YulIdentifier",
                              "src": "6394:12:67"
                            },
                            "nativeSrc": "6394:20:67",
                            "nodeType": "YulFunctionCall",
                            "src": "6394:20:67"
                          },
                          "variableNames": [
                            {
                              "name": "value",
                              "nativeSrc": "6385:5:67",
                              "nodeType": "YulIdentifier",
                              "src": "6385:5:67"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value",
                                "nativeSrc": "6447:5:67",
                                "nodeType": "YulIdentifier",
                                "src": "6447:5:67"
                              }
                            ],
                            "functionName": {
                              "name": "validator_revert_t_bool",
                              "nativeSrc": "6423:23:67",
                              "nodeType": "YulIdentifier",
                              "src": "6423:23:67"
                            },
                            "nativeSrc": "6423:30:67",
                            "nodeType": "YulFunctionCall",
                            "src": "6423:30:67"
                          },
                          "nativeSrc": "6423:30:67",
                          "nodeType": "YulExpressionStatement",
                          "src": "6423:30:67"
                        }
                      ]
                    },
                    "name": "abi_decode_t_bool",
                    "nativeSrc": "6326:133:67",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "offset",
                        "nativeSrc": "6353:6:67",
                        "nodeType": "YulTypedName",
                        "src": "6353:6:67",
                        "type": ""
                      },
                      {
                        "name": "end",
                        "nativeSrc": "6361:3:67",
                        "nodeType": "YulTypedName",
                        "src": "6361:3:67",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value",
                        "nativeSrc": "6369:5:67",
                        "nodeType": "YulTypedName",
                        "src": "6369:5:67",
                        "type": ""
                      }
                    ],
                    "src": "6326:133:67"
                  },
                  {
                    "body": {
                      "nativeSrc": "6545:388:67",
                      "nodeType": "YulBlock",
                      "src": "6545:388:67",
                      "statements": [
                        {
                          "body": {
                            "nativeSrc": "6591:83:67",
                            "nodeType": "YulBlock",
                            "src": "6591:83:67",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
                                    "nativeSrc": "6593:77:67",
                                    "nodeType": "YulIdentifier",
                                    "src": "6593:77:67"
                                  },
                                  "nativeSrc": "6593:79:67",
                                  "nodeType": "YulFunctionCall",
                                  "src": "6593:79:67"
                                },
                                "nativeSrc": "6593:79:67",
                                "nodeType": "YulExpressionStatement",
                                "src": "6593:79:67"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nativeSrc": "6566:7:67",
                                    "nodeType": "YulIdentifier",
                                    "src": "6566:7:67"
                                  },
                                  {
                                    "name": "headStart",
                                    "nativeSrc": "6575:9:67",
                                    "nodeType": "YulIdentifier",
                                    "src": "6575:9:67"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nativeSrc": "6562:3:67",
                                  "nodeType": "YulIdentifier",
                                  "src": "6562:3:67"
                                },
                                "nativeSrc": "6562:23:67",
                                "nodeType": "YulFunctionCall",
                                "src": "6562:23:67"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "6587:2:67",
                                "nodeType": "YulLiteral",
                                "src": "6587:2:67",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nativeSrc": "6558:3:67",
                              "nodeType": "YulIdentifier",
                              "src": "6558:3:67"
                            },
                            "nativeSrc": "6558:32:67",
                            "nodeType": "YulFunctionCall",
                            "src": "6558:32:67"
                          },
                          "nativeSrc": "6555:119:67",
                          "nodeType": "YulIf",
                          "src": "6555:119:67"
                        },
                        {
                          "nativeSrc": "6684:117:67",
                          "nodeType": "YulBlock",
                          "src": "6684:117:67",
                          "statements": [
                            {
                              "nativeSrc": "6699:15:67",
                              "nodeType": "YulVariableDeclaration",
                              "src": "6699:15:67",
                              "value": {
                                "kind": "number",
                                "nativeSrc": "6713:1:67",
                                "nodeType": "YulLiteral",
                                "src": "6713:1:67",
                                "type": "",
                                "value": "0"
                              },
                              "variables": [
                                {
                                  "name": "offset",
                                  "nativeSrc": "6703:6:67",
                                  "nodeType": "YulTypedName",
                                  "src": "6703:6:67",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "nativeSrc": "6728:63:67",
                              "nodeType": "YulAssignment",
                              "src": "6728:63:67",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nativeSrc": "6763:9:67",
                                        "nodeType": "YulIdentifier",
                                        "src": "6763:9:67"
                                      },
                                      {
                                        "name": "offset",
                                        "nativeSrc": "6774:6:67",
                                        "nodeType": "YulIdentifier",
                                        "src": "6774:6:67"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "6759:3:67",
                                      "nodeType": "YulIdentifier",
                                      "src": "6759:3:67"
                                    },
                                    "nativeSrc": "6759:22:67",
                                    "nodeType": "YulFunctionCall",
                                    "src": "6759:22:67"
                                  },
                                  {
                                    "name": "dataEnd",
                                    "nativeSrc": "6783:7:67",
                                    "nodeType": "YulIdentifier",
                                    "src": "6783:7:67"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_decode_t_address",
                                  "nativeSrc": "6738:20:67",
                                  "nodeType": "YulIdentifier",
                                  "src": "6738:20:67"
                                },
                                "nativeSrc": "6738:53:67",
                                "nodeType": "YulFunctionCall",
                                "src": "6738:53:67"
                              },
                              "variableNames": [
                                {
                                  "name": "value0",
                                  "nativeSrc": "6728:6:67",
                                  "nodeType": "YulIdentifier",
                                  "src": "6728:6:67"
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "nativeSrc": "6811:115:67",
                          "nodeType": "YulBlock",
                          "src": "6811:115:67",
                          "statements": [
                            {
                              "nativeSrc": "6826:16:67",
                              "nodeType": "YulVariableDeclaration",
                              "src": "6826:16:67",
                              "value": {
                                "kind": "number",
                                "nativeSrc": "6840:2:67",
                                "nodeType": "YulLiteral",
                                "src": "6840:2:67",
                                "type": "",
                                "value": "32"
                              },
                              "variables": [
                                {
                                  "name": "offset",
                                  "nativeSrc": "6830:6:67",
                                  "nodeType": "YulTypedName",
                                  "src": "6830:6:67",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "nativeSrc": "6856:60:67",
                              "nodeType": "YulAssignment",
                              "src": "6856:60:67",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nativeSrc": "6888:9:67",
                                        "nodeType": "YulIdentifier",
                                        "src": "6888:9:67"
                                      },
                                      {
                                        "name": "offset",
                                        "nativeSrc": "6899:6:67",
                                        "nodeType": "YulIdentifier",
                                        "src": "6899:6:67"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "6884:3:67",
                                      "nodeType": "YulIdentifier",
                                      "src": "6884:3:67"
                                    },
                                    "nativeSrc": "6884:22:67",
                                    "nodeType": "YulFunctionCall",
                                    "src": "6884:22:67"
                                  },
                                  {
                                    "name": "dataEnd",
                                    "nativeSrc": "6908:7:67",
                                    "nodeType": "YulIdentifier",
                                    "src": "6908:7:67"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_decode_t_bool",
                                  "nativeSrc": "6866:17:67",
                                  "nodeType": "YulIdentifier",
                                  "src": "6866:17:67"
                                },
                                "nativeSrc": "6866:50:67",
                                "nodeType": "YulFunctionCall",
                                "src": "6866:50:67"
                              },
                              "variableNames": [
                                {
                                  "name": "value1",
                                  "nativeSrc": "6856:6:67",
                                  "nodeType": "YulIdentifier",
                                  "src": "6856:6:67"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_addresst_bool",
                    "nativeSrc": "6465:468:67",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nativeSrc": "6507:9:67",
                        "nodeType": "YulTypedName",
                        "src": "6507:9:67",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nativeSrc": "6518:7:67",
                        "nodeType": "YulTypedName",
                        "src": "6518:7:67",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nativeSrc": "6530:6:67",
                        "nodeType": "YulTypedName",
                        "src": "6530:6:67",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nativeSrc": "6538:6:67",
                        "nodeType": "YulTypedName",
                        "src": "6538:6:67",
                        "type": ""
                      }
                    ],
                    "src": "6465:468:67"
                  },
                  {
                    "body": {
                      "nativeSrc": "7028:28:67",
                      "nodeType": "YulBlock",
                      "src": "7028:28:67",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nativeSrc": "7045:1:67",
                                "nodeType": "YulLiteral",
                                "src": "7045:1:67",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "7048:1:67",
                                "nodeType": "YulLiteral",
                                "src": "7048:1:67",
                                "type": "",
                                "value": "0"
                              }
                            ],
                            "functionName": {
                              "name": "revert",
                              "nativeSrc": "7038:6:67",
                              "nodeType": "YulIdentifier",
                              "src": "7038:6:67"
                            },
                            "nativeSrc": "7038:12:67",
                            "nodeType": "YulFunctionCall",
                            "src": "7038:12:67"
                          },
                          "nativeSrc": "7038:12:67",
                          "nodeType": "YulExpressionStatement",
                          "src": "7038:12:67"
                        }
                      ]
                    },
                    "name": "revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d",
                    "nativeSrc": "6939:117:67",
                    "nodeType": "YulFunctionDefinition",
                    "src": "6939:117:67"
                  },
                  {
                    "body": {
                      "nativeSrc": "7151:28:67",
                      "nodeType": "YulBlock",
                      "src": "7151:28:67",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nativeSrc": "7168:1:67",
                                "nodeType": "YulLiteral",
                                "src": "7168:1:67",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "7171:1:67",
                                "nodeType": "YulLiteral",
                                "src": "7171:1:67",
                                "type": "",
                                "value": "0"
                              }
                            ],
                            "functionName": {
                              "name": "revert",
                              "nativeSrc": "7161:6:67",
                              "nodeType": "YulIdentifier",
                              "src": "7161:6:67"
                            },
                            "nativeSrc": "7161:12:67",
                            "nodeType": "YulFunctionCall",
                            "src": "7161:12:67"
                          },
                          "nativeSrc": "7161:12:67",
                          "nodeType": "YulExpressionStatement",
                          "src": "7161:12:67"
                        }
                      ]
                    },
                    "name": "revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae",
                    "nativeSrc": "7062:117:67",
                    "nodeType": "YulFunctionDefinition",
                    "src": "7062:117:67"
                  },
                  {
                    "body": {
                      "nativeSrc": "7213:152:67",
                      "nodeType": "YulBlock",
                      "src": "7213:152:67",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nativeSrc": "7230:1:67",
                                "nodeType": "YulLiteral",
                                "src": "7230:1:67",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "7233:77:67",
                                "nodeType": "YulLiteral",
                                "src": "7233:77:67",
                                "type": "",
                                "value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nativeSrc": "7223:6:67",
                              "nodeType": "YulIdentifier",
                              "src": "7223:6:67"
                            },
                            "nativeSrc": "7223:88:67",
                            "nodeType": "YulFunctionCall",
                            "src": "7223:88:67"
                          },
                          "nativeSrc": "7223:88:67",
                          "nodeType": "YulExpressionStatement",
                          "src": "7223:88:67"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nativeSrc": "7327:1:67",
                                "nodeType": "YulLiteral",
                                "src": "7327:1:67",
                                "type": "",
                                "value": "4"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "7330:4:67",
                                "nodeType": "YulLiteral",
                                "src": "7330:4:67",
                                "type": "",
                                "value": "0x41"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nativeSrc": "7320:6:67",
                              "nodeType": "YulIdentifier",
                              "src": "7320:6:67"
                            },
                            "nativeSrc": "7320:15:67",
                            "nodeType": "YulFunctionCall",
                            "src": "7320:15:67"
                          },
                          "nativeSrc": "7320:15:67",
                          "nodeType": "YulExpressionStatement",
                          "src": "7320:15:67"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nativeSrc": "7351:1:67",
                                "nodeType": "YulLiteral",
                                "src": "7351:1:67",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "7354:4:67",
                                "nodeType": "YulLiteral",
                                "src": "7354:4:67",
                                "type": "",
                                "value": "0x24"
                              }
                            ],
                            "functionName": {
                              "name": "revert",
                              "nativeSrc": "7344:6:67",
                              "nodeType": "YulIdentifier",
                              "src": "7344:6:67"
                            },
                            "nativeSrc": "7344:15:67",
                            "nodeType": "YulFunctionCall",
                            "src": "7344:15:67"
                          },
                          "nativeSrc": "7344:15:67",
                          "nodeType": "YulExpressionStatement",
                          "src": "7344:15:67"
                        }
                      ]
                    },
                    "name": "panic_error_0x41",
                    "nativeSrc": "7185:180:67",
                    "nodeType": "YulFunctionDefinition",
                    "src": "7185:180:67"
                  },
                  {
                    "body": {
                      "nativeSrc": "7414:238:67",
                      "nodeType": "YulBlock",
                      "src": "7414:238:67",
                      "statements": [
                        {
                          "nativeSrc": "7424:58:67",
                          "nodeType": "YulVariableDeclaration",
                          "src": "7424:58:67",
                          "value": {
                            "arguments": [
                              {
                                "name": "memPtr",
                                "nativeSrc": "7446:6:67",
                                "nodeType": "YulIdentifier",
                                "src": "7446:6:67"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "size",
                                    "nativeSrc": "7476:4:67",
                                    "nodeType": "YulIdentifier",
                                    "src": "7476:4:67"
                                  }
                                ],
                                "functionName": {
                                  "name": "round_up_to_mul_of_32",
                                  "nativeSrc": "7454:21:67",
                                  "nodeType": "YulIdentifier",
                                  "src": "7454:21:67"
                                },
                                "nativeSrc": "7454:27:67",
                                "nodeType": "YulFunctionCall",
                                "src": "7454:27:67"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nativeSrc": "7442:3:67",
                              "nodeType": "YulIdentifier",
                              "src": "7442:3:67"
                            },
                            "nativeSrc": "7442:40:67",
                            "nodeType": "YulFunctionCall",
                            "src": "7442:40:67"
                          },
                          "variables": [
                            {
                              "name": "newFreePtr",
                              "nativeSrc": "7428:10:67",
                              "nodeType": "YulTypedName",
                              "src": "7428:10:67",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nativeSrc": "7593:22:67",
                            "nodeType": "YulBlock",
                            "src": "7593:22:67",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x41",
                                    "nativeSrc": "7595:16:67",
                                    "nodeType": "YulIdentifier",
                                    "src": "7595:16:67"
                                  },
                                  "nativeSrc": "7595:18:67",
                                  "nodeType": "YulFunctionCall",
                                  "src": "7595:18:67"
                                },
                                "nativeSrc": "7595:18:67",
                                "nodeType": "YulExpressionStatement",
                                "src": "7595:18:67"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "newFreePtr",
                                    "nativeSrc": "7536:10:67",
                                    "nodeType": "YulIdentifier",
                                    "src": "7536:10:67"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "7548:18:67",
                                    "nodeType": "YulLiteral",
                                    "src": "7548:18:67",
                                    "type": "",
                                    "value": "0xffffffffffffffff"
                                  }
                                ],
                                "functionName": {
                                  "name": "gt",
                                  "nativeSrc": "7533:2:67",
                                  "nodeType": "YulIdentifier",
                                  "src": "7533:2:67"
                                },
                                "nativeSrc": "7533:34:67",
                                "nodeType": "YulFunctionCall",
                                "src": "7533:34:67"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "newFreePtr",
                                    "nativeSrc": "7572:10:67",
                                    "nodeType": "YulIdentifier",
                                    "src": "7572:10:67"
                                  },
                                  {
                                    "name": "memPtr",
                                    "nativeSrc": "7584:6:67",
                                    "nodeType": "YulIdentifier",
                                    "src": "7584:6:67"
                                  }
                                ],
                                "functionName": {
                                  "name": "lt",
                                  "nativeSrc": "7569:2:67",
                                  "nodeType": "YulIdentifier",
                                  "src": "7569:2:67"
                                },
                                "nativeSrc": "7569:22:67",
                                "nodeType": "YulFunctionCall",
                                "src": "7569:22:67"
                              }
                            ],
                            "functionName": {
                              "name": "or",
                              "nativeSrc": "7530:2:67",
                              "nodeType": "YulIdentifier",
                              "src": "7530:2:67"
                            },
                            "nativeSrc": "7530:62:67",
                            "nodeType": "YulFunctionCall",
                            "src": "7530:62:67"
                          },
                          "nativeSrc": "7527:88:67",
                          "nodeType": "YulIf",
                          "src": "7527:88:67"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nativeSrc": "7631:2:67",
                                "nodeType": "YulLiteral",
                                "src": "7631:2:67",
                                "type": "",
                                "value": "64"
                              },
                              {
                                "name": "newFreePtr",
                                "nativeSrc": "7635:10:67",
                                "nodeType": "YulIdentifier",
                                "src": "7635:10:67"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nativeSrc": "7624:6:67",
                              "nodeType": "YulIdentifier",
                              "src": "7624:6:67"
                            },
                            "nativeSrc": "7624:22:67",
                            "nodeType": "YulFunctionCall",
                            "src": "7624:22:67"
                          },
                          "nativeSrc": "7624:22:67",
                          "nodeType": "YulExpressionStatement",
                          "src": "7624:22:67"
                        }
                      ]
                    },
                    "name": "finalize_allocation",
                    "nativeSrc": "7371:281:67",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "memPtr",
                        "nativeSrc": "7400:6:67",
                        "nodeType": "YulTypedName",
                        "src": "7400:6:67",
                        "type": ""
                      },
                      {
                        "name": "size",
                        "nativeSrc": "7408:4:67",
                        "nodeType": "YulTypedName",
                        "src": "7408:4:67",
                        "type": ""
                      }
                    ],
                    "src": "7371:281:67"
                  },
                  {
                    "body": {
                      "nativeSrc": "7699:88:67",
                      "nodeType": "YulBlock",
                      "src": "7699:88:67",
                      "statements": [
                        {
                          "nativeSrc": "7709:30:67",
                          "nodeType": "YulAssignment",
                          "src": "7709:30:67",
                          "value": {
                            "arguments": [],
                            "functionName": {
                              "name": "allocate_unbounded",
                              "nativeSrc": "7719:18:67",
                              "nodeType": "YulIdentifier",
                              "src": "7719:18:67"
                            },
                            "nativeSrc": "7719:20:67",
                            "nodeType": "YulFunctionCall",
                            "src": "7719:20:67"
                          },
                          "variableNames": [
                            {
                              "name": "memPtr",
                              "nativeSrc": "7709:6:67",
                              "nodeType": "YulIdentifier",
                              "src": "7709:6:67"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "memPtr",
                                "nativeSrc": "7768:6:67",
                                "nodeType": "YulIdentifier",
                                "src": "7768:6:67"
                              },
                              {
                                "name": "size",
                                "nativeSrc": "7776:4:67",
                                "nodeType": "YulIdentifier",
                                "src": "7776:4:67"
                              }
                            ],
                            "functionName": {
                              "name": "finalize_allocation",
                              "nativeSrc": "7748:19:67",
                              "nodeType": "YulIdentifier",
                              "src": "7748:19:67"
                            },
                            "nativeSrc": "7748:33:67",
                            "nodeType": "YulFunctionCall",
                            "src": "7748:33:67"
                          },
                          "nativeSrc": "7748:33:67",
                          "nodeType": "YulExpressionStatement",
                          "src": "7748:33:67"
                        }
                      ]
                    },
                    "name": "allocate_memory",
                    "nativeSrc": "7658:129:67",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "size",
                        "nativeSrc": "7683:4:67",
                        "nodeType": "YulTypedName",
                        "src": "7683:4:67",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "memPtr",
                        "nativeSrc": "7692:6:67",
                        "nodeType": "YulTypedName",
                        "src": "7692:6:67",
                        "type": ""
                      }
                    ],
                    "src": "7658:129:67"
                  },
                  {
                    "body": {
                      "nativeSrc": "7859:241:67",
                      "nodeType": "YulBlock",
                      "src": "7859:241:67",
                      "statements": [
                        {
                          "body": {
                            "nativeSrc": "7964:22:67",
                            "nodeType": "YulBlock",
                            "src": "7964:22:67",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x41",
                                    "nativeSrc": "7966:16:67",
                                    "nodeType": "YulIdentifier",
                                    "src": "7966:16:67"
                                  },
                                  "nativeSrc": "7966:18:67",
                                  "nodeType": "YulFunctionCall",
                                  "src": "7966:18:67"
                                },
                                "nativeSrc": "7966:18:67",
                                "nodeType": "YulExpressionStatement",
                                "src": "7966:18:67"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "length",
                                "nativeSrc": "7936:6:67",
                                "nodeType": "YulIdentifier",
                                "src": "7936:6:67"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "7944:18:67",
                                "nodeType": "YulLiteral",
                                "src": "7944:18:67",
                                "type": "",
                                "value": "0xffffffffffffffff"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nativeSrc": "7933:2:67",
                              "nodeType": "YulIdentifier",
                              "src": "7933:2:67"
                            },
                            "nativeSrc": "7933:30:67",
                            "nodeType": "YulFunctionCall",
                            "src": "7933:30:67"
                          },
                          "nativeSrc": "7930:56:67",
                          "nodeType": "YulIf",
                          "src": "7930:56:67"
                        },
                        {
                          "nativeSrc": "7996:37:67",
                          "nodeType": "YulAssignment",
                          "src": "7996:37:67",
                          "value": {
                            "arguments": [
                              {
                                "name": "length",
                                "nativeSrc": "8026:6:67",
                                "nodeType": "YulIdentifier",
                                "src": "8026:6:67"
                              }
                            ],
                            "functionName": {
                              "name": "round_up_to_mul_of_32",
                              "nativeSrc": "8004:21:67",
                              "nodeType": "YulIdentifier",
                              "src": "8004:21:67"
                            },
                            "nativeSrc": "8004:29:67",
                            "nodeType": "YulFunctionCall",
                            "src": "8004:29:67"
                          },
                          "variableNames": [
                            {
                              "name": "size",
                              "nativeSrc": "7996:4:67",
                              "nodeType": "YulIdentifier",
                              "src": "7996:4:67"
                            }
                          ]
                        },
                        {
                          "nativeSrc": "8070:23:67",
                          "nodeType": "YulAssignment",
                          "src": "8070:23:67",
                          "value": {
                            "arguments": [
                              {
                                "name": "size",
                                "nativeSrc": "8082:4:67",
                                "nodeType": "YulIdentifier",
                                "src": "8082:4:67"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "8088:4:67",
                                "nodeType": "YulLiteral",
                                "src": "8088:4:67",
                                "type": "",
                                "value": "0x20"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nativeSrc": "8078:3:67",
                              "nodeType": "YulIdentifier",
                              "src": "8078:3:67"
                            },
                            "nativeSrc": "8078:15:67",
                            "nodeType": "YulFunctionCall",
                            "src": "8078:15:67"
                          },
                          "variableNames": [
                            {
                              "name": "size",
                              "nativeSrc": "8070:4:67",
                              "nodeType": "YulIdentifier",
                              "src": "8070:4:67"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "array_allocation_size_t_bytes_memory_ptr",
                    "nativeSrc": "7793:307:67",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "length",
                        "nativeSrc": "7843:6:67",
                        "nodeType": "YulTypedName",
                        "src": "7843:6:67",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "size",
                        "nativeSrc": "7854:4:67",
                        "nodeType": "YulTypedName",
                        "src": "7854:4:67",
                        "type": ""
                      }
                    ],
                    "src": "7793:307:67"
                  },
                  {
                    "body": {
                      "nativeSrc": "8170:84:67",
                      "nodeType": "YulBlock",
                      "src": "8170:84:67",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "dst",
                                "nativeSrc": "8194:3:67",
                                "nodeType": "YulIdentifier",
                                "src": "8194:3:67"
                              },
                              {
                                "name": "src",
                                "nativeSrc": "8199:3:67",
                                "nodeType": "YulIdentifier",
                                "src": "8199:3:67"
                              },
                              {
                                "name": "length",
                                "nativeSrc": "8204:6:67",
                                "nodeType": "YulIdentifier",
                                "src": "8204:6:67"
                              }
                            ],
                            "functionName": {
                              "name": "calldatacopy",
                              "nativeSrc": "8181:12:67",
                              "nodeType": "YulIdentifier",
                              "src": "8181:12:67"
                            },
                            "nativeSrc": "8181:30:67",
                            "nodeType": "YulFunctionCall",
                            "src": "8181:30:67"
                          },
                          "nativeSrc": "8181:30:67",
                          "nodeType": "YulExpressionStatement",
                          "src": "8181:30:67"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dst",
                                    "nativeSrc": "8231:3:67",
                                    "nodeType": "YulIdentifier",
                                    "src": "8231:3:67"
                                  },
                                  {
                                    "name": "length",
                                    "nativeSrc": "8236:6:67",
                                    "nodeType": "YulIdentifier",
                                    "src": "8236:6:67"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "8227:3:67",
                                  "nodeType": "YulIdentifier",
                                  "src": "8227:3:67"
                                },
                                "nativeSrc": "8227:16:67",
                                "nodeType": "YulFunctionCall",
                                "src": "8227:16:67"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "8245:1:67",
                                "nodeType": "YulLiteral",
                                "src": "8245:1:67",
                                "type": "",
                                "value": "0"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nativeSrc": "8220:6:67",
                              "nodeType": "YulIdentifier",
                              "src": "8220:6:67"
                            },
                            "nativeSrc": "8220:27:67",
                            "nodeType": "YulFunctionCall",
                            "src": "8220:27:67"
                          },
                          "nativeSrc": "8220:27:67",
                          "nodeType": "YulExpressionStatement",
                          "src": "8220:27:67"
                        }
                      ]
                    },
                    "name": "copy_calldata_to_memory_with_cleanup",
                    "nativeSrc": "8106:148:67",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "src",
                        "nativeSrc": "8152:3:67",
                        "nodeType": "YulTypedName",
                        "src": "8152:3:67",
                        "type": ""
                      },
                      {
                        "name": "dst",
                        "nativeSrc": "8157:3:67",
                        "nodeType": "YulTypedName",
                        "src": "8157:3:67",
                        "type": ""
                      },
                      {
                        "name": "length",
                        "nativeSrc": "8162:6:67",
                        "nodeType": "YulTypedName",
                        "src": "8162:6:67",
                        "type": ""
                      }
                    ],
                    "src": "8106:148:67"
                  },
                  {
                    "body": {
                      "nativeSrc": "8343:340:67",
                      "nodeType": "YulBlock",
                      "src": "8343:340:67",
                      "statements": [
                        {
                          "nativeSrc": "8353:74:67",
                          "nodeType": "YulAssignment",
                          "src": "8353:74:67",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "length",
                                    "nativeSrc": "8419:6:67",
                                    "nodeType": "YulIdentifier",
                                    "src": "8419:6:67"
                                  }
                                ],
                                "functionName": {
                                  "name": "array_allocation_size_t_bytes_memory_ptr",
                                  "nativeSrc": "8378:40:67",
                                  "nodeType": "YulIdentifier",
                                  "src": "8378:40:67"
                                },
                                "nativeSrc": "8378:48:67",
                                "nodeType": "YulFunctionCall",
                                "src": "8378:48:67"
                              }
                            ],
                            "functionName": {
                              "name": "allocate_memory",
                              "nativeSrc": "8362:15:67",
                              "nodeType": "YulIdentifier",
                              "src": "8362:15:67"
                            },
                            "nativeSrc": "8362:65:67",
                            "nodeType": "YulFunctionCall",
                            "src": "8362:65:67"
                          },
                          "variableNames": [
                            {
                              "name": "array",
                              "nativeSrc": "8353:5:67",
                              "nodeType": "YulIdentifier",
                              "src": "8353:5:67"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "array",
                                "nativeSrc": "8443:5:67",
                                "nodeType": "YulIdentifier",
                                "src": "8443:5:67"
                              },
                              {
                                "name": "length",
                                "nativeSrc": "8450:6:67",
                                "nodeType": "YulIdentifier",
                                "src": "8450:6:67"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nativeSrc": "8436:6:67",
                              "nodeType": "YulIdentifier",
                              "src": "8436:6:67"
                            },
                            "nativeSrc": "8436:21:67",
                            "nodeType": "YulFunctionCall",
                            "src": "8436:21:67"
                          },
                          "nativeSrc": "8436:21:67",
                          "nodeType": "YulExpressionStatement",
                          "src": "8436:21:67"
                        },
                        {
                          "nativeSrc": "8466:27:67",
                          "nodeType": "YulVariableDeclaration",
                          "src": "8466:27:67",
                          "value": {
                            "arguments": [
                              {
                                "name": "array",
                                "nativeSrc": "8481:5:67",
                                "nodeType": "YulIdentifier",
                                "src": "8481:5:67"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "8488:4:67",
                                "nodeType": "YulLiteral",
                                "src": "8488:4:67",
                                "type": "",
                                "value": "0x20"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nativeSrc": "8477:3:67",
                              "nodeType": "YulIdentifier",
                              "src": "8477:3:67"
                            },
                            "nativeSrc": "8477:16:67",
                            "nodeType": "YulFunctionCall",
                            "src": "8477:16:67"
                          },
                          "variables": [
                            {
                              "name": "dst",
                              "nativeSrc": "8470:3:67",
                              "nodeType": "YulTypedName",
                              "src": "8470:3:67",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nativeSrc": "8531:83:67",
                            "nodeType": "YulBlock",
                            "src": "8531:83:67",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae",
                                    "nativeSrc": "8533:77:67",
                                    "nodeType": "YulIdentifier",
                                    "src": "8533:77:67"
                                  },
                                  "nativeSrc": "8533:79:67",
                                  "nodeType": "YulFunctionCall",
                                  "src": "8533:79:67"
                                },
                                "nativeSrc": "8533:79:67",
                                "nodeType": "YulExpressionStatement",
                                "src": "8533:79:67"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "src",
                                    "nativeSrc": "8512:3:67",
                                    "nodeType": "YulIdentifier",
                                    "src": "8512:3:67"
                                  },
                                  {
                                    "name": "length",
                                    "nativeSrc": "8517:6:67",
                                    "nodeType": "YulIdentifier",
                                    "src": "8517:6:67"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "8508:3:67",
                                  "nodeType": "YulIdentifier",
                                  "src": "8508:3:67"
                                },
                                "nativeSrc": "8508:16:67",
                                "nodeType": "YulFunctionCall",
                                "src": "8508:16:67"
                              },
                              {
                                "name": "end",
                                "nativeSrc": "8526:3:67",
                                "nodeType": "YulIdentifier",
                                "src": "8526:3:67"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nativeSrc": "8505:2:67",
                              "nodeType": "YulIdentifier",
                              "src": "8505:2:67"
                            },
                            "nativeSrc": "8505:25:67",
                            "nodeType": "YulFunctionCall",
                            "src": "8505:25:67"
                          },
                          "nativeSrc": "8502:112:67",
                          "nodeType": "YulIf",
                          "src": "8502:112:67"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "src",
                                "nativeSrc": "8660:3:67",
                                "nodeType": "YulIdentifier",
                                "src": "8660:3:67"
                              },
                              {
                                "name": "dst",
                                "nativeSrc": "8665:3:67",
                                "nodeType": "YulIdentifier",
                                "src": "8665:3:67"
                              },
                              {
                                "name": "length",
                                "nativeSrc": "8670:6:67",
                                "nodeType": "YulIdentifier",
                                "src": "8670:6:67"
                              }
                            ],
                            "functionName": {
                              "name": "copy_calldata_to_memory_with_cleanup",
                              "nativeSrc": "8623:36:67",
                              "nodeType": "YulIdentifier",
                              "src": "8623:36:67"
                            },
                            "nativeSrc": "8623:54:67",
                            "nodeType": "YulFunctionCall",
                            "src": "8623:54:67"
                          },
                          "nativeSrc": "8623:54:67",
                          "nodeType": "YulExpressionStatement",
                          "src": "8623:54:67"
                        }
                      ]
                    },
                    "name": "abi_decode_available_length_t_bytes_memory_ptr",
                    "nativeSrc": "8260:423:67",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "src",
                        "nativeSrc": "8316:3:67",
                        "nodeType": "YulTypedName",
                        "src": "8316:3:67",
                        "type": ""
                      },
                      {
                        "name": "length",
                        "nativeSrc": "8321:6:67",
                        "nodeType": "YulTypedName",
                        "src": "8321:6:67",
                        "type": ""
                      },
                      {
                        "name": "end",
                        "nativeSrc": "8329:3:67",
                        "nodeType": "YulTypedName",
                        "src": "8329:3:67",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "array",
                        "nativeSrc": "8337:5:67",
                        "nodeType": "YulTypedName",
                        "src": "8337:5:67",
                        "type": ""
                      }
                    ],
                    "src": "8260:423:67"
                  },
                  {
                    "body": {
                      "nativeSrc": "8763:277:67",
                      "nodeType": "YulBlock",
                      "src": "8763:277:67",
                      "statements": [
                        {
                          "body": {
                            "nativeSrc": "8812:83:67",
                            "nodeType": "YulBlock",
                            "src": "8812:83:67",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d",
                                    "nativeSrc": "8814:77:67",
                                    "nodeType": "YulIdentifier",
                                    "src": "8814:77:67"
                                  },
                                  "nativeSrc": "8814:79:67",
                                  "nodeType": "YulFunctionCall",
                                  "src": "8814:79:67"
                                },
                                "nativeSrc": "8814:79:67",
                                "nodeType": "YulExpressionStatement",
                                "src": "8814:79:67"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "offset",
                                        "nativeSrc": "8791:6:67",
                                        "nodeType": "YulIdentifier",
                                        "src": "8791:6:67"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "8799:4:67",
                                        "nodeType": "YulLiteral",
                                        "src": "8799:4:67",
                                        "type": "",
                                        "value": "0x1f"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "8787:3:67",
                                      "nodeType": "YulIdentifier",
                                      "src": "8787:3:67"
                                    },
                                    "nativeSrc": "8787:17:67",
                                    "nodeType": "YulFunctionCall",
                                    "src": "8787:17:67"
                                  },
                                  {
                                    "name": "end",
                                    "nativeSrc": "8806:3:67",
                                    "nodeType": "YulIdentifier",
                                    "src": "8806:3:67"
                                  }
                                ],
                                "functionName": {
                                  "name": "slt",
                                  "nativeSrc": "8783:3:67",
                                  "nodeType": "YulIdentifier",
                                  "src": "8783:3:67"
                                },
                                "nativeSrc": "8783:27:67",
                                "nodeType": "YulFunctionCall",
                                "src": "8783:27:67"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nativeSrc": "8776:6:67",
                              "nodeType": "YulIdentifier",
                              "src": "8776:6:67"
                            },
                            "nativeSrc": "8776:35:67",
                            "nodeType": "YulFunctionCall",
                            "src": "8776:35:67"
                          },
                          "nativeSrc": "8773:122:67",
                          "nodeType": "YulIf",
                          "src": "8773:122:67"
                        },
                        {
                          "nativeSrc": "8904:34:67",
                          "nodeType": "YulVariableDeclaration",
                          "src": "8904:34:67",
                          "value": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nativeSrc": "8931:6:67",
                                "nodeType": "YulIdentifier",
                                "src": "8931:6:67"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nativeSrc": "8918:12:67",
                              "nodeType": "YulIdentifier",
                              "src": "8918:12:67"
                            },
                            "nativeSrc": "8918:20:67",
                            "nodeType": "YulFunctionCall",
                            "src": "8918:20:67"
                          },
                          "variables": [
                            {
                              "name": "length",
                              "nativeSrc": "8908:6:67",
                              "nodeType": "YulTypedName",
                              "src": "8908:6:67",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nativeSrc": "8947:87:67",
                          "nodeType": "YulAssignment",
                          "src": "8947:87:67",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "offset",
                                    "nativeSrc": "9007:6:67",
                                    "nodeType": "YulIdentifier",
                                    "src": "9007:6:67"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "9015:4:67",
                                    "nodeType": "YulLiteral",
                                    "src": "9015:4:67",
                                    "type": "",
                                    "value": "0x20"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "9003:3:67",
                                  "nodeType": "YulIdentifier",
                                  "src": "9003:3:67"
                                },
                                "nativeSrc": "9003:17:67",
                                "nodeType": "YulFunctionCall",
                                "src": "9003:17:67"
                              },
                              {
                                "name": "length",
                                "nativeSrc": "9022:6:67",
                                "nodeType": "YulIdentifier",
                                "src": "9022:6:67"
                              },
                              {
                                "name": "end",
                                "nativeSrc": "9030:3:67",
                                "nodeType": "YulIdentifier",
                                "src": "9030:3:67"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_available_length_t_bytes_memory_ptr",
                              "nativeSrc": "8956:46:67",
                              "nodeType": "YulIdentifier",
                              "src": "8956:46:67"
                            },
                            "nativeSrc": "8956:78:67",
                            "nodeType": "YulFunctionCall",
                            "src": "8956:78:67"
                          },
                          "variableNames": [
                            {
                              "name": "array",
                              "nativeSrc": "8947:5:67",
                              "nodeType": "YulIdentifier",
                              "src": "8947:5:67"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_t_bytes_memory_ptr",
                    "nativeSrc": "8702:338:67",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "offset",
                        "nativeSrc": "8741:6:67",
                        "nodeType": "YulTypedName",
                        "src": "8741:6:67",
                        "type": ""
                      },
                      {
                        "name": "end",
                        "nativeSrc": "8749:3:67",
                        "nodeType": "YulTypedName",
                        "src": "8749:3:67",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "array",
                        "nativeSrc": "8757:5:67",
                        "nodeType": "YulTypedName",
                        "src": "8757:5:67",
                        "type": ""
                      }
                    ],
                    "src": "8702:338:67"
                  },
                  {
                    "body": {
                      "nativeSrc": "9172:817:67",
                      "nodeType": "YulBlock",
                      "src": "9172:817:67",
                      "statements": [
                        {
                          "body": {
                            "nativeSrc": "9219:83:67",
                            "nodeType": "YulBlock",
                            "src": "9219:83:67",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
                                    "nativeSrc": "9221:77:67",
                                    "nodeType": "YulIdentifier",
                                    "src": "9221:77:67"
                                  },
                                  "nativeSrc": "9221:79:67",
                                  "nodeType": "YulFunctionCall",
                                  "src": "9221:79:67"
                                },
                                "nativeSrc": "9221:79:67",
                                "nodeType": "YulExpressionStatement",
                                "src": "9221:79:67"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nativeSrc": "9193:7:67",
                                    "nodeType": "YulIdentifier",
                                    "src": "9193:7:67"
                                  },
                                  {
                                    "name": "headStart",
                                    "nativeSrc": "9202:9:67",
                                    "nodeType": "YulIdentifier",
                                    "src": "9202:9:67"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nativeSrc": "9189:3:67",
                                  "nodeType": "YulIdentifier",
                                  "src": "9189:3:67"
                                },
                                "nativeSrc": "9189:23:67",
                                "nodeType": "YulFunctionCall",
                                "src": "9189:23:67"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "9214:3:67",
                                "nodeType": "YulLiteral",
                                "src": "9214:3:67",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nativeSrc": "9185:3:67",
                              "nodeType": "YulIdentifier",
                              "src": "9185:3:67"
                            },
                            "nativeSrc": "9185:33:67",
                            "nodeType": "YulFunctionCall",
                            "src": "9185:33:67"
                          },
                          "nativeSrc": "9182:120:67",
                          "nodeType": "YulIf",
                          "src": "9182:120:67"
                        },
                        {
                          "nativeSrc": "9312:117:67",
                          "nodeType": "YulBlock",
                          "src": "9312:117:67",
                          "statements": [
                            {
                              "nativeSrc": "9327:15:67",
                              "nodeType": "YulVariableDeclaration",
                              "src": "9327:15:67",
                              "value": {
                                "kind": "number",
                                "nativeSrc": "9341:1:67",
                                "nodeType": "YulLiteral",
                                "src": "9341:1:67",
                                "type": "",
                                "value": "0"
                              },
                              "variables": [
                                {
                                  "name": "offset",
                                  "nativeSrc": "9331:6:67",
                                  "nodeType": "YulTypedName",
                                  "src": "9331:6:67",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "nativeSrc": "9356:63:67",
                              "nodeType": "YulAssignment",
                              "src": "9356:63:67",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nativeSrc": "9391:9:67",
                                        "nodeType": "YulIdentifier",
                                        "src": "9391:9:67"
                                      },
                                      {
                                        "name": "offset",
                                        "nativeSrc": "9402:6:67",
                                        "nodeType": "YulIdentifier",
                                        "src": "9402:6:67"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "9387:3:67",
                                      "nodeType": "YulIdentifier",
                                      "src": "9387:3:67"
                                    },
                                    "nativeSrc": "9387:22:67",
                                    "nodeType": "YulFunctionCall",
                                    "src": "9387:22:67"
                                  },
                                  {
                                    "name": "dataEnd",
                                    "nativeSrc": "9411:7:67",
                                    "nodeType": "YulIdentifier",
                                    "src": "9411:7:67"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_decode_t_address",
                                  "nativeSrc": "9366:20:67",
                                  "nodeType": "YulIdentifier",
                                  "src": "9366:20:67"
                                },
                                "nativeSrc": "9366:53:67",
                                "nodeType": "YulFunctionCall",
                                "src": "9366:53:67"
                              },
                              "variableNames": [
                                {
                                  "name": "value0",
                                  "nativeSrc": "9356:6:67",
                                  "nodeType": "YulIdentifier",
                                  "src": "9356:6:67"
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "nativeSrc": "9439:118:67",
                          "nodeType": "YulBlock",
                          "src": "9439:118:67",
                          "statements": [
                            {
                              "nativeSrc": "9454:16:67",
                              "nodeType": "YulVariableDeclaration",
                              "src": "9454:16:67",
                              "value": {
                                "kind": "number",
                                "nativeSrc": "9468:2:67",
                                "nodeType": "YulLiteral",
                                "src": "9468:2:67",
                                "type": "",
                                "value": "32"
                              },
                              "variables": [
                                {
                                  "name": "offset",
                                  "nativeSrc": "9458:6:67",
                                  "nodeType": "YulTypedName",
                                  "src": "9458:6:67",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "nativeSrc": "9484:63:67",
                              "nodeType": "YulAssignment",
                              "src": "9484:63:67",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nativeSrc": "9519:9:67",
                                        "nodeType": "YulIdentifier",
                                        "src": "9519:9:67"
                                      },
                                      {
                                        "name": "offset",
                                        "nativeSrc": "9530:6:67",
                                        "nodeType": "YulIdentifier",
                                        "src": "9530:6:67"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "9515:3:67",
                                      "nodeType": "YulIdentifier",
                                      "src": "9515:3:67"
                                    },
                                    "nativeSrc": "9515:22:67",
                                    "nodeType": "YulFunctionCall",
                                    "src": "9515:22:67"
                                  },
                                  {
                                    "name": "dataEnd",
                                    "nativeSrc": "9539:7:67",
                                    "nodeType": "YulIdentifier",
                                    "src": "9539:7:67"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_decode_t_address",
                                  "nativeSrc": "9494:20:67",
                                  "nodeType": "YulIdentifier",
                                  "src": "9494:20:67"
                                },
                                "nativeSrc": "9494:53:67",
                                "nodeType": "YulFunctionCall",
                                "src": "9494:53:67"
                              },
                              "variableNames": [
                                {
                                  "name": "value1",
                                  "nativeSrc": "9484:6:67",
                                  "nodeType": "YulIdentifier",
                                  "src": "9484:6:67"
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "nativeSrc": "9567:118:67",
                          "nodeType": "YulBlock",
                          "src": "9567:118:67",
                          "statements": [
                            {
                              "nativeSrc": "9582:16:67",
                              "nodeType": "YulVariableDeclaration",
                              "src": "9582:16:67",
                              "value": {
                                "kind": "number",
                                "nativeSrc": "9596:2:67",
                                "nodeType": "YulLiteral",
                                "src": "9596:2:67",
                                "type": "",
                                "value": "64"
                              },
                              "variables": [
                                {
                                  "name": "offset",
                                  "nativeSrc": "9586:6:67",
                                  "nodeType": "YulTypedName",
                                  "src": "9586:6:67",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "nativeSrc": "9612:63:67",
                              "nodeType": "YulAssignment",
                              "src": "9612:63:67",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nativeSrc": "9647:9:67",
                                        "nodeType": "YulIdentifier",
                                        "src": "9647:9:67"
                                      },
                                      {
                                        "name": "offset",
                                        "nativeSrc": "9658:6:67",
                                        "nodeType": "YulIdentifier",
                                        "src": "9658:6:67"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "9643:3:67",
                                      "nodeType": "YulIdentifier",
                                      "src": "9643:3:67"
                                    },
                                    "nativeSrc": "9643:22:67",
                                    "nodeType": "YulFunctionCall",
                                    "src": "9643:22:67"
                                  },
                                  {
                                    "name": "dataEnd",
                                    "nativeSrc": "9667:7:67",
                                    "nodeType": "YulIdentifier",
                                    "src": "9667:7:67"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_decode_t_uint256",
                                  "nativeSrc": "9622:20:67",
                                  "nodeType": "YulIdentifier",
                                  "src": "9622:20:67"
                                },
                                "nativeSrc": "9622:53:67",
                                "nodeType": "YulFunctionCall",
                                "src": "9622:53:67"
                              },
                              "variableNames": [
                                {
                                  "name": "value2",
                                  "nativeSrc": "9612:6:67",
                                  "nodeType": "YulIdentifier",
                                  "src": "9612:6:67"
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "nativeSrc": "9695:287:67",
                          "nodeType": "YulBlock",
                          "src": "9695:287:67",
                          "statements": [
                            {
                              "nativeSrc": "9710:46:67",
                              "nodeType": "YulVariableDeclaration",
                              "src": "9710:46:67",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nativeSrc": "9741:9:67",
                                        "nodeType": "YulIdentifier",
                                        "src": "9741:9:67"
                                      },
                                      {
                                        "kind": "number",
                                        "nativeSrc": "9752:2:67",
                                        "nodeType": "YulLiteral",
                                        "src": "9752:2:67",
                                        "type": "",
                                        "value": "96"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "9737:3:67",
                                      "nodeType": "YulIdentifier",
                                      "src": "9737:3:67"
                                    },
                                    "nativeSrc": "9737:18:67",
                                    "nodeType": "YulFunctionCall",
                                    "src": "9737:18:67"
                                  }
                                ],
                                "functionName": {
                                  "name": "calldataload",
                                  "nativeSrc": "9724:12:67",
                                  "nodeType": "YulIdentifier",
                                  "src": "9724:12:67"
                                },
                                "nativeSrc": "9724:32:67",
                                "nodeType": "YulFunctionCall",
                                "src": "9724:32:67"
                              },
                              "variables": [
                                {
                                  "name": "offset",
                                  "nativeSrc": "9714:6:67",
                                  "nodeType": "YulTypedName",
                                  "src": "9714:6:67",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "body": {
                                "nativeSrc": "9803:83:67",
                                "nodeType": "YulBlock",
                                "src": "9803:83:67",
                                "statements": [
                                  {
                                    "expression": {
                                      "arguments": [],
                                      "functionName": {
                                        "name": "revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db",
                                        "nativeSrc": "9805:77:67",
                                        "nodeType": "YulIdentifier",
                                        "src": "9805:77:67"
                                      },
                                      "nativeSrc": "9805:79:67",
                                      "nodeType": "YulFunctionCall",
                                      "src": "9805:79:67"
                                    },
                                    "nativeSrc": "9805:79:67",
                                    "nodeType": "YulExpressionStatement",
                                    "src": "9805:79:67"
                                  }
                                ]
                              },
                              "condition": {
                                "arguments": [
                                  {
                                    "name": "offset",
                                    "nativeSrc": "9775:6:67",
                                    "nodeType": "YulIdentifier",
                                    "src": "9775:6:67"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "9783:18:67",
                                    "nodeType": "YulLiteral",
                                    "src": "9783:18:67",
                                    "type": "",
                                    "value": "0xffffffffffffffff"
                                  }
                                ],
                                "functionName": {
                                  "name": "gt",
                                  "nativeSrc": "9772:2:67",
                                  "nodeType": "YulIdentifier",
                                  "src": "9772:2:67"
                                },
                                "nativeSrc": "9772:30:67",
                                "nodeType": "YulFunctionCall",
                                "src": "9772:30:67"
                              },
                              "nativeSrc": "9769:117:67",
                              "nodeType": "YulIf",
                              "src": "9769:117:67"
                            },
                            {
                              "nativeSrc": "9900:72:67",
                              "nodeType": "YulAssignment",
                              "src": "9900:72:67",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nativeSrc": "9944:9:67",
                                        "nodeType": "YulIdentifier",
                                        "src": "9944:9:67"
                                      },
                                      {
                                        "name": "offset",
                                        "nativeSrc": "9955:6:67",
                                        "nodeType": "YulIdentifier",
                                        "src": "9955:6:67"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "9940:3:67",
                                      "nodeType": "YulIdentifier",
                                      "src": "9940:3:67"
                                    },
                                    "nativeSrc": "9940:22:67",
                                    "nodeType": "YulFunctionCall",
                                    "src": "9940:22:67"
                                  },
                                  {
                                    "name": "dataEnd",
                                    "nativeSrc": "9964:7:67",
                                    "nodeType": "YulIdentifier",
                                    "src": "9964:7:67"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_decode_t_bytes_memory_ptr",
                                  "nativeSrc": "9910:29:67",
                                  "nodeType": "YulIdentifier",
                                  "src": "9910:29:67"
                                },
                                "nativeSrc": "9910:62:67",
                                "nodeType": "YulFunctionCall",
                                "src": "9910:62:67"
                              },
                              "variableNames": [
                                {
                                  "name": "value3",
                                  "nativeSrc": "9900:6:67",
                                  "nodeType": "YulIdentifier",
                                  "src": "9900:6:67"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_addresst_addresst_uint256t_bytes_memory_ptr",
                    "nativeSrc": "9046:943:67",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nativeSrc": "9118:9:67",
                        "nodeType": "YulTypedName",
                        "src": "9118:9:67",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nativeSrc": "9129:7:67",
                        "nodeType": "YulTypedName",
                        "src": "9129:7:67",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nativeSrc": "9141:6:67",
                        "nodeType": "YulTypedName",
                        "src": "9141:6:67",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nativeSrc": "9149:6:67",
                        "nodeType": "YulTypedName",
                        "src": "9149:6:67",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nativeSrc": "9157:6:67",
                        "nodeType": "YulTypedName",
                        "src": "9157:6:67",
                        "type": ""
                      },
                      {
                        "name": "value3",
                        "nativeSrc": "9165:6:67",
                        "nodeType": "YulTypedName",
                        "src": "9165:6:67",
                        "type": ""
                      }
                    ],
                    "src": "9046:943:67"
                  },
                  {
                    "body": {
                      "nativeSrc": "10078:391:67",
                      "nodeType": "YulBlock",
                      "src": "10078:391:67",
                      "statements": [
                        {
                          "body": {
                            "nativeSrc": "10124:83:67",
                            "nodeType": "YulBlock",
                            "src": "10124:83:67",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
                                    "nativeSrc": "10126:77:67",
                                    "nodeType": "YulIdentifier",
                                    "src": "10126:77:67"
                                  },
                                  "nativeSrc": "10126:79:67",
                                  "nodeType": "YulFunctionCall",
                                  "src": "10126:79:67"
                                },
                                "nativeSrc": "10126:79:67",
                                "nodeType": "YulExpressionStatement",
                                "src": "10126:79:67"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nativeSrc": "10099:7:67",
                                    "nodeType": "YulIdentifier",
                                    "src": "10099:7:67"
                                  },
                                  {
                                    "name": "headStart",
                                    "nativeSrc": "10108:9:67",
                                    "nodeType": "YulIdentifier",
                                    "src": "10108:9:67"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nativeSrc": "10095:3:67",
                                  "nodeType": "YulIdentifier",
                                  "src": "10095:3:67"
                                },
                                "nativeSrc": "10095:23:67",
                                "nodeType": "YulFunctionCall",
                                "src": "10095:23:67"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "10120:2:67",
                                "nodeType": "YulLiteral",
                                "src": "10120:2:67",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nativeSrc": "10091:3:67",
                              "nodeType": "YulIdentifier",
                              "src": "10091:3:67"
                            },
                            "nativeSrc": "10091:32:67",
                            "nodeType": "YulFunctionCall",
                            "src": "10091:32:67"
                          },
                          "nativeSrc": "10088:119:67",
                          "nodeType": "YulIf",
                          "src": "10088:119:67"
                        },
                        {
                          "nativeSrc": "10217:117:67",
                          "nodeType": "YulBlock",
                          "src": "10217:117:67",
                          "statements": [
                            {
                              "nativeSrc": "10232:15:67",
                              "nodeType": "YulVariableDeclaration",
                              "src": "10232:15:67",
                              "value": {
                                "kind": "number",
                                "nativeSrc": "10246:1:67",
                                "nodeType": "YulLiteral",
                                "src": "10246:1:67",
                                "type": "",
                                "value": "0"
                              },
                              "variables": [
                                {
                                  "name": "offset",
                                  "nativeSrc": "10236:6:67",
                                  "nodeType": "YulTypedName",
                                  "src": "10236:6:67",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "nativeSrc": "10261:63:67",
                              "nodeType": "YulAssignment",
                              "src": "10261:63:67",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nativeSrc": "10296:9:67",
                                        "nodeType": "YulIdentifier",
                                        "src": "10296:9:67"
                                      },
                                      {
                                        "name": "offset",
                                        "nativeSrc": "10307:6:67",
                                        "nodeType": "YulIdentifier",
                                        "src": "10307:6:67"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "10292:3:67",
                                      "nodeType": "YulIdentifier",
                                      "src": "10292:3:67"
                                    },
                                    "nativeSrc": "10292:22:67",
                                    "nodeType": "YulFunctionCall",
                                    "src": "10292:22:67"
                                  },
                                  {
                                    "name": "dataEnd",
                                    "nativeSrc": "10316:7:67",
                                    "nodeType": "YulIdentifier",
                                    "src": "10316:7:67"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_decode_t_address",
                                  "nativeSrc": "10271:20:67",
                                  "nodeType": "YulIdentifier",
                                  "src": "10271:20:67"
                                },
                                "nativeSrc": "10271:53:67",
                                "nodeType": "YulFunctionCall",
                                "src": "10271:53:67"
                              },
                              "variableNames": [
                                {
                                  "name": "value0",
                                  "nativeSrc": "10261:6:67",
                                  "nodeType": "YulIdentifier",
                                  "src": "10261:6:67"
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "nativeSrc": "10344:118:67",
                          "nodeType": "YulBlock",
                          "src": "10344:118:67",
                          "statements": [
                            {
                              "nativeSrc": "10359:16:67",
                              "nodeType": "YulVariableDeclaration",
                              "src": "10359:16:67",
                              "value": {
                                "kind": "number",
                                "nativeSrc": "10373:2:67",
                                "nodeType": "YulLiteral",
                                "src": "10373:2:67",
                                "type": "",
                                "value": "32"
                              },
                              "variables": [
                                {
                                  "name": "offset",
                                  "nativeSrc": "10363:6:67",
                                  "nodeType": "YulTypedName",
                                  "src": "10363:6:67",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "nativeSrc": "10389:63:67",
                              "nodeType": "YulAssignment",
                              "src": "10389:63:67",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nativeSrc": "10424:9:67",
                                        "nodeType": "YulIdentifier",
                                        "src": "10424:9:67"
                                      },
                                      {
                                        "name": "offset",
                                        "nativeSrc": "10435:6:67",
                                        "nodeType": "YulIdentifier",
                                        "src": "10435:6:67"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "10420:3:67",
                                      "nodeType": "YulIdentifier",
                                      "src": "10420:3:67"
                                    },
                                    "nativeSrc": "10420:22:67",
                                    "nodeType": "YulFunctionCall",
                                    "src": "10420:22:67"
                                  },
                                  {
                                    "name": "dataEnd",
                                    "nativeSrc": "10444:7:67",
                                    "nodeType": "YulIdentifier",
                                    "src": "10444:7:67"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_decode_t_address",
                                  "nativeSrc": "10399:20:67",
                                  "nodeType": "YulIdentifier",
                                  "src": "10399:20:67"
                                },
                                "nativeSrc": "10399:53:67",
                                "nodeType": "YulFunctionCall",
                                "src": "10399:53:67"
                              },
                              "variableNames": [
                                {
                                  "name": "value1",
                                  "nativeSrc": "10389:6:67",
                                  "nodeType": "YulIdentifier",
                                  "src": "10389:6:67"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_addresst_address",
                    "nativeSrc": "9995:474:67",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nativeSrc": "10040:9:67",
                        "nodeType": "YulTypedName",
                        "src": "10040:9:67",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nativeSrc": "10051:7:67",
                        "nodeType": "YulTypedName",
                        "src": "10051:7:67",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nativeSrc": "10063:6:67",
                        "nodeType": "YulTypedName",
                        "src": "10063:6:67",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nativeSrc": "10071:6:67",
                        "nodeType": "YulTypedName",
                        "src": "10071:6:67",
                        "type": ""
                      }
                    ],
                    "src": "9995:474:67"
                  },
                  {
                    "body": {
                      "nativeSrc": "10503:152:67",
                      "nodeType": "YulBlock",
                      "src": "10503:152:67",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nativeSrc": "10520:1:67",
                                "nodeType": "YulLiteral",
                                "src": "10520:1:67",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "10523:77:67",
                                "nodeType": "YulLiteral",
                                "src": "10523:77:67",
                                "type": "",
                                "value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nativeSrc": "10513:6:67",
                              "nodeType": "YulIdentifier",
                              "src": "10513:6:67"
                            },
                            "nativeSrc": "10513:88:67",
                            "nodeType": "YulFunctionCall",
                            "src": "10513:88:67"
                          },
                          "nativeSrc": "10513:88:67",
                          "nodeType": "YulExpressionStatement",
                          "src": "10513:88:67"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nativeSrc": "10617:1:67",
                                "nodeType": "YulLiteral",
                                "src": "10617:1:67",
                                "type": "",
                                "value": "4"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "10620:4:67",
                                "nodeType": "YulLiteral",
                                "src": "10620:4:67",
                                "type": "",
                                "value": "0x22"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nativeSrc": "10610:6:67",
                              "nodeType": "YulIdentifier",
                              "src": "10610:6:67"
                            },
                            "nativeSrc": "10610:15:67",
                            "nodeType": "YulFunctionCall",
                            "src": "10610:15:67"
                          },
                          "nativeSrc": "10610:15:67",
                          "nodeType": "YulExpressionStatement",
                          "src": "10610:15:67"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nativeSrc": "10641:1:67",
                                "nodeType": "YulLiteral",
                                "src": "10641:1:67",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "10644:4:67",
                                "nodeType": "YulLiteral",
                                "src": "10644:4:67",
                                "type": "",
                                "value": "0x24"
                              }
                            ],
                            "functionName": {
                              "name": "revert",
                              "nativeSrc": "10634:6:67",
                              "nodeType": "YulIdentifier",
                              "src": "10634:6:67"
                            },
                            "nativeSrc": "10634:15:67",
                            "nodeType": "YulFunctionCall",
                            "src": "10634:15:67"
                          },
                          "nativeSrc": "10634:15:67",
                          "nodeType": "YulExpressionStatement",
                          "src": "10634:15:67"
                        }
                      ]
                    },
                    "name": "panic_error_0x22",
                    "nativeSrc": "10475:180:67",
                    "nodeType": "YulFunctionDefinition",
                    "src": "10475:180:67"
                  },
                  {
                    "body": {
                      "nativeSrc": "10712:269:67",
                      "nodeType": "YulBlock",
                      "src": "10712:269:67",
                      "statements": [
                        {
                          "nativeSrc": "10722:22:67",
                          "nodeType": "YulAssignment",
                          "src": "10722:22:67",
                          "value": {
                            "arguments": [
                              {
                                "name": "data",
                                "nativeSrc": "10736:4:67",
                                "nodeType": "YulIdentifier",
                                "src": "10736:4:67"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "10742:1:67",
                                "nodeType": "YulLiteral",
                                "src": "10742:1:67",
                                "type": "",
                                "value": "2"
                              }
                            ],
                            "functionName": {
                              "name": "div",
                              "nativeSrc": "10732:3:67",
                              "nodeType": "YulIdentifier",
                              "src": "10732:3:67"
                            },
                            "nativeSrc": "10732:12:67",
                            "nodeType": "YulFunctionCall",
                            "src": "10732:12:67"
                          },
                          "variableNames": [
                            {
                              "name": "length",
                              "nativeSrc": "10722:6:67",
                              "nodeType": "YulIdentifier",
                              "src": "10722:6:67"
                            }
                          ]
                        },
                        {
                          "nativeSrc": "10753:38:67",
                          "nodeType": "YulVariableDeclaration",
                          "src": "10753:38:67",
                          "value": {
                            "arguments": [
                              {
                                "name": "data",
                                "nativeSrc": "10783:4:67",
                                "nodeType": "YulIdentifier",
                                "src": "10783:4:67"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "10789:1:67",
                                "nodeType": "YulLiteral",
                                "src": "10789:1:67",
                                "type": "",
                                "value": "1"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nativeSrc": "10779:3:67",
                              "nodeType": "YulIdentifier",
                              "src": "10779:3:67"
                            },
                            "nativeSrc": "10779:12:67",
                            "nodeType": "YulFunctionCall",
                            "src": "10779:12:67"
                          },
                          "variables": [
                            {
                              "name": "outOfPlaceEncoding",
                              "nativeSrc": "10757:18:67",
                              "nodeType": "YulTypedName",
                              "src": "10757:18:67",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nativeSrc": "10830:51:67",
                            "nodeType": "YulBlock",
                            "src": "10830:51:67",
                            "statements": [
                              {
                                "nativeSrc": "10844:27:67",
                                "nodeType": "YulAssignment",
                                "src": "10844:27:67",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "length",
                                      "nativeSrc": "10858:6:67",
                                      "nodeType": "YulIdentifier",
                                      "src": "10858:6:67"
                                    },
                                    {
                                      "kind": "number",
                                      "nativeSrc": "10866:4:67",
                                      "nodeType": "YulLiteral",
                                      "src": "10866:4:67",
                                      "type": "",
                                      "value": "0x7f"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "and",
                                    "nativeSrc": "10854:3:67",
                                    "nodeType": "YulIdentifier",
                                    "src": "10854:3:67"
                                  },
                                  "nativeSrc": "10854:17:67",
                                  "nodeType": "YulFunctionCall",
                                  "src": "10854:17:67"
                                },
                                "variableNames": [
                                  {
                                    "name": "length",
                                    "nativeSrc": "10844:6:67",
                                    "nodeType": "YulIdentifier",
                                    "src": "10844:6:67"
                                  }
                                ]
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "outOfPlaceEncoding",
                                "nativeSrc": "10810:18:67",
                                "nodeType": "YulIdentifier",
                                "src": "10810:18:67"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nativeSrc": "10803:6:67",
                              "nodeType": "YulIdentifier",
                              "src": "10803:6:67"
                            },
                            "nativeSrc": "10803:26:67",
                            "nodeType": "YulFunctionCall",
                            "src": "10803:26:67"
                          },
                          "nativeSrc": "10800:81:67",
                          "nodeType": "YulIf",
                          "src": "10800:81:67"
                        },
                        {
                          "body": {
                            "nativeSrc": "10933:42:67",
                            "nodeType": "YulBlock",
                            "src": "10933:42:67",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x22",
                                    "nativeSrc": "10947:16:67",
                                    "nodeType": "YulIdentifier",
                                    "src": "10947:16:67"
                                  },
                                  "nativeSrc": "10947:18:67",
                                  "nodeType": "YulFunctionCall",
                                  "src": "10947:18:67"
                                },
                                "nativeSrc": "10947:18:67",
                                "nodeType": "YulExpressionStatement",
                                "src": "10947:18:67"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "outOfPlaceEncoding",
                                "nativeSrc": "10897:18:67",
                                "nodeType": "YulIdentifier",
                                "src": "10897:18:67"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "length",
                                    "nativeSrc": "10920:6:67",
                                    "nodeType": "YulIdentifier",
                                    "src": "10920:6:67"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "10928:2:67",
                                    "nodeType": "YulLiteral",
                                    "src": "10928:2:67",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "lt",
                                  "nativeSrc": "10917:2:67",
                                  "nodeType": "YulIdentifier",
                                  "src": "10917:2:67"
                                },
                                "nativeSrc": "10917:14:67",
                                "nodeType": "YulFunctionCall",
                                "src": "10917:14:67"
                              }
                            ],
                            "functionName": {
                              "name": "eq",
                              "nativeSrc": "10894:2:67",
                              "nodeType": "YulIdentifier",
                              "src": "10894:2:67"
                            },
                            "nativeSrc": "10894:38:67",
                            "nodeType": "YulFunctionCall",
                            "src": "10894:38:67"
                          },
                          "nativeSrc": "10891:84:67",
                          "nodeType": "YulIf",
                          "src": "10891:84:67"
                        }
                      ]
                    },
                    "name": "extract_byte_array_length",
                    "nativeSrc": "10661:320:67",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "data",
                        "nativeSrc": "10696:4:67",
                        "nodeType": "YulTypedName",
                        "src": "10696:4:67",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "length",
                        "nativeSrc": "10705:6:67",
                        "nodeType": "YulTypedName",
                        "src": "10705:6:67",
                        "type": ""
                      }
                    ],
                    "src": "10661:320:67"
                  },
                  {
                    "body": {
                      "nativeSrc": "11141:288:67",
                      "nodeType": "YulBlock",
                      "src": "11141:288:67",
                      "statements": [
                        {
                          "nativeSrc": "11151:26:67",
                          "nodeType": "YulAssignment",
                          "src": "11151:26:67",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nativeSrc": "11163:9:67",
                                "nodeType": "YulIdentifier",
                                "src": "11163:9:67"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "11174:2:67",
                                "nodeType": "YulLiteral",
                                "src": "11174:2:67",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nativeSrc": "11159:3:67",
                              "nodeType": "YulIdentifier",
                              "src": "11159:3:67"
                            },
                            "nativeSrc": "11159:18:67",
                            "nodeType": "YulFunctionCall",
                            "src": "11159:18:67"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nativeSrc": "11151:4:67",
                              "nodeType": "YulIdentifier",
                              "src": "11151:4:67"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value0",
                                "nativeSrc": "11231:6:67",
                                "nodeType": "YulIdentifier",
                                "src": "11231:6:67"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nativeSrc": "11244:9:67",
                                    "nodeType": "YulIdentifier",
                                    "src": "11244:9:67"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "11255:1:67",
                                    "nodeType": "YulLiteral",
                                    "src": "11255:1:67",
                                    "type": "",
                                    "value": "0"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "11240:3:67",
                                  "nodeType": "YulIdentifier",
                                  "src": "11240:3:67"
                                },
                                "nativeSrc": "11240:17:67",
                                "nodeType": "YulFunctionCall",
                                "src": "11240:17:67"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_t_address_to_t_address_fromStack",
                              "nativeSrc": "11187:43:67",
                              "nodeType": "YulIdentifier",
                              "src": "11187:43:67"
                            },
                            "nativeSrc": "11187:71:67",
                            "nodeType": "YulFunctionCall",
                            "src": "11187:71:67"
                          },
                          "nativeSrc": "11187:71:67",
                          "nodeType": "YulExpressionStatement",
                          "src": "11187:71:67"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value1",
                                "nativeSrc": "11312:6:67",
                                "nodeType": "YulIdentifier",
                                "src": "11312:6:67"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nativeSrc": "11325:9:67",
                                    "nodeType": "YulIdentifier",
                                    "src": "11325:9:67"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "11336:2:67",
                                    "nodeType": "YulLiteral",
                                    "src": "11336:2:67",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "11321:3:67",
                                  "nodeType": "YulIdentifier",
                                  "src": "11321:3:67"
                                },
                                "nativeSrc": "11321:18:67",
                                "nodeType": "YulFunctionCall",
                                "src": "11321:18:67"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_t_uint256_to_t_uint256_fromStack",
                              "nativeSrc": "11268:43:67",
                              "nodeType": "YulIdentifier",
                              "src": "11268:43:67"
                            },
                            "nativeSrc": "11268:72:67",
                            "nodeType": "YulFunctionCall",
                            "src": "11268:72:67"
                          },
                          "nativeSrc": "11268:72:67",
                          "nodeType": "YulExpressionStatement",
                          "src": "11268:72:67"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value2",
                                "nativeSrc": "11394:6:67",
                                "nodeType": "YulIdentifier",
                                "src": "11394:6:67"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nativeSrc": "11407:9:67",
                                    "nodeType": "YulIdentifier",
                                    "src": "11407:9:67"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "11418:2:67",
                                    "nodeType": "YulLiteral",
                                    "src": "11418:2:67",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "11403:3:67",
                                  "nodeType": "YulIdentifier",
                                  "src": "11403:3:67"
                                },
                                "nativeSrc": "11403:18:67",
                                "nodeType": "YulFunctionCall",
                                "src": "11403:18:67"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_t_address_to_t_address_fromStack",
                              "nativeSrc": "11350:43:67",
                              "nodeType": "YulIdentifier",
                              "src": "11350:43:67"
                            },
                            "nativeSrc": "11350:72:67",
                            "nodeType": "YulFunctionCall",
                            "src": "11350:72:67"
                          },
                          "nativeSrc": "11350:72:67",
                          "nodeType": "YulExpressionStatement",
                          "src": "11350:72:67"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_address_t_uint256_t_address__to_t_address_t_uint256_t_address__fromStack_reversed",
                    "nativeSrc": "10987:442:67",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nativeSrc": "11097:9:67",
                        "nodeType": "YulTypedName",
                        "src": "11097:9:67",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nativeSrc": "11109:6:67",
                        "nodeType": "YulTypedName",
                        "src": "11109:6:67",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nativeSrc": "11117:6:67",
                        "nodeType": "YulTypedName",
                        "src": "11117:6:67",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nativeSrc": "11125:6:67",
                        "nodeType": "YulTypedName",
                        "src": "11125:6:67",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nativeSrc": "11136:4:67",
                        "nodeType": "YulTypedName",
                        "src": "11136:4:67",
                        "type": ""
                      }
                    ],
                    "src": "10987:442:67"
                  },
                  {
                    "body": {
                      "nativeSrc": "11561:206:67",
                      "nodeType": "YulBlock",
                      "src": "11561:206:67",
                      "statements": [
                        {
                          "nativeSrc": "11571:26:67",
                          "nodeType": "YulAssignment",
                          "src": "11571:26:67",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nativeSrc": "11583:9:67",
                                "nodeType": "YulIdentifier",
                                "src": "11583:9:67"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "11594:2:67",
                                "nodeType": "YulLiteral",
                                "src": "11594:2:67",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nativeSrc": "11579:3:67",
                              "nodeType": "YulIdentifier",
                              "src": "11579:3:67"
                            },
                            "nativeSrc": "11579:18:67",
                            "nodeType": "YulFunctionCall",
                            "src": "11579:18:67"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nativeSrc": "11571:4:67",
                              "nodeType": "YulIdentifier",
                              "src": "11571:4:67"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value0",
                                "nativeSrc": "11651:6:67",
                                "nodeType": "YulIdentifier",
                                "src": "11651:6:67"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nativeSrc": "11664:9:67",
                                    "nodeType": "YulIdentifier",
                                    "src": "11664:9:67"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "11675:1:67",
                                    "nodeType": "YulLiteral",
                                    "src": "11675:1:67",
                                    "type": "",
                                    "value": "0"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "11660:3:67",
                                  "nodeType": "YulIdentifier",
                                  "src": "11660:3:67"
                                },
                                "nativeSrc": "11660:17:67",
                                "nodeType": "YulFunctionCall",
                                "src": "11660:17:67"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_t_address_to_t_address_fromStack",
                              "nativeSrc": "11607:43:67",
                              "nodeType": "YulIdentifier",
                              "src": "11607:43:67"
                            },
                            "nativeSrc": "11607:71:67",
                            "nodeType": "YulFunctionCall",
                            "src": "11607:71:67"
                          },
                          "nativeSrc": "11607:71:67",
                          "nodeType": "YulExpressionStatement",
                          "src": "11607:71:67"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value1",
                                "nativeSrc": "11732:6:67",
                                "nodeType": "YulIdentifier",
                                "src": "11732:6:67"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nativeSrc": "11745:9:67",
                                    "nodeType": "YulIdentifier",
                                    "src": "11745:9:67"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "11756:2:67",
                                    "nodeType": "YulLiteral",
                                    "src": "11756:2:67",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "11741:3:67",
                                  "nodeType": "YulIdentifier",
                                  "src": "11741:3:67"
                                },
                                "nativeSrc": "11741:18:67",
                                "nodeType": "YulFunctionCall",
                                "src": "11741:18:67"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_t_uint256_to_t_uint256_fromStack",
                              "nativeSrc": "11688:43:67",
                              "nodeType": "YulIdentifier",
                              "src": "11688:43:67"
                            },
                            "nativeSrc": "11688:72:67",
                            "nodeType": "YulFunctionCall",
                            "src": "11688:72:67"
                          },
                          "nativeSrc": "11688:72:67",
                          "nodeType": "YulExpressionStatement",
                          "src": "11688:72:67"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed",
                    "nativeSrc": "11435:332:67",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nativeSrc": "11525:9:67",
                        "nodeType": "YulTypedName",
                        "src": "11525:9:67",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nativeSrc": "11537:6:67",
                        "nodeType": "YulTypedName",
                        "src": "11537:6:67",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nativeSrc": "11545:6:67",
                        "nodeType": "YulTypedName",
                        "src": "11545:6:67",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nativeSrc": "11556:4:67",
                        "nodeType": "YulTypedName",
                        "src": "11556:4:67",
                        "type": ""
                      }
                    ],
                    "src": "11435:332:67"
                  },
                  {
                    "body": {
                      "nativeSrc": "11801:152:67",
                      "nodeType": "YulBlock",
                      "src": "11801:152:67",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nativeSrc": "11818:1:67",
                                "nodeType": "YulLiteral",
                                "src": "11818:1:67",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "11821:77:67",
                                "nodeType": "YulLiteral",
                                "src": "11821:77:67",
                                "type": "",
                                "value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nativeSrc": "11811:6:67",
                              "nodeType": "YulIdentifier",
                              "src": "11811:6:67"
                            },
                            "nativeSrc": "11811:88:67",
                            "nodeType": "YulFunctionCall",
                            "src": "11811:88:67"
                          },
                          "nativeSrc": "11811:88:67",
                          "nodeType": "YulExpressionStatement",
                          "src": "11811:88:67"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nativeSrc": "11915:1:67",
                                "nodeType": "YulLiteral",
                                "src": "11915:1:67",
                                "type": "",
                                "value": "4"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "11918:4:67",
                                "nodeType": "YulLiteral",
                                "src": "11918:4:67",
                                "type": "",
                                "value": "0x11"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nativeSrc": "11908:6:67",
                              "nodeType": "YulIdentifier",
                              "src": "11908:6:67"
                            },
                            "nativeSrc": "11908:15:67",
                            "nodeType": "YulFunctionCall",
                            "src": "11908:15:67"
                          },
                          "nativeSrc": "11908:15:67",
                          "nodeType": "YulExpressionStatement",
                          "src": "11908:15:67"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nativeSrc": "11939:1:67",
                                "nodeType": "YulLiteral",
                                "src": "11939:1:67",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "11942:4:67",
                                "nodeType": "YulLiteral",
                                "src": "11942:4:67",
                                "type": "",
                                "value": "0x24"
                              }
                            ],
                            "functionName": {
                              "name": "revert",
                              "nativeSrc": "11932:6:67",
                              "nodeType": "YulIdentifier",
                              "src": "11932:6:67"
                            },
                            "nativeSrc": "11932:15:67",
                            "nodeType": "YulFunctionCall",
                            "src": "11932:15:67"
                          },
                          "nativeSrc": "11932:15:67",
                          "nodeType": "YulExpressionStatement",
                          "src": "11932:15:67"
                        }
                      ]
                    },
                    "name": "panic_error_0x11",
                    "nativeSrc": "11773:180:67",
                    "nodeType": "YulFunctionDefinition",
                    "src": "11773:180:67"
                  },
                  {
                    "body": {
                      "nativeSrc": "12002:190:67",
                      "nodeType": "YulBlock",
                      "src": "12002:190:67",
                      "statements": [
                        {
                          "nativeSrc": "12012:33:67",
                          "nodeType": "YulAssignment",
                          "src": "12012:33:67",
                          "value": {
                            "arguments": [
                              {
                                "name": "value",
                                "nativeSrc": "12039:5:67",
                                "nodeType": "YulIdentifier",
                                "src": "12039:5:67"
                              }
                            ],
                            "functionName": {
                              "name": "cleanup_t_uint256",
                              "nativeSrc": "12021:17:67",
                              "nodeType": "YulIdentifier",
                              "src": "12021:17:67"
                            },
                            "nativeSrc": "12021:24:67",
                            "nodeType": "YulFunctionCall",
                            "src": "12021:24:67"
                          },
                          "variableNames": [
                            {
                              "name": "value",
                              "nativeSrc": "12012:5:67",
                              "nodeType": "YulIdentifier",
                              "src": "12012:5:67"
                            }
                          ]
                        },
                        {
                          "body": {
                            "nativeSrc": "12135:22:67",
                            "nodeType": "YulBlock",
                            "src": "12135:22:67",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x11",
                                    "nativeSrc": "12137:16:67",
                                    "nodeType": "YulIdentifier",
                                    "src": "12137:16:67"
                                  },
                                  "nativeSrc": "12137:18:67",
                                  "nodeType": "YulFunctionCall",
                                  "src": "12137:18:67"
                                },
                                "nativeSrc": "12137:18:67",
                                "nodeType": "YulExpressionStatement",
                                "src": "12137:18:67"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "value",
                                "nativeSrc": "12060:5:67",
                                "nodeType": "YulIdentifier",
                                "src": "12060:5:67"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "12067:66:67",
                                "nodeType": "YulLiteral",
                                "src": "12067:66:67",
                                "type": "",
                                "value": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"
                              }
                            ],
                            "functionName": {
                              "name": "eq",
                              "nativeSrc": "12057:2:67",
                              "nodeType": "YulIdentifier",
                              "src": "12057:2:67"
                            },
                            "nativeSrc": "12057:77:67",
                            "nodeType": "YulFunctionCall",
                            "src": "12057:77:67"
                          },
                          "nativeSrc": "12054:103:67",
                          "nodeType": "YulIf",
                          "src": "12054:103:67"
                        },
                        {
                          "nativeSrc": "12166:20:67",
                          "nodeType": "YulAssignment",
                          "src": "12166:20:67",
                          "value": {
                            "arguments": [
                              {
                                "name": "value",
                                "nativeSrc": "12177:5:67",
                                "nodeType": "YulIdentifier",
                                "src": "12177:5:67"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "12184:1:67",
                                "nodeType": "YulLiteral",
                                "src": "12184:1:67",
                                "type": "",
                                "value": "1"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nativeSrc": "12173:3:67",
                              "nodeType": "YulIdentifier",
                              "src": "12173:3:67"
                            },
                            "nativeSrc": "12173:13:67",
                            "nodeType": "YulFunctionCall",
                            "src": "12173:13:67"
                          },
                          "variableNames": [
                            {
                              "name": "ret",
                              "nativeSrc": "12166:3:67",
                              "nodeType": "YulIdentifier",
                              "src": "12166:3:67"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "increment_t_uint256",
                    "nativeSrc": "11959:233:67",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nativeSrc": "11988:5:67",
                        "nodeType": "YulTypedName",
                        "src": "11988:5:67",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "ret",
                        "nativeSrc": "11998:3:67",
                        "nodeType": "YulTypedName",
                        "src": "11998:3:67",
                        "type": ""
                      }
                    ],
                    "src": "11959:233:67"
                  },
                  {
                    "body": {
                      "nativeSrc": "12226:152:67",
                      "nodeType": "YulBlock",
                      "src": "12226:152:67",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nativeSrc": "12243:1:67",
                                "nodeType": "YulLiteral",
                                "src": "12243:1:67",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "12246:77:67",
                                "nodeType": "YulLiteral",
                                "src": "12246:77:67",
                                "type": "",
                                "value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nativeSrc": "12236:6:67",
                              "nodeType": "YulIdentifier",
                              "src": "12236:6:67"
                            },
                            "nativeSrc": "12236:88:67",
                            "nodeType": "YulFunctionCall",
                            "src": "12236:88:67"
                          },
                          "nativeSrc": "12236:88:67",
                          "nodeType": "YulExpressionStatement",
                          "src": "12236:88:67"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nativeSrc": "12340:1:67",
                                "nodeType": "YulLiteral",
                                "src": "12340:1:67",
                                "type": "",
                                "value": "4"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "12343:4:67",
                                "nodeType": "YulLiteral",
                                "src": "12343:4:67",
                                "type": "",
                                "value": "0x32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nativeSrc": "12333:6:67",
                              "nodeType": "YulIdentifier",
                              "src": "12333:6:67"
                            },
                            "nativeSrc": "12333:15:67",
                            "nodeType": "YulFunctionCall",
                            "src": "12333:15:67"
                          },
                          "nativeSrc": "12333:15:67",
                          "nodeType": "YulExpressionStatement",
                          "src": "12333:15:67"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nativeSrc": "12364:1:67",
                                "nodeType": "YulLiteral",
                                "src": "12364:1:67",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "12367:4:67",
                                "nodeType": "YulLiteral",
                                "src": "12367:4:67",
                                "type": "",
                                "value": "0x24"
                              }
                            ],
                            "functionName": {
                              "name": "revert",
                              "nativeSrc": "12357:6:67",
                              "nodeType": "YulIdentifier",
                              "src": "12357:6:67"
                            },
                            "nativeSrc": "12357:15:67",
                            "nodeType": "YulFunctionCall",
                            "src": "12357:15:67"
                          },
                          "nativeSrc": "12357:15:67",
                          "nodeType": "YulExpressionStatement",
                          "src": "12357:15:67"
                        }
                      ]
                    },
                    "name": "panic_error_0x32",
                    "nativeSrc": "12198:180:67",
                    "nodeType": "YulFunctionDefinition",
                    "src": "12198:180:67"
                  },
                  {
                    "body": {
                      "nativeSrc": "12438:87:67",
                      "nodeType": "YulBlock",
                      "src": "12438:87:67",
                      "statements": [
                        {
                          "nativeSrc": "12448:11:67",
                          "nodeType": "YulAssignment",
                          "src": "12448:11:67",
                          "value": {
                            "name": "ptr",
                            "nativeSrc": "12456:3:67",
                            "nodeType": "YulIdentifier",
                            "src": "12456:3:67"
                          },
                          "variableNames": [
                            {
                              "name": "data",
                              "nativeSrc": "12448:4:67",
                              "nodeType": "YulIdentifier",
                              "src": "12448:4:67"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nativeSrc": "12476:1:67",
                                "nodeType": "YulLiteral",
                                "src": "12476:1:67",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "name": "ptr",
                                "nativeSrc": "12479:3:67",
                                "nodeType": "YulIdentifier",
                                "src": "12479:3:67"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nativeSrc": "12469:6:67",
                              "nodeType": "YulIdentifier",
                              "src": "12469:6:67"
                            },
                            "nativeSrc": "12469:14:67",
                            "nodeType": "YulFunctionCall",
                            "src": "12469:14:67"
                          },
                          "nativeSrc": "12469:14:67",
                          "nodeType": "YulExpressionStatement",
                          "src": "12469:14:67"
                        },
                        {
                          "nativeSrc": "12492:26:67",
                          "nodeType": "YulAssignment",
                          "src": "12492:26:67",
                          "value": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nativeSrc": "12510:1:67",
                                "nodeType": "YulLiteral",
                                "src": "12510:1:67",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "12513:4:67",
                                "nodeType": "YulLiteral",
                                "src": "12513:4:67",
                                "type": "",
                                "value": "0x20"
                              }
                            ],
                            "functionName": {
                              "name": "keccak256",
                              "nativeSrc": "12500:9:67",
                              "nodeType": "YulIdentifier",
                              "src": "12500:9:67"
                            },
                            "nativeSrc": "12500:18:67",
                            "nodeType": "YulFunctionCall",
                            "src": "12500:18:67"
                          },
                          "variableNames": [
                            {
                              "name": "data",
                              "nativeSrc": "12492:4:67",
                              "nodeType": "YulIdentifier",
                              "src": "12492:4:67"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "array_dataslot_t_string_storage",
                    "nativeSrc": "12384:141:67",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "ptr",
                        "nativeSrc": "12425:3:67",
                        "nodeType": "YulTypedName",
                        "src": "12425:3:67",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "data",
                        "nativeSrc": "12433:4:67",
                        "nodeType": "YulTypedName",
                        "src": "12433:4:67",
                        "type": ""
                      }
                    ],
                    "src": "12384:141:67"
                  },
                  {
                    "body": {
                      "nativeSrc": "12575:49:67",
                      "nodeType": "YulBlock",
                      "src": "12575:49:67",
                      "statements": [
                        {
                          "nativeSrc": "12585:33:67",
                          "nodeType": "YulAssignment",
                          "src": "12585:33:67",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nativeSrc": "12603:5:67",
                                    "nodeType": "YulIdentifier",
                                    "src": "12603:5:67"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "12610:2:67",
                                    "nodeType": "YulLiteral",
                                    "src": "12610:2:67",
                                    "type": "",
                                    "value": "31"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "12599:3:67",
                                  "nodeType": "YulIdentifier",
                                  "src": "12599:3:67"
                                },
                                "nativeSrc": "12599:14:67",
                                "nodeType": "YulFunctionCall",
                                "src": "12599:14:67"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "12615:2:67",
                                "nodeType": "YulLiteral",
                                "src": "12615:2:67",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "div",
                              "nativeSrc": "12595:3:67",
                              "nodeType": "YulIdentifier",
                              "src": "12595:3:67"
                            },
                            "nativeSrc": "12595:23:67",
                            "nodeType": "YulFunctionCall",
                            "src": "12595:23:67"
                          },
                          "variableNames": [
                            {
                              "name": "result",
                              "nativeSrc": "12585:6:67",
                              "nodeType": "YulIdentifier",
                              "src": "12585:6:67"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "divide_by_32_ceil",
                    "nativeSrc": "12531:93:67",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nativeSrc": "12558:5:67",
                        "nodeType": "YulTypedName",
                        "src": "12558:5:67",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "result",
                        "nativeSrc": "12568:6:67",
                        "nodeType": "YulTypedName",
                        "src": "12568:6:67",
                        "type": ""
                      }
                    ],
                    "src": "12531:93:67"
                  },
                  {
                    "body": {
                      "nativeSrc": "12683:54:67",
                      "nodeType": "YulBlock",
                      "src": "12683:54:67",
                      "statements": [
                        {
                          "nativeSrc": "12693:37:67",
                          "nodeType": "YulAssignment",
                          "src": "12693:37:67",
                          "value": {
                            "arguments": [
                              {
                                "name": "bits",
                                "nativeSrc": "12718:4:67",
                                "nodeType": "YulIdentifier",
                                "src": "12718:4:67"
                              },
                              {
                                "name": "value",
                                "nativeSrc": "12724:5:67",
                                "nodeType": "YulIdentifier",
                                "src": "12724:5:67"
                              }
                            ],
                            "functionName": {
                              "name": "shl",
                              "nativeSrc": "12714:3:67",
                              "nodeType": "YulIdentifier",
                              "src": "12714:3:67"
                            },
                            "nativeSrc": "12714:16:67",
                            "nodeType": "YulFunctionCall",
                            "src": "12714:16:67"
                          },
                          "variableNames": [
                            {
                              "name": "newValue",
                              "nativeSrc": "12693:8:67",
                              "nodeType": "YulIdentifier",
                              "src": "12693:8:67"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "shift_left_dynamic",
                    "nativeSrc": "12630:107:67",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "bits",
                        "nativeSrc": "12658:4:67",
                        "nodeType": "YulTypedName",
                        "src": "12658:4:67",
                        "type": ""
                      },
                      {
                        "name": "value",
                        "nativeSrc": "12664:5:67",
                        "nodeType": "YulTypedName",
                        "src": "12664:5:67",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "newValue",
                        "nativeSrc": "12674:8:67",
                        "nodeType": "YulTypedName",
                        "src": "12674:8:67",
                        "type": ""
                      }
                    ],
                    "src": "12630:107:67"
                  },
                  {
                    "body": {
                      "nativeSrc": "12819:317:67",
                      "nodeType": "YulBlock",
                      "src": "12819:317:67",
                      "statements": [
                        {
                          "nativeSrc": "12829:35:67",
                          "nodeType": "YulVariableDeclaration",
                          "src": "12829:35:67",
                          "value": {
                            "arguments": [
                              {
                                "name": "shiftBytes",
                                "nativeSrc": "12850:10:67",
                                "nodeType": "YulIdentifier",
                                "src": "12850:10:67"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "12862:1:67",
                                "nodeType": "YulLiteral",
                                "src": "12862:1:67",
                                "type": "",
                                "value": "8"
                              }
                            ],
                            "functionName": {
                              "name": "mul",
                              "nativeSrc": "12846:3:67",
                              "nodeType": "YulIdentifier",
                              "src": "12846:3:67"
                            },
                            "nativeSrc": "12846:18:67",
                            "nodeType": "YulFunctionCall",
                            "src": "12846:18:67"
                          },
                          "variables": [
                            {
                              "name": "shiftBits",
                              "nativeSrc": "12833:9:67",
                              "nodeType": "YulTypedName",
                              "src": "12833:9:67",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nativeSrc": "12873:109:67",
                          "nodeType": "YulVariableDeclaration",
                          "src": "12873:109:67",
                          "value": {
                            "arguments": [
                              {
                                "name": "shiftBits",
                                "nativeSrc": "12904:9:67",
                                "nodeType": "YulIdentifier",
                                "src": "12904:9:67"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "12915:66:67",
                                "nodeType": "YulLiteral",
                                "src": "12915:66:67",
                                "type": "",
                                "value": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"
                              }
                            ],
                            "functionName": {
                              "name": "shift_left_dynamic",
                              "nativeSrc": "12885:18:67",
                              "nodeType": "YulIdentifier",
                              "src": "12885:18:67"
                            },
                            "nativeSrc": "12885:97:67",
                            "nodeType": "YulFunctionCall",
                            "src": "12885:97:67"
                          },
                          "variables": [
                            {
                              "name": "mask",
                              "nativeSrc": "12877:4:67",
                              "nodeType": "YulTypedName",
                              "src": "12877:4:67",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nativeSrc": "12991:51:67",
                          "nodeType": "YulAssignment",
                          "src": "12991:51:67",
                          "value": {
                            "arguments": [
                              {
                                "name": "shiftBits",
                                "nativeSrc": "13022:9:67",
                                "nodeType": "YulIdentifier",
                                "src": "13022:9:67"
                              },
                              {
                                "name": "toInsert",
                                "nativeSrc": "13033:8:67",
                                "nodeType": "YulIdentifier",
                                "src": "13033:8:67"
                              }
                            ],
                            "functionName": {
                              "name": "shift_left_dynamic",
                              "nativeSrc": "13003:18:67",
                              "nodeType": "YulIdentifier",
                              "src": "13003:18:67"
                            },
                            "nativeSrc": "13003:39:67",
                            "nodeType": "YulFunctionCall",
                            "src": "13003:39:67"
                          },
                          "variableNames": [
                            {
                              "name": "toInsert",
                              "nativeSrc": "12991:8:67",
                              "nodeType": "YulIdentifier",
                              "src": "12991:8:67"
                            }
                          ]
                        },
                        {
                          "nativeSrc": "13051:30:67",
                          "nodeType": "YulAssignment",
                          "src": "13051:30:67",
                          "value": {
                            "arguments": [
                              {
                                "name": "value",
                                "nativeSrc": "13064:5:67",
                                "nodeType": "YulIdentifier",
                                "src": "13064:5:67"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "mask",
                                    "nativeSrc": "13075:4:67",
                                    "nodeType": "YulIdentifier",
                                    "src": "13075:4:67"
                                  }
                                ],
                                "functionName": {
                                  "name": "not",
                                  "nativeSrc": "13071:3:67",
                                  "nodeType": "YulIdentifier",
                                  "src": "13071:3:67"
                                },
                                "nativeSrc": "13071:9:67",
                                "nodeType": "YulFunctionCall",
                                "src": "13071:9:67"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nativeSrc": "13060:3:67",
                              "nodeType": "YulIdentifier",
                              "src": "13060:3:67"
                            },
                            "nativeSrc": "13060:21:67",
                            "nodeType": "YulFunctionCall",
                            "src": "13060:21:67"
                          },
                          "variableNames": [
                            {
                              "name": "value",
                              "nativeSrc": "13051:5:67",
                              "nodeType": "YulIdentifier",
                              "src": "13051:5:67"
                            }
                          ]
                        },
                        {
                          "nativeSrc": "13090:40:67",
                          "nodeType": "YulAssignment",
                          "src": "13090:40:67",
                          "value": {
                            "arguments": [
                              {
                                "name": "value",
                                "nativeSrc": "13103:5:67",
                                "nodeType": "YulIdentifier",
                                "src": "13103:5:67"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "toInsert",
                                    "nativeSrc": "13114:8:67",
                                    "nodeType": "YulIdentifier",
                                    "src": "13114:8:67"
                                  },
                                  {
                                    "name": "mask",
                                    "nativeSrc": "13124:4:67",
                                    "nodeType": "YulIdentifier",
                                    "src": "13124:4:67"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nativeSrc": "13110:3:67",
                                  "nodeType": "YulIdentifier",
                                  "src": "13110:3:67"
                                },
                                "nativeSrc": "13110:19:67",
                                "nodeType": "YulFunctionCall",
                                "src": "13110:19:67"
                              }
                            ],
                            "functionName": {
                              "name": "or",
                              "nativeSrc": "13100:2:67",
                              "nodeType": "YulIdentifier",
                              "src": "13100:2:67"
                            },
                            "nativeSrc": "13100:30:67",
                            "nodeType": "YulFunctionCall",
                            "src": "13100:30:67"
                          },
                          "variableNames": [
                            {
                              "name": "result",
                              "nativeSrc": "13090:6:67",
                              "nodeType": "YulIdentifier",
                              "src": "13090:6:67"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "update_byte_slice_dynamic32",
                    "nativeSrc": "12743:393:67",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nativeSrc": "12780:5:67",
                        "nodeType": "YulTypedName",
                        "src": "12780:5:67",
                        "type": ""
                      },
                      {
                        "name": "shiftBytes",
                        "nativeSrc": "12787:10:67",
                        "nodeType": "YulTypedName",
                        "src": "12787:10:67",
                        "type": ""
                      },
                      {
                        "name": "toInsert",
                        "nativeSrc": "12799:8:67",
                        "nodeType": "YulTypedName",
                        "src": "12799:8:67",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "result",
                        "nativeSrc": "12812:6:67",
                        "nodeType": "YulTypedName",
                        "src": "12812:6:67",
                        "type": ""
                      }
                    ],
                    "src": "12743:393:67"
                  },
                  {
                    "body": {
                      "nativeSrc": "13174:28:67",
                      "nodeType": "YulBlock",
                      "src": "13174:28:67",
                      "statements": [
                        {
                          "nativeSrc": "13184:12:67",
                          "nodeType": "YulAssignment",
                          "src": "13184:12:67",
                          "value": {
                            "name": "value",
                            "nativeSrc": "13191:5:67",
                            "nodeType": "YulIdentifier",
                            "src": "13191:5:67"
                          },
                          "variableNames": [
                            {
                              "name": "ret",
                              "nativeSrc": "13184:3:67",
                              "nodeType": "YulIdentifier",
                              "src": "13184:3:67"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "identity",
                    "nativeSrc": "13142:60:67",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nativeSrc": "13160:5:67",
                        "nodeType": "YulTypedName",
                        "src": "13160:5:67",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "ret",
                        "nativeSrc": "13170:3:67",
                        "nodeType": "YulTypedName",
                        "src": "13170:3:67",
                        "type": ""
                      }
                    ],
                    "src": "13142:60:67"
                  },
                  {
                    "body": {
                      "nativeSrc": "13268:82:67",
                      "nodeType": "YulBlock",
                      "src": "13268:82:67",
                      "statements": [
                        {
                          "nativeSrc": "13278:66:67",
                          "nodeType": "YulAssignment",
                          "src": "13278:66:67",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "value",
                                        "nativeSrc": "13336:5:67",
                                        "nodeType": "YulIdentifier",
                                        "src": "13336:5:67"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "cleanup_t_uint256",
                                      "nativeSrc": "13318:17:67",
                                      "nodeType": "YulIdentifier",
                                      "src": "13318:17:67"
                                    },
                                    "nativeSrc": "13318:24:67",
                                    "nodeType": "YulFunctionCall",
                                    "src": "13318:24:67"
                                  }
                                ],
                                "functionName": {
                                  "name": "identity",
                                  "nativeSrc": "13309:8:67",
                                  "nodeType": "YulIdentifier",
                                  "src": "13309:8:67"
                                },
                                "nativeSrc": "13309:34:67",
                                "nodeType": "YulFunctionCall",
                                "src": "13309:34:67"
                              }
                            ],
                            "functionName": {
                              "name": "cleanup_t_uint256",
                              "nativeSrc": "13291:17:67",
                              "nodeType": "YulIdentifier",
                              "src": "13291:17:67"
                            },
                            "nativeSrc": "13291:53:67",
                            "nodeType": "YulFunctionCall",
                            "src": "13291:53:67"
                          },
                          "variableNames": [
                            {
                              "name": "converted",
                              "nativeSrc": "13278:9:67",
                              "nodeType": "YulIdentifier",
                              "src": "13278:9:67"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "convert_t_uint256_to_t_uint256",
                    "nativeSrc": "13208:142:67",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nativeSrc": "13248:5:67",
                        "nodeType": "YulTypedName",
                        "src": "13248:5:67",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "converted",
                        "nativeSrc": "13258:9:67",
                        "nodeType": "YulTypedName",
                        "src": "13258:9:67",
                        "type": ""
                      }
                    ],
                    "src": "13208:142:67"
                  },
                  {
                    "body": {
                      "nativeSrc": "13403:28:67",
                      "nodeType": "YulBlock",
                      "src": "13403:28:67",
                      "statements": [
                        {
                          "nativeSrc": "13413:12:67",
                          "nodeType": "YulAssignment",
                          "src": "13413:12:67",
                          "value": {
                            "name": "value",
                            "nativeSrc": "13420:5:67",
                            "nodeType": "YulIdentifier",
                            "src": "13420:5:67"
                          },
                          "variableNames": [
                            {
                              "name": "ret",
                              "nativeSrc": "13413:3:67",
                              "nodeType": "YulIdentifier",
                              "src": "13413:3:67"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "prepare_store_t_uint256",
                    "nativeSrc": "13356:75:67",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nativeSrc": "13389:5:67",
                        "nodeType": "YulTypedName",
                        "src": "13389:5:67",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "ret",
                        "nativeSrc": "13399:3:67",
                        "nodeType": "YulTypedName",
                        "src": "13399:3:67",
                        "type": ""
                      }
                    ],
                    "src": "13356:75:67"
                  },
                  {
                    "body": {
                      "nativeSrc": "13513:193:67",
                      "nodeType": "YulBlock",
                      "src": "13513:193:67",
                      "statements": [
                        {
                          "nativeSrc": "13523:63:67",
                          "nodeType": "YulVariableDeclaration",
                          "src": "13523:63:67",
                          "value": {
                            "arguments": [
                              {
                                "name": "value_0",
                                "nativeSrc": "13578:7:67",
                                "nodeType": "YulIdentifier",
                                "src": "13578:7:67"
                              }
                            ],
                            "functionName": {
                              "name": "convert_t_uint256_to_t_uint256",
                              "nativeSrc": "13547:30:67",
                              "nodeType": "YulIdentifier",
                              "src": "13547:30:67"
                            },
                            "nativeSrc": "13547:39:67",
                            "nodeType": "YulFunctionCall",
                            "src": "13547:39:67"
                          },
                          "variables": [
                            {
                              "name": "convertedValue_0",
                              "nativeSrc": "13527:16:67",
                              "nodeType": "YulTypedName",
                              "src": "13527:16:67",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "slot",
                                "nativeSrc": "13602:4:67",
                                "nodeType": "YulIdentifier",
                                "src": "13602:4:67"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "slot",
                                        "nativeSrc": "13642:4:67",
                                        "nodeType": "YulIdentifier",
                                        "src": "13642:4:67"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "sload",
                                      "nativeSrc": "13636:5:67",
                                      "nodeType": "YulIdentifier",
                                      "src": "13636:5:67"
                                    },
                                    "nativeSrc": "13636:11:67",
                                    "nodeType": "YulFunctionCall",
                                    "src": "13636:11:67"
                                  },
                                  {
                                    "name": "offset",
                                    "nativeSrc": "13649:6:67",
                                    "nodeType": "YulIdentifier",
                                    "src": "13649:6:67"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "convertedValue_0",
                                        "nativeSrc": "13681:16:67",
                                        "nodeType": "YulIdentifier",
                                        "src": "13681:16:67"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "prepare_store_t_uint256",
                                      "nativeSrc": "13657:23:67",
                                      "nodeType": "YulIdentifier",
                                      "src": "13657:23:67"
                                    },
                                    "nativeSrc": "13657:41:67",
                                    "nodeType": "YulFunctionCall",
                                    "src": "13657:41:67"
                                  }
                                ],
                                "functionName": {
                                  "name": "update_byte_slice_dynamic32",
                                  "nativeSrc": "13608:27:67",
                                  "nodeType": "YulIdentifier",
                                  "src": "13608:27:67"
                                },
                                "nativeSrc": "13608:91:67",
                                "nodeType": "YulFunctionCall",
                                "src": "13608:91:67"
                              }
                            ],
                            "functionName": {
                              "name": "sstore",
                              "nativeSrc": "13595:6:67",
                              "nodeType": "YulIdentifier",
                              "src": "13595:6:67"
                            },
                            "nativeSrc": "13595:105:67",
                            "nodeType": "YulFunctionCall",
                            "src": "13595:105:67"
                          },
                          "nativeSrc": "13595:105:67",
                          "nodeType": "YulExpressionStatement",
                          "src": "13595:105:67"
                        }
                      ]
                    },
                    "name": "update_storage_value_t_uint256_to_t_uint256",
                    "nativeSrc": "13437:269:67",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "slot",
                        "nativeSrc": "13490:4:67",
                        "nodeType": "YulTypedName",
                        "src": "13490:4:67",
                        "type": ""
                      },
                      {
                        "name": "offset",
                        "nativeSrc": "13496:6:67",
                        "nodeType": "YulTypedName",
                        "src": "13496:6:67",
                        "type": ""
                      },
                      {
                        "name": "value_0",
                        "nativeSrc": "13504:7:67",
                        "nodeType": "YulTypedName",
                        "src": "13504:7:67",
                        "type": ""
                      }
                    ],
                    "src": "13437:269:67"
                  },
                  {
                    "body": {
                      "nativeSrc": "13761:24:67",
                      "nodeType": "YulBlock",
                      "src": "13761:24:67",
                      "statements": [
                        {
                          "nativeSrc": "13771:8:67",
                          "nodeType": "YulAssignment",
                          "src": "13771:8:67",
                          "value": {
                            "kind": "number",
                            "nativeSrc": "13778:1:67",
                            "nodeType": "YulLiteral",
                            "src": "13778:1:67",
                            "type": "",
                            "value": "0"
                          },
                          "variableNames": [
                            {
                              "name": "ret",
                              "nativeSrc": "13771:3:67",
                              "nodeType": "YulIdentifier",
                              "src": "13771:3:67"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "zero_value_for_split_t_uint256",
                    "nativeSrc": "13712:73:67",
                    "nodeType": "YulFunctionDefinition",
                    "returnVariables": [
                      {
                        "name": "ret",
                        "nativeSrc": "13757:3:67",
                        "nodeType": "YulTypedName",
                        "src": "13757:3:67",
                        "type": ""
                      }
                    ],
                    "src": "13712:73:67"
                  },
                  {
                    "body": {
                      "nativeSrc": "13844:136:67",
                      "nodeType": "YulBlock",
                      "src": "13844:136:67",
                      "statements": [
                        {
                          "nativeSrc": "13854:46:67",
                          "nodeType": "YulVariableDeclaration",
                          "src": "13854:46:67",
                          "value": {
                            "arguments": [],
                            "functionName": {
                              "name": "zero_value_for_split_t_uint256",
                              "nativeSrc": "13868:30:67",
                              "nodeType": "YulIdentifier",
                              "src": "13868:30:67"
                            },
                            "nativeSrc": "13868:32:67",
                            "nodeType": "YulFunctionCall",
                            "src": "13868:32:67"
                          },
                          "variables": [
                            {
                              "name": "zero_0",
                              "nativeSrc": "13858:6:67",
                              "nodeType": "YulTypedName",
                              "src": "13858:6:67",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "slot",
                                "nativeSrc": "13953:4:67",
                                "nodeType": "YulIdentifier",
                                "src": "13953:4:67"
                              },
                              {
                                "name": "offset",
                                "nativeSrc": "13959:6:67",
                                "nodeType": "YulIdentifier",
                                "src": "13959:6:67"
                              },
                              {
                                "name": "zero_0",
                                "nativeSrc": "13967:6:67",
                                "nodeType": "YulIdentifier",
                                "src": "13967:6:67"
                              }
                            ],
                            "functionName": {
                              "name": "update_storage_value_t_uint256_to_t_uint256",
                              "nativeSrc": "13909:43:67",
                              "nodeType": "YulIdentifier",
                              "src": "13909:43:67"
                            },
                            "nativeSrc": "13909:65:67",
                            "nodeType": "YulFunctionCall",
                            "src": "13909:65:67"
                          },
                          "nativeSrc": "13909:65:67",
                          "nodeType": "YulExpressionStatement",
                          "src": "13909:65:67"
                        }
                      ]
                    },
                    "name": "storage_set_to_zero_t_uint256",
                    "nativeSrc": "13791:189:67",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "slot",
                        "nativeSrc": "13830:4:67",
                        "nodeType": "YulTypedName",
                        "src": "13830:4:67",
                        "type": ""
                      },
                      {
                        "name": "offset",
                        "nativeSrc": "13836:6:67",
                        "nodeType": "YulTypedName",
                        "src": "13836:6:67",
                        "type": ""
                      }
                    ],
                    "src": "13791:189:67"
                  },
                  {
                    "body": {
                      "nativeSrc": "14036:136:67",
                      "nodeType": "YulBlock",
                      "src": "14036:136:67",
                      "statements": [
                        {
                          "body": {
                            "nativeSrc": "14103:63:67",
                            "nodeType": "YulBlock",
                            "src": "14103:63:67",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "start",
                                      "nativeSrc": "14147:5:67",
                                      "nodeType": "YulIdentifier",
                                      "src": "14147:5:67"
                                    },
                                    {
                                      "kind": "number",
                                      "nativeSrc": "14154:1:67",
                                      "nodeType": "YulLiteral",
                                      "src": "14154:1:67",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "storage_set_to_zero_t_uint256",
                                    "nativeSrc": "14117:29:67",
                                    "nodeType": "YulIdentifier",
                                    "src": "14117:29:67"
                                  },
                                  "nativeSrc": "14117:39:67",
                                  "nodeType": "YulFunctionCall",
                                  "src": "14117:39:67"
                                },
                                "nativeSrc": "14117:39:67",
                                "nodeType": "YulExpressionStatement",
                                "src": "14117:39:67"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "start",
                                "nativeSrc": "14056:5:67",
                                "nodeType": "YulIdentifier",
                                "src": "14056:5:67"
                              },
                              {
                                "name": "end",
                                "nativeSrc": "14063:3:67",
                                "nodeType": "YulIdentifier",
                                "src": "14063:3:67"
                              }
                            ],
                            "functionName": {
                              "name": "lt",
                              "nativeSrc": "14053:2:67",
                              "nodeType": "YulIdentifier",
                              "src": "14053:2:67"
                            },
                            "nativeSrc": "14053:14:67",
                            "nodeType": "YulFunctionCall",
                            "src": "14053:14:67"
                          },
                          "nativeSrc": "14046:120:67",
                          "nodeType": "YulForLoop",
                          "post": {
                            "nativeSrc": "14068:26:67",
                            "nodeType": "YulBlock",
                            "src": "14068:26:67",
                            "statements": [
                              {
                                "nativeSrc": "14070:22:67",
                                "nodeType": "YulAssignment",
                                "src": "14070:22:67",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "start",
                                      "nativeSrc": "14083:5:67",
                                      "nodeType": "YulIdentifier",
                                      "src": "14083:5:67"
                                    },
                                    {
                                      "kind": "number",
                                      "nativeSrc": "14090:1:67",
                                      "nodeType": "YulLiteral",
                                      "src": "14090:1:67",
                                      "type": "",
                                      "value": "1"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nativeSrc": "14079:3:67",
                                    "nodeType": "YulIdentifier",
                                    "src": "14079:3:67"
                                  },
                                  "nativeSrc": "14079:13:67",
                                  "nodeType": "YulFunctionCall",
                                  "src": "14079:13:67"
                                },
                                "variableNames": [
                                  {
                                    "name": "start",
                                    "nativeSrc": "14070:5:67",
                                    "nodeType": "YulIdentifier",
                                    "src": "14070:5:67"
                                  }
                                ]
                              }
                            ]
                          },
                          "pre": {
                            "nativeSrc": "14050:2:67",
                            "nodeType": "YulBlock",
                            "src": "14050:2:67",
                            "statements": []
                          },
                          "src": "14046:120:67"
                        }
                      ]
                    },
                    "name": "clear_storage_range_t_bytes1",
                    "nativeSrc": "13986:186:67",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "start",
                        "nativeSrc": "14024:5:67",
                        "nodeType": "YulTypedName",
                        "src": "14024:5:67",
                        "type": ""
                      },
                      {
                        "name": "end",
                        "nativeSrc": "14031:3:67",
                        "nodeType": "YulTypedName",
                        "src": "14031:3:67",
                        "type": ""
                      }
                    ],
                    "src": "13986:186:67"
                  },
                  {
                    "body": {
                      "nativeSrc": "14257:464:67",
                      "nodeType": "YulBlock",
                      "src": "14257:464:67",
                      "statements": [
                        {
                          "body": {
                            "nativeSrc": "14283:431:67",
                            "nodeType": "YulBlock",
                            "src": "14283:431:67",
                            "statements": [
                              {
                                "nativeSrc": "14297:54:67",
                                "nodeType": "YulVariableDeclaration",
                                "src": "14297:54:67",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "array",
                                      "nativeSrc": "14345:5:67",
                                      "nodeType": "YulIdentifier",
                                      "src": "14345:5:67"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "array_dataslot_t_string_storage",
                                    "nativeSrc": "14313:31:67",
                                    "nodeType": "YulIdentifier",
                                    "src": "14313:31:67"
                                  },
                                  "nativeSrc": "14313:38:67",
                                  "nodeType": "YulFunctionCall",
                                  "src": "14313:38:67"
                                },
                                "variables": [
                                  {
                                    "name": "dataArea",
                                    "nativeSrc": "14301:8:67",
                                    "nodeType": "YulTypedName",
                                    "src": "14301:8:67",
                                    "type": ""
                                  }
                                ]
                              },
                              {
                                "nativeSrc": "14364:63:67",
                                "nodeType": "YulVariableDeclaration",
                                "src": "14364:63:67",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "dataArea",
                                      "nativeSrc": "14387:8:67",
                                      "nodeType": "YulIdentifier",
                                      "src": "14387:8:67"
                                    },
                                    {
                                      "arguments": [
                                        {
                                          "name": "startIndex",
                                          "nativeSrc": "14415:10:67",
                                          "nodeType": "YulIdentifier",
                                          "src": "14415:10:67"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "divide_by_32_ceil",
                                        "nativeSrc": "14397:17:67",
                                        "nodeType": "YulIdentifier",
                                        "src": "14397:17:67"
                                      },
                                      "nativeSrc": "14397:29:67",
                                      "nodeType": "YulFunctionCall",
                                      "src": "14397:29:67"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nativeSrc": "14383:3:67",
                                    "nodeType": "YulIdentifier",
                                    "src": "14383:3:67"
                                  },
                                  "nativeSrc": "14383:44:67",
                                  "nodeType": "YulFunctionCall",
                                  "src": "14383:44:67"
                                },
                                "variables": [
                                  {
                                    "name": "deleteStart",
                                    "nativeSrc": "14368:11:67",
                                    "nodeType": "YulTypedName",
                                    "src": "14368:11:67",
                                    "type": ""
                                  }
                                ]
                              },
                              {
                                "body": {
                                  "nativeSrc": "14584:27:67",
                                  "nodeType": "YulBlock",
                                  "src": "14584:27:67",
                                  "statements": [
                                    {
                                      "nativeSrc": "14586:23:67",
                                      "nodeType": "YulAssignment",
                                      "src": "14586:23:67",
                                      "value": {
                                        "name": "dataArea",
                                        "nativeSrc": "14601:8:67",
                                        "nodeType": "YulIdentifier",
                                        "src": "14601:8:67"
                                      },
                                      "variableNames": [
                                        {
                                          "name": "deleteStart",
                                          "nativeSrc": "14586:11:67",
                                          "nodeType": "YulIdentifier",
                                          "src": "14586:11:67"
                                        }
                                      ]
                                    }
                                  ]
                                },
                                "condition": {
                                  "arguments": [
                                    {
                                      "name": "startIndex",
                                      "nativeSrc": "14568:10:67",
                                      "nodeType": "YulIdentifier",
                                      "src": "14568:10:67"
                                    },
                                    {
                                      "kind": "number",
                                      "nativeSrc": "14580:2:67",
                                      "nodeType": "YulLiteral",
                                      "src": "14580:2:67",
                                      "type": "",
                                      "value": "32"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "lt",
                                    "nativeSrc": "14565:2:67",
                                    "nodeType": "YulIdentifier",
                                    "src": "14565:2:67"
                                  },
                                  "nativeSrc": "14565:18:67",
                                  "nodeType": "YulFunctionCall",
                                  "src": "14565:18:67"
                                },
                                "nativeSrc": "14562:49:67",
                                "nodeType": "YulIf",
                                "src": "14562:49:67"
                              },
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "deleteStart",
                                      "nativeSrc": "14653:11:67",
                                      "nodeType": "YulIdentifier",
                                      "src": "14653:11:67"
                                    },
                                    {
                                      "arguments": [
                                        {
                                          "name": "dataArea",
                                          "nativeSrc": "14670:8:67",
                                          "nodeType": "YulIdentifier",
                                          "src": "14670:8:67"
                                        },
                                        {
                                          "arguments": [
                                            {
                                              "name": "len",
                                              "nativeSrc": "14698:3:67",
                                              "nodeType": "YulIdentifier",
                                              "src": "14698:3:67"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "divide_by_32_ceil",
                                            "nativeSrc": "14680:17:67",
                                            "nodeType": "YulIdentifier",
                                            "src": "14680:17:67"
                                          },
                                          "nativeSrc": "14680:22:67",
                                          "nodeType": "YulFunctionCall",
                                          "src": "14680:22:67"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nativeSrc": "14666:3:67",
                                        "nodeType": "YulIdentifier",
                                        "src": "14666:3:67"
                                      },
                                      "nativeSrc": "14666:37:67",
                                      "nodeType": "YulFunctionCall",
                                      "src": "14666:37:67"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "clear_storage_range_t_bytes1",
                                    "nativeSrc": "14624:28:67",
                                    "nodeType": "YulIdentifier",
                                    "src": "14624:28:67"
                                  },
                                  "nativeSrc": "14624:80:67",
                                  "nodeType": "YulFunctionCall",
                                  "src": "14624:80:67"
                                },
                                "nativeSrc": "14624:80:67",
                                "nodeType": "YulExpressionStatement",
                                "src": "14624:80:67"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "len",
                                "nativeSrc": "14274:3:67",
                                "nodeType": "YulIdentifier",
                                "src": "14274:3:67"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "14279:2:67",
                                "nodeType": "YulLiteral",
                                "src": "14279:2:67",
                                "type": "",
                                "value": "31"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nativeSrc": "14271:2:67",
                              "nodeType": "YulIdentifier",
                              "src": "14271:2:67"
                            },
                            "nativeSrc": "14271:11:67",
                            "nodeType": "YulFunctionCall",
                            "src": "14271:11:67"
                          },
                          "nativeSrc": "14268:446:67",
                          "nodeType": "YulIf",
                          "src": "14268:446:67"
                        }
                      ]
                    },
                    "name": "clean_up_bytearray_end_slots_t_string_storage",
                    "nativeSrc": "14178:543:67",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "array",
                        "nativeSrc": "14233:5:67",
                        "nodeType": "YulTypedName",
                        "src": "14233:5:67",
                        "type": ""
                      },
                      {
                        "name": "len",
                        "nativeSrc": "14240:3:67",
                        "nodeType": "YulTypedName",
                        "src": "14240:3:67",
                        "type": ""
                      },
                      {
                        "name": "startIndex",
                        "nativeSrc": "14245:10:67",
                        "nodeType": "YulTypedName",
                        "src": "14245:10:67",
                        "type": ""
                      }
                    ],
                    "src": "14178:543:67"
                  },
                  {
                    "body": {
                      "nativeSrc": "14790:54:67",
                      "nodeType": "YulBlock",
                      "src": "14790:54:67",
                      "statements": [
                        {
                          "nativeSrc": "14800:37:67",
                          "nodeType": "YulAssignment",
                          "src": "14800:37:67",
                          "value": {
                            "arguments": [
                              {
                                "name": "bits",
                                "nativeSrc": "14825:4:67",
                                "nodeType": "YulIdentifier",
                                "src": "14825:4:67"
                              },
                              {
                                "name": "value",
                                "nativeSrc": "14831:5:67",
                                "nodeType": "YulIdentifier",
                                "src": "14831:5:67"
                              }
                            ],
                            "functionName": {
                              "name": "shr",
                              "nativeSrc": "14821:3:67",
                              "nodeType": "YulIdentifier",
                              "src": "14821:3:67"
                            },
                            "nativeSrc": "14821:16:67",
                            "nodeType": "YulFunctionCall",
                            "src": "14821:16:67"
                          },
                          "variableNames": [
                            {
                              "name": "newValue",
                              "nativeSrc": "14800:8:67",
                              "nodeType": "YulIdentifier",
                              "src": "14800:8:67"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "shift_right_unsigned_dynamic",
                    "nativeSrc": "14727:117:67",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "bits",
                        "nativeSrc": "14765:4:67",
                        "nodeType": "YulTypedName",
                        "src": "14765:4:67",
                        "type": ""
                      },
                      {
                        "name": "value",
                        "nativeSrc": "14771:5:67",
                        "nodeType": "YulTypedName",
                        "src": "14771:5:67",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "newValue",
                        "nativeSrc": "14781:8:67",
                        "nodeType": "YulTypedName",
                        "src": "14781:8:67",
                        "type": ""
                      }
                    ],
                    "src": "14727:117:67"
                  },
                  {
                    "body": {
                      "nativeSrc": "14901:118:67",
                      "nodeType": "YulBlock",
                      "src": "14901:118:67",
                      "statements": [
                        {
                          "nativeSrc": "14911:68:67",
                          "nodeType": "YulVariableDeclaration",
                          "src": "14911:68:67",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nativeSrc": "14960:1:67",
                                        "nodeType": "YulLiteral",
                                        "src": "14960:1:67",
                                        "type": "",
                                        "value": "8"
                                      },
                                      {
                                        "name": "bytes",
                                        "nativeSrc": "14963:5:67",
                                        "nodeType": "YulIdentifier",
                                        "src": "14963:5:67"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "mul",
                                      "nativeSrc": "14956:3:67",
                                      "nodeType": "YulIdentifier",
                                      "src": "14956:3:67"
                                    },
                                    "nativeSrc": "14956:13:67",
                                    "nodeType": "YulFunctionCall",
                                    "src": "14956:13:67"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nativeSrc": "14975:1:67",
                                        "nodeType": "YulLiteral",
                                        "src": "14975:1:67",
                                        "type": "",
                                        "value": "0"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "not",
                                      "nativeSrc": "14971:3:67",
                                      "nodeType": "YulIdentifier",
                                      "src": "14971:3:67"
                                    },
                                    "nativeSrc": "14971:6:67",
                                    "nodeType": "YulFunctionCall",
                                    "src": "14971:6:67"
                                  }
                                ],
                                "functionName": {
                                  "name": "shift_right_unsigned_dynamic",
                                  "nativeSrc": "14927:28:67",
                                  "nodeType": "YulIdentifier",
                                  "src": "14927:28:67"
                                },
                                "nativeSrc": "14927:51:67",
                                "nodeType": "YulFunctionCall",
                                "src": "14927:51:67"
                              }
                            ],
                            "functionName": {
                              "name": "not",
                              "nativeSrc": "14923:3:67",
                              "nodeType": "YulIdentifier",
                              "src": "14923:3:67"
                            },
                            "nativeSrc": "14923:56:67",
                            "nodeType": "YulFunctionCall",
                            "src": "14923:56:67"
                          },
                          "variables": [
                            {
                              "name": "mask",
                              "nativeSrc": "14915:4:67",
                              "nodeType": "YulTypedName",
                              "src": "14915:4:67",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nativeSrc": "14988:25:67",
                          "nodeType": "YulAssignment",
                          "src": "14988:25:67",
                          "value": {
                            "arguments": [
                              {
                                "name": "data",
                                "nativeSrc": "15002:4:67",
                                "nodeType": "YulIdentifier",
                                "src": "15002:4:67"
                              },
                              {
                                "name": "mask",
                                "nativeSrc": "15008:4:67",
                                "nodeType": "YulIdentifier",
                                "src": "15008:4:67"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nativeSrc": "14998:3:67",
                              "nodeType": "YulIdentifier",
                              "src": "14998:3:67"
                            },
                            "nativeSrc": "14998:15:67",
                            "nodeType": "YulFunctionCall",
                            "src": "14998:15:67"
                          },
                          "variableNames": [
                            {
                              "name": "result",
                              "nativeSrc": "14988:6:67",
                              "nodeType": "YulIdentifier",
                              "src": "14988:6:67"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "mask_bytes_dynamic",
                    "nativeSrc": "14850:169:67",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "data",
                        "nativeSrc": "14878:4:67",
                        "nodeType": "YulTypedName",
                        "src": "14878:4:67",
                        "type": ""
                      },
                      {
                        "name": "bytes",
                        "nativeSrc": "14884:5:67",
                        "nodeType": "YulTypedName",
                        "src": "14884:5:67",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "result",
                        "nativeSrc": "14894:6:67",
                        "nodeType": "YulTypedName",
                        "src": "14894:6:67",
                        "type": ""
                      }
                    ],
                    "src": "14850:169:67"
                  },
                  {
                    "body": {
                      "nativeSrc": "15105:214:67",
                      "nodeType": "YulBlock",
                      "src": "15105:214:67",
                      "statements": [
                        {
                          "nativeSrc": "15238:37:67",
                          "nodeType": "YulAssignment",
                          "src": "15238:37:67",
                          "value": {
                            "arguments": [
                              {
                                "name": "data",
                                "nativeSrc": "15265:4:67",
                                "nodeType": "YulIdentifier",
                                "src": "15265:4:67"
                              },
                              {
                                "name": "len",
                                "nativeSrc": "15271:3:67",
                                "nodeType": "YulIdentifier",
                                "src": "15271:3:67"
                              }
                            ],
                            "functionName": {
                              "name": "mask_bytes_dynamic",
                              "nativeSrc": "15246:18:67",
                              "nodeType": "YulIdentifier",
                              "src": "15246:18:67"
                            },
                            "nativeSrc": "15246:29:67",
                            "nodeType": "YulFunctionCall",
                            "src": "15246:29:67"
                          },
                          "variableNames": [
                            {
                              "name": "data",
                              "nativeSrc": "15238:4:67",
                              "nodeType": "YulIdentifier",
                              "src": "15238:4:67"
                            }
                          ]
                        },
                        {
                          "nativeSrc": "15284:29:67",
                          "nodeType": "YulAssignment",
                          "src": "15284:29:67",
                          "value": {
                            "arguments": [
                              {
                                "name": "data",
                                "nativeSrc": "15295:4:67",
                                "nodeType": "YulIdentifier",
                                "src": "15295:4:67"
                              },
                              {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nativeSrc": "15305:1:67",
                                    "nodeType": "YulLiteral",
                                    "src": "15305:1:67",
                                    "type": "",
                                    "value": "2"
                                  },
                                  {
                                    "name": "len",
                                    "nativeSrc": "15308:3:67",
                                    "nodeType": "YulIdentifier",
                                    "src": "15308:3:67"
                                  }
                                ],
                                "functionName": {
                                  "name": "mul",
                                  "nativeSrc": "15301:3:67",
                                  "nodeType": "YulIdentifier",
                                  "src": "15301:3:67"
                                },
                                "nativeSrc": "15301:11:67",
                                "nodeType": "YulFunctionCall",
                                "src": "15301:11:67"
                              }
                            ],
                            "functionName": {
                              "name": "or",
                              "nativeSrc": "15292:2:67",
                              "nodeType": "YulIdentifier",
                              "src": "15292:2:67"
                            },
                            "nativeSrc": "15292:21:67",
                            "nodeType": "YulFunctionCall",
                            "src": "15292:21:67"
                          },
                          "variableNames": [
                            {
                              "name": "used",
                              "nativeSrc": "15284:4:67",
                              "nodeType": "YulIdentifier",
                              "src": "15284:4:67"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "extract_used_part_and_set_length_of_short_byte_array",
                    "nativeSrc": "15024:295:67",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "data",
                        "nativeSrc": "15086:4:67",
                        "nodeType": "YulTypedName",
                        "src": "15086:4:67",
                        "type": ""
                      },
                      {
                        "name": "len",
                        "nativeSrc": "15092:3:67",
                        "nodeType": "YulTypedName",
                        "src": "15092:3:67",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "used",
                        "nativeSrc": "15100:4:67",
                        "nodeType": "YulTypedName",
                        "src": "15100:4:67",
                        "type": ""
                      }
                    ],
                    "src": "15024:295:67"
                  },
                  {
                    "body": {
                      "nativeSrc": "15416:1303:67",
                      "nodeType": "YulBlock",
                      "src": "15416:1303:67",
                      "statements": [
                        {
                          "nativeSrc": "15427:51:67",
                          "nodeType": "YulVariableDeclaration",
                          "src": "15427:51:67",
                          "value": {
                            "arguments": [
                              {
                                "name": "src",
                                "nativeSrc": "15474:3:67",
                                "nodeType": "YulIdentifier",
                                "src": "15474:3:67"
                              }
                            ],
                            "functionName": {
                              "name": "array_length_t_string_memory_ptr",
                              "nativeSrc": "15441:32:67",
                              "nodeType": "YulIdentifier",
                              "src": "15441:32:67"
                            },
                            "nativeSrc": "15441:37:67",
                            "nodeType": "YulFunctionCall",
                            "src": "15441:37:67"
                          },
                          "variables": [
                            {
                              "name": "newLen",
                              "nativeSrc": "15431:6:67",
                              "nodeType": "YulTypedName",
                              "src": "15431:6:67",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nativeSrc": "15563:22:67",
                            "nodeType": "YulBlock",
                            "src": "15563:22:67",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x41",
                                    "nativeSrc": "15565:16:67",
                                    "nodeType": "YulIdentifier",
                                    "src": "15565:16:67"
                                  },
                                  "nativeSrc": "15565:18:67",
                                  "nodeType": "YulFunctionCall",
                                  "src": "15565:18:67"
                                },
                                "nativeSrc": "15565:18:67",
                                "nodeType": "YulExpressionStatement",
                                "src": "15565:18:67"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "newLen",
                                "nativeSrc": "15535:6:67",
                                "nodeType": "YulIdentifier",
                                "src": "15535:6:67"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "15543:18:67",
                                "nodeType": "YulLiteral",
                                "src": "15543:18:67",
                                "type": "",
                                "value": "0xffffffffffffffff"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nativeSrc": "15532:2:67",
                              "nodeType": "YulIdentifier",
                              "src": "15532:2:67"
                            },
                            "nativeSrc": "15532:30:67",
                            "nodeType": "YulFunctionCall",
                            "src": "15532:30:67"
                          },
                          "nativeSrc": "15529:56:67",
                          "nodeType": "YulIf",
                          "src": "15529:56:67"
                        },
                        {
                          "nativeSrc": "15595:52:67",
                          "nodeType": "YulVariableDeclaration",
                          "src": "15595:52:67",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "slot",
                                    "nativeSrc": "15641:4:67",
                                    "nodeType": "YulIdentifier",
                                    "src": "15641:4:67"
                                  }
                                ],
                                "functionName": {
                                  "name": "sload",
                                  "nativeSrc": "15635:5:67",
                                  "nodeType": "YulIdentifier",
                                  "src": "15635:5:67"
                                },
                                "nativeSrc": "15635:11:67",
                                "nodeType": "YulFunctionCall",
                                "src": "15635:11:67"
                              }
                            ],
                            "functionName": {
                              "name": "extract_byte_array_length",
                              "nativeSrc": "15609:25:67",
                              "nodeType": "YulIdentifier",
                              "src": "15609:25:67"
                            },
                            "nativeSrc": "15609:38:67",
                            "nodeType": "YulFunctionCall",
                            "src": "15609:38:67"
                          },
                          "variables": [
                            {
                              "name": "oldLen",
                              "nativeSrc": "15599:6:67",
                              "nodeType": "YulTypedName",
                              "src": "15599:6:67",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "slot",
                                "nativeSrc": "15740:4:67",
                                "nodeType": "YulIdentifier",
                                "src": "15740:4:67"
                              },
                              {
                                "name": "oldLen",
                                "nativeSrc": "15746:6:67",
                                "nodeType": "YulIdentifier",
                                "src": "15746:6:67"
                              },
                              {
                                "name": "newLen",
                                "nativeSrc": "15754:6:67",
                                "nodeType": "YulIdentifier",
                                "src": "15754:6:67"
                              }
                            ],
                            "functionName": {
                              "name": "clean_up_bytearray_end_slots_t_string_storage",
                              "nativeSrc": "15694:45:67",
                              "nodeType": "YulIdentifier",
                              "src": "15694:45:67"
                            },
                            "nativeSrc": "15694:67:67",
                            "nodeType": "YulFunctionCall",
                            "src": "15694:67:67"
                          },
                          "nativeSrc": "15694:67:67",
                          "nodeType": "YulExpressionStatement",
                          "src": "15694:67:67"
                        },
                        {
                          "nativeSrc": "15771:18:67",
                          "nodeType": "YulVariableDeclaration",
                          "src": "15771:18:67",
                          "value": {
                            "kind": "number",
                            "nativeSrc": "15788:1:67",
                            "nodeType": "YulLiteral",
                            "src": "15788:1:67",
                            "type": "",
                            "value": "0"
                          },
                          "variables": [
                            {
                              "name": "srcOffset",
                              "nativeSrc": "15775:9:67",
                              "nodeType": "YulTypedName",
                              "src": "15775:9:67",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nativeSrc": "15799:17:67",
                          "nodeType": "YulAssignment",
                          "src": "15799:17:67",
                          "value": {
                            "kind": "number",
                            "nativeSrc": "15812:4:67",
                            "nodeType": "YulLiteral",
                            "src": "15812:4:67",
                            "type": "",
                            "value": "0x20"
                          },
                          "variableNames": [
                            {
                              "name": "srcOffset",
                              "nativeSrc": "15799:9:67",
                              "nodeType": "YulIdentifier",
                              "src": "15799:9:67"
                            }
                          ]
                        },
                        {
                          "cases": [
                            {
                              "body": {
                                "nativeSrc": "15863:611:67",
                                "nodeType": "YulBlock",
                                "src": "15863:611:67",
                                "statements": [
                                  {
                                    "nativeSrc": "15877:37:67",
                                    "nodeType": "YulVariableDeclaration",
                                    "src": "15877:37:67",
                                    "value": {
                                      "arguments": [
                                        {
                                          "name": "newLen",
                                          "nativeSrc": "15896:6:67",
                                          "nodeType": "YulIdentifier",
                                          "src": "15896:6:67"
                                        },
                                        {
                                          "arguments": [
                                            {
                                              "kind": "number",
                                              "nativeSrc": "15908:4:67",
                                              "nodeType": "YulLiteral",
                                              "src": "15908:4:67",
                                              "type": "",
                                              "value": "0x1f"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "not",
                                            "nativeSrc": "15904:3:67",
                                            "nodeType": "YulIdentifier",
                                            "src": "15904:3:67"
                                          },
                                          "nativeSrc": "15904:9:67",
                                          "nodeType": "YulFunctionCall",
                                          "src": "15904:9:67"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "and",
                                        "nativeSrc": "15892:3:67",
                                        "nodeType": "YulIdentifier",
                                        "src": "15892:3:67"
                                      },
                                      "nativeSrc": "15892:22:67",
                                      "nodeType": "YulFunctionCall",
                                      "src": "15892:22:67"
                                    },
                                    "variables": [
                                      {
                                        "name": "loopEnd",
                                        "nativeSrc": "15881:7:67",
                                        "nodeType": "YulTypedName",
                                        "src": "15881:7:67",
                                        "type": ""
                                      }
                                    ]
                                  },
                                  {
                                    "nativeSrc": "15928:51:67",
                                    "nodeType": "YulVariableDeclaration",
                                    "src": "15928:51:67",
                                    "value": {
                                      "arguments": [
                                        {
                                          "name": "slot",
                                          "nativeSrc": "15974:4:67",
                                          "nodeType": "YulIdentifier",
                                          "src": "15974:4:67"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "array_dataslot_t_string_storage",
                                        "nativeSrc": "15942:31:67",
                                        "nodeType": "YulIdentifier",
                                        "src": "15942:31:67"
                                      },
                                      "nativeSrc": "15942:37:67",
                                      "nodeType": "YulFunctionCall",
                                      "src": "15942:37:67"
                                    },
                                    "variables": [
                                      {
                                        "name": "dstPtr",
                                        "nativeSrc": "15932:6:67",
                                        "nodeType": "YulTypedName",
                                        "src": "15932:6:67",
                                        "type": ""
                                      }
                                    ]
                                  },
                                  {
                                    "nativeSrc": "15992:10:67",
                                    "nodeType": "YulVariableDeclaration",
                                    "src": "15992:10:67",
                                    "value": {
                                      "kind": "number",
                                      "nativeSrc": "16001:1:67",
                                      "nodeType": "YulLiteral",
                                      "src": "16001:1:67",
                                      "type": "",
                                      "value": "0"
                                    },
                                    "variables": [
                                      {
                                        "name": "i",
                                        "nativeSrc": "15996:1:67",
                                        "nodeType": "YulTypedName",
                                        "src": "15996:1:67",
                                        "type": ""
                                      }
                                    ]
                                  },
                                  {
                                    "body": {
                                      "nativeSrc": "16060:163:67",
                                      "nodeType": "YulBlock",
                                      "src": "16060:163:67",
                                      "statements": [
                                        {
                                          "expression": {
                                            "arguments": [
                                              {
                                                "name": "dstPtr",
                                                "nativeSrc": "16085:6:67",
                                                "nodeType": "YulIdentifier",
                                                "src": "16085:6:67"
                                              },
                                              {
                                                "arguments": [
                                                  {
                                                    "arguments": [
                                                      {
                                                        "name": "src",
                                                        "nativeSrc": "16103:3:67",
                                                        "nodeType": "YulIdentifier",
                                                        "src": "16103:3:67"
                                                      },
                                                      {
                                                        "name": "srcOffset",
                                                        "nativeSrc": "16108:9:67",
                                                        "nodeType": "YulIdentifier",
                                                        "src": "16108:9:67"
                                                      }
                                                    ],
                                                    "functionName": {
                                                      "name": "add",
                                                      "nativeSrc": "16099:3:67",
                                                      "nodeType": "YulIdentifier",
                                                      "src": "16099:3:67"
                                                    },
                                                    "nativeSrc": "16099:19:67",
                                                    "nodeType": "YulFunctionCall",
                                                    "src": "16099:19:67"
                                                  }
                                                ],
                                                "functionName": {
                                                  "name": "mload",
                                                  "nativeSrc": "16093:5:67",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "16093:5:67"
                                                },
                                                "nativeSrc": "16093:26:67",
                                                "nodeType": "YulFunctionCall",
                                                "src": "16093:26:67"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "sstore",
                                              "nativeSrc": "16078:6:67",
                                              "nodeType": "YulIdentifier",
                                              "src": "16078:6:67"
                                            },
                                            "nativeSrc": "16078:42:67",
                                            "nodeType": "YulFunctionCall",
                                            "src": "16078:42:67"
                                          },
                                          "nativeSrc": "16078:42:67",
                                          "nodeType": "YulExpressionStatement",
                                          "src": "16078:42:67"
                                        },
                                        {
                                          "nativeSrc": "16137:24:67",
                                          "nodeType": "YulAssignment",
                                          "src": "16137:24:67",
                                          "value": {
                                            "arguments": [
                                              {
                                                "name": "dstPtr",
                                                "nativeSrc": "16151:6:67",
                                                "nodeType": "YulIdentifier",
                                                "src": "16151:6:67"
                                              },
                                              {
                                                "kind": "number",
                                                "nativeSrc": "16159:1:67",
                                                "nodeType": "YulLiteral",
                                                "src": "16159:1:67",
                                                "type": "",
                                                "value": "1"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "add",
                                              "nativeSrc": "16147:3:67",
                                              "nodeType": "YulIdentifier",
                                              "src": "16147:3:67"
                                            },
                                            "nativeSrc": "16147:14:67",
                                            "nodeType": "YulFunctionCall",
                                            "src": "16147:14:67"
                                          },
                                          "variableNames": [
                                            {
                                              "name": "dstPtr",
                                              "nativeSrc": "16137:6:67",
                                              "nodeType": "YulIdentifier",
                                              "src": "16137:6:67"
                                            }
                                          ]
                                        },
                                        {
                                          "nativeSrc": "16178:31:67",
                                          "nodeType": "YulAssignment",
                                          "src": "16178:31:67",
                                          "value": {
                                            "arguments": [
                                              {
                                                "name": "srcOffset",
                                                "nativeSrc": "16195:9:67",
                                                "nodeType": "YulIdentifier",
                                                "src": "16195:9:67"
                                              },
                                              {
                                                "kind": "number",
                                                "nativeSrc": "16206:2:67",
                                                "nodeType": "YulLiteral",
                                                "src": "16206:2:67",
                                                "type": "",
                                                "value": "32"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "add",
                                              "nativeSrc": "16191:3:67",
                                              "nodeType": "YulIdentifier",
                                              "src": "16191:3:67"
                                            },
                                            "nativeSrc": "16191:18:67",
                                            "nodeType": "YulFunctionCall",
                                            "src": "16191:18:67"
                                          },
                                          "variableNames": [
                                            {
                                              "name": "srcOffset",
                                              "nativeSrc": "16178:9:67",
                                              "nodeType": "YulIdentifier",
                                              "src": "16178:9:67"
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    "condition": {
                                      "arguments": [
                                        {
                                          "name": "i",
                                          "nativeSrc": "16026:1:67",
                                          "nodeType": "YulIdentifier",
                                          "src": "16026:1:67"
                                        },
                                        {
                                          "name": "loopEnd",
                                          "nativeSrc": "16029:7:67",
                                          "nodeType": "YulIdentifier",
                                          "src": "16029:7:67"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "lt",
                                        "nativeSrc": "16023:2:67",
                                        "nodeType": "YulIdentifier",
                                        "src": "16023:2:67"
                                      },
                                      "nativeSrc": "16023:14:67",
                                      "nodeType": "YulFunctionCall",
                                      "src": "16023:14:67"
                                    },
                                    "nativeSrc": "16015:208:67",
                                    "nodeType": "YulForLoop",
                                    "post": {
                                      "nativeSrc": "16038:21:67",
                                      "nodeType": "YulBlock",
                                      "src": "16038:21:67",
                                      "statements": [
                                        {
                                          "nativeSrc": "16040:17:67",
                                          "nodeType": "YulAssignment",
                                          "src": "16040:17:67",
                                          "value": {
                                            "arguments": [
                                              {
                                                "name": "i",
                                                "nativeSrc": "16049:1:67",
                                                "nodeType": "YulIdentifier",
                                                "src": "16049:1:67"
                                              },
                                              {
                                                "kind": "number",
                                                "nativeSrc": "16052:4:67",
                                                "nodeType": "YulLiteral",
                                                "src": "16052:4:67",
                                                "type": "",
                                                "value": "0x20"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "add",
                                              "nativeSrc": "16045:3:67",
                                              "nodeType": "YulIdentifier",
                                              "src": "16045:3:67"
                                            },
                                            "nativeSrc": "16045:12:67",
                                            "nodeType": "YulFunctionCall",
                                            "src": "16045:12:67"
                                          },
                                          "variableNames": [
                                            {
                                              "name": "i",
                                              "nativeSrc": "16040:1:67",
                                              "nodeType": "YulIdentifier",
                                              "src": "16040:1:67"
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    "pre": {
                                      "nativeSrc": "16019:3:67",
                                      "nodeType": "YulBlock",
                                      "src": "16019:3:67",
                                      "statements": []
                                    },
                                    "src": "16015:208:67"
                                  },
                                  {
                                    "body": {
                                      "nativeSrc": "16259:156:67",
                                      "nodeType": "YulBlock",
                                      "src": "16259:156:67",
                                      "statements": [
                                        {
                                          "nativeSrc": "16277:43:67",
                                          "nodeType": "YulVariableDeclaration",
                                          "src": "16277:43:67",
                                          "value": {
                                            "arguments": [
                                              {
                                                "arguments": [
                                                  {
                                                    "name": "src",
                                                    "nativeSrc": "16304:3:67",
                                                    "nodeType": "YulIdentifier",
                                                    "src": "16304:3:67"
                                                  },
                                                  {
                                                    "name": "srcOffset",
                                                    "nativeSrc": "16309:9:67",
                                                    "nodeType": "YulIdentifier",
                                                    "src": "16309:9:67"
                                                  }
                                                ],
                                                "functionName": {
                                                  "name": "add",
                                                  "nativeSrc": "16300:3:67",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "16300:3:67"
                                                },
                                                "nativeSrc": "16300:19:67",
                                                "nodeType": "YulFunctionCall",
                                                "src": "16300:19:67"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "mload",
                                              "nativeSrc": "16294:5:67",
                                              "nodeType": "YulIdentifier",
                                              "src": "16294:5:67"
                                            },
                                            "nativeSrc": "16294:26:67",
                                            "nodeType": "YulFunctionCall",
                                            "src": "16294:26:67"
                                          },
                                          "variables": [
                                            {
                                              "name": "lastValue",
                                              "nativeSrc": "16281:9:67",
                                              "nodeType": "YulTypedName",
                                              "src": "16281:9:67",
                                              "type": ""
                                            }
                                          ]
                                        },
                                        {
                                          "expression": {
                                            "arguments": [
                                              {
                                                "name": "dstPtr",
                                                "nativeSrc": "16344:6:67",
                                                "nodeType": "YulIdentifier",
                                                "src": "16344:6:67"
                                              },
                                              {
                                                "arguments": [
                                                  {
                                                    "name": "lastValue",
                                                    "nativeSrc": "16371:9:67",
                                                    "nodeType": "YulIdentifier",
                                                    "src": "16371:9:67"
                                                  },
                                                  {
                                                    "arguments": [
                                                      {
                                                        "name": "newLen",
                                                        "nativeSrc": "16386:6:67",
                                                        "nodeType": "YulIdentifier",
                                                        "src": "16386:6:67"
                                                      },
                                                      {
                                                        "kind": "number",
                                                        "nativeSrc": "16394:4:67",
                                                        "nodeType": "YulLiteral",
                                                        "src": "16394:4:67",
                                                        "type": "",
                                                        "value": "0x1f"
                                                      }
                                                    ],
                                                    "functionName": {
                                                      "name": "and",
                                                      "nativeSrc": "16382:3:67",
                                                      "nodeType": "YulIdentifier",
                                                      "src": "16382:3:67"
                                                    },
                                                    "nativeSrc": "16382:17:67",
                                                    "nodeType": "YulFunctionCall",
                                                    "src": "16382:17:67"
                                                  }
                                                ],
                                                "functionName": {
                                                  "name": "mask_bytes_dynamic",
                                                  "nativeSrc": "16352:18:67",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "16352:18:67"
                                                },
                                                "nativeSrc": "16352:48:67",
                                                "nodeType": "YulFunctionCall",
                                                "src": "16352:48:67"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "sstore",
                                              "nativeSrc": "16337:6:67",
                                              "nodeType": "YulIdentifier",
                                              "src": "16337:6:67"
                                            },
                                            "nativeSrc": "16337:64:67",
                                            "nodeType": "YulFunctionCall",
                                            "src": "16337:64:67"
                                          },
                                          "nativeSrc": "16337:64:67",
                                          "nodeType": "YulExpressionStatement",
                                          "src": "16337:64:67"
                                        }
                                      ]
                                    },
                                    "condition": {
                                      "arguments": [
                                        {
                                          "name": "loopEnd",
                                          "nativeSrc": "16242:7:67",
                                          "nodeType": "YulIdentifier",
                                          "src": "16242:7:67"
                                        },
                                        {
                                          "name": "newLen",
                                          "nativeSrc": "16251:6:67",
                                          "nodeType": "YulIdentifier",
                                          "src": "16251:6:67"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "lt",
                                        "nativeSrc": "16239:2:67",
                                        "nodeType": "YulIdentifier",
                                        "src": "16239:2:67"
                                      },
                                      "nativeSrc": "16239:19:67",
                                      "nodeType": "YulFunctionCall",
                                      "src": "16239:19:67"
                                    },
                                    "nativeSrc": "16236:179:67",
                                    "nodeType": "YulIf",
                                    "src": "16236:179:67"
                                  },
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "name": "slot",
                                          "nativeSrc": "16435:4:67",
                                          "nodeType": "YulIdentifier",
                                          "src": "16435:4:67"
                                        },
                                        {
                                          "arguments": [
                                            {
                                              "arguments": [
                                                {
                                                  "name": "newLen",
                                                  "nativeSrc": "16449:6:67",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "16449:6:67"
                                                },
                                                {
                                                  "kind": "number",
                                                  "nativeSrc": "16457:1:67",
                                                  "nodeType": "YulLiteral",
                                                  "src": "16457:1:67",
                                                  "type": "",
                                                  "value": "2"
                                                }
                                              ],
                                              "functionName": {
                                                "name": "mul",
                                                "nativeSrc": "16445:3:67",
                                                "nodeType": "YulIdentifier",
                                                "src": "16445:3:67"
                                              },
                                              "nativeSrc": "16445:14:67",
                                              "nodeType": "YulFunctionCall",
                                              "src": "16445:14:67"
                                            },
                                            {
                                              "kind": "number",
                                              "nativeSrc": "16461:1:67",
                                              "nodeType": "YulLiteral",
                                              "src": "16461:1:67",
                                              "type": "",
                                              "value": "1"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "add",
                                            "nativeSrc": "16441:3:67",
                                            "nodeType": "YulIdentifier",
                                            "src": "16441:3:67"
                                          },
                                          "nativeSrc": "16441:22:67",
                                          "nodeType": "YulFunctionCall",
                                          "src": "16441:22:67"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "sstore",
                                        "nativeSrc": "16428:6:67",
                                        "nodeType": "YulIdentifier",
                                        "src": "16428:6:67"
                                      },
                                      "nativeSrc": "16428:36:67",
                                      "nodeType": "YulFunctionCall",
                                      "src": "16428:36:67"
                                    },
                                    "nativeSrc": "16428:36:67",
                                    "nodeType": "YulExpressionStatement",
                                    "src": "16428:36:67"
                                  }
                                ]
                              },
                              "nativeSrc": "15856:618:67",
                              "nodeType": "YulCase",
                              "src": "15856:618:67",
                              "value": {
                                "kind": "number",
                                "nativeSrc": "15861:1:67",
                                "nodeType": "YulLiteral",
                                "src": "15861:1:67",
                                "type": "",
                                "value": "1"
                              }
                            },
                            {
                              "body": {
                                "nativeSrc": "16491:222:67",
                                "nodeType": "YulBlock",
                                "src": "16491:222:67",
                                "statements": [
                                  {
                                    "nativeSrc": "16505:14:67",
                                    "nodeType": "YulVariableDeclaration",
                                    "src": "16505:14:67",
                                    "value": {
                                      "kind": "number",
                                      "nativeSrc": "16518:1:67",
                                      "nodeType": "YulLiteral",
                                      "src": "16518:1:67",
                                      "type": "",
                                      "value": "0"
                                    },
                                    "variables": [
                                      {
                                        "name": "value",
                                        "nativeSrc": "16509:5:67",
                                        "nodeType": "YulTypedName",
                                        "src": "16509:5:67",
                                        "type": ""
                                      }
                                    ]
                                  },
                                  {
                                    "body": {
                                      "nativeSrc": "16542:67:67",
                                      "nodeType": "YulBlock",
                                      "src": "16542:67:67",
                                      "statements": [
                                        {
                                          "nativeSrc": "16560:35:67",
                                          "nodeType": "YulAssignment",
                                          "src": "16560:35:67",
                                          "value": {
                                            "arguments": [
                                              {
                                                "arguments": [
                                                  {
                                                    "name": "src",
                                                    "nativeSrc": "16579:3:67",
                                                    "nodeType": "YulIdentifier",
                                                    "src": "16579:3:67"
                                                  },
                                                  {
                                                    "name": "srcOffset",
                                                    "nativeSrc": "16584:9:67",
                                                    "nodeType": "YulIdentifier",
                                                    "src": "16584:9:67"
                                                  }
                                                ],
                                                "functionName": {
                                                  "name": "add",
                                                  "nativeSrc": "16575:3:67",
                                                  "nodeType": "YulIdentifier",
                                                  "src": "16575:3:67"
                                                },
                                                "nativeSrc": "16575:19:67",
                                                "nodeType": "YulFunctionCall",
                                                "src": "16575:19:67"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "mload",
                                              "nativeSrc": "16569:5:67",
                                              "nodeType": "YulIdentifier",
                                              "src": "16569:5:67"
                                            },
                                            "nativeSrc": "16569:26:67",
                                            "nodeType": "YulFunctionCall",
                                            "src": "16569:26:67"
                                          },
                                          "variableNames": [
                                            {
                                              "name": "value",
                                              "nativeSrc": "16560:5:67",
                                              "nodeType": "YulIdentifier",
                                              "src": "16560:5:67"
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    "condition": {
                                      "name": "newLen",
                                      "nativeSrc": "16535:6:67",
                                      "nodeType": "YulIdentifier",
                                      "src": "16535:6:67"
                                    },
                                    "nativeSrc": "16532:77:67",
                                    "nodeType": "YulIf",
                                    "src": "16532:77:67"
                                  },
                                  {
                                    "expression": {
                                      "arguments": [
                                        {
                                          "name": "slot",
                                          "nativeSrc": "16629:4:67",
                                          "nodeType": "YulIdentifier",
                                          "src": "16629:4:67"
                                        },
                                        {
                                          "arguments": [
                                            {
                                              "name": "value",
                                              "nativeSrc": "16688:5:67",
                                              "nodeType": "YulIdentifier",
                                              "src": "16688:5:67"
                                            },
                                            {
                                              "name": "newLen",
                                              "nativeSrc": "16695:6:67",
                                              "nodeType": "YulIdentifier",
                                              "src": "16695:6:67"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "extract_used_part_and_set_length_of_short_byte_array",
                                            "nativeSrc": "16635:52:67",
                                            "nodeType": "YulIdentifier",
                                            "src": "16635:52:67"
                                          },
                                          "nativeSrc": "16635:67:67",
                                          "nodeType": "YulFunctionCall",
                                          "src": "16635:67:67"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "sstore",
                                        "nativeSrc": "16622:6:67",
                                        "nodeType": "YulIdentifier",
                                        "src": "16622:6:67"
                                      },
                                      "nativeSrc": "16622:81:67",
                                      "nodeType": "YulFunctionCall",
                                      "src": "16622:81:67"
                                    },
                                    "nativeSrc": "16622:81:67",
                                    "nodeType": "YulExpressionStatement",
                                    "src": "16622:81:67"
                                  }
                                ]
                              },
                              "nativeSrc": "16483:230:67",
                              "nodeType": "YulCase",
                              "src": "16483:230:67",
                              "value": "default"
                            }
                          ],
                          "expression": {
                            "arguments": [
                              {
                                "name": "newLen",
                                "nativeSrc": "15836:6:67",
                                "nodeType": "YulIdentifier",
                                "src": "15836:6:67"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "15844:2:67",
                                "nodeType": "YulLiteral",
                                "src": "15844:2:67",
                                "type": "",
                                "value": "31"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nativeSrc": "15833:2:67",
                              "nodeType": "YulIdentifier",
                              "src": "15833:2:67"
                            },
                            "nativeSrc": "15833:14:67",
                            "nodeType": "YulFunctionCall",
                            "src": "15833:14:67"
                          },
                          "nativeSrc": "15826:887:67",
                          "nodeType": "YulSwitch",
                          "src": "15826:887:67"
                        }
                      ]
                    },
                    "name": "copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage",
                    "nativeSrc": "15324:1395:67",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "slot",
                        "nativeSrc": "15405:4:67",
                        "nodeType": "YulTypedName",
                        "src": "15405:4:67",
                        "type": ""
                      },
                      {
                        "name": "src",
                        "nativeSrc": "15411:3:67",
                        "nodeType": "YulTypedName",
                        "src": "15411:3:67",
                        "type": ""
                      }
                    ],
                    "src": "15324:1395:67"
                  },
                  {
                    "body": {
                      "nativeSrc": "16783:40:67",
                      "nodeType": "YulBlock",
                      "src": "16783:40:67",
                      "statements": [
                        {
                          "nativeSrc": "16794:22:67",
                          "nodeType": "YulAssignment",
                          "src": "16794:22:67",
                          "value": {
                            "arguments": [
                              {
                                "name": "value",
                                "nativeSrc": "16810:5:67",
                                "nodeType": "YulIdentifier",
                                "src": "16810:5:67"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nativeSrc": "16804:5:67",
                              "nodeType": "YulIdentifier",
                              "src": "16804:5:67"
                            },
                            "nativeSrc": "16804:12:67",
                            "nodeType": "YulFunctionCall",
                            "src": "16804:12:67"
                          },
                          "variableNames": [
                            {
                              "name": "length",
                              "nativeSrc": "16794:6:67",
                              "nodeType": "YulIdentifier",
                              "src": "16794:6:67"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "array_length_t_bytes_memory_ptr",
                    "nativeSrc": "16725:98:67",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nativeSrc": "16766:5:67",
                        "nodeType": "YulTypedName",
                        "src": "16766:5:67",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "length",
                        "nativeSrc": "16776:6:67",
                        "nodeType": "YulTypedName",
                        "src": "16776:6:67",
                        "type": ""
                      }
                    ],
                    "src": "16725:98:67"
                  },
                  {
                    "body": {
                      "nativeSrc": "16924:73:67",
                      "nodeType": "YulBlock",
                      "src": "16924:73:67",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nativeSrc": "16941:3:67",
                                "nodeType": "YulIdentifier",
                                "src": "16941:3:67"
                              },
                              {
                                "name": "length",
                                "nativeSrc": "16946:6:67",
                                "nodeType": "YulIdentifier",
                                "src": "16946:6:67"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nativeSrc": "16934:6:67",
                              "nodeType": "YulIdentifier",
                              "src": "16934:6:67"
                            },
                            "nativeSrc": "16934:19:67",
                            "nodeType": "YulFunctionCall",
                            "src": "16934:19:67"
                          },
                          "nativeSrc": "16934:19:67",
                          "nodeType": "YulExpressionStatement",
                          "src": "16934:19:67"
                        },
                        {
                          "nativeSrc": "16962:29:67",
                          "nodeType": "YulAssignment",
                          "src": "16962:29:67",
                          "value": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nativeSrc": "16981:3:67",
                                "nodeType": "YulIdentifier",
                                "src": "16981:3:67"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "16986:4:67",
                                "nodeType": "YulLiteral",
                                "src": "16986:4:67",
                                "type": "",
                                "value": "0x20"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nativeSrc": "16977:3:67",
                              "nodeType": "YulIdentifier",
                              "src": "16977:3:67"
                            },
                            "nativeSrc": "16977:14:67",
                            "nodeType": "YulFunctionCall",
                            "src": "16977:14:67"
                          },
                          "variableNames": [
                            {
                              "name": "updated_pos",
                              "nativeSrc": "16962:11:67",
                              "nodeType": "YulIdentifier",
                              "src": "16962:11:67"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack",
                    "nativeSrc": "16829:168:67",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "pos",
                        "nativeSrc": "16896:3:67",
                        "nodeType": "YulTypedName",
                        "src": "16896:3:67",
                        "type": ""
                      },
                      {
                        "name": "length",
                        "nativeSrc": "16901:6:67",
                        "nodeType": "YulTypedName",
                        "src": "16901:6:67",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "updated_pos",
                        "nativeSrc": "16912:11:67",
                        "nodeType": "YulTypedName",
                        "src": "16912:11:67",
                        "type": ""
                      }
                    ],
                    "src": "16829:168:67"
                  },
                  {
                    "body": {
                      "nativeSrc": "17093:283:67",
                      "nodeType": "YulBlock",
                      "src": "17093:283:67",
                      "statements": [
                        {
                          "nativeSrc": "17103:52:67",
                          "nodeType": "YulVariableDeclaration",
                          "src": "17103:52:67",
                          "value": {
                            "arguments": [
                              {
                                "name": "value",
                                "nativeSrc": "17149:5:67",
                                "nodeType": "YulIdentifier",
                                "src": "17149:5:67"
                              }
                            ],
                            "functionName": {
                              "name": "array_length_t_bytes_memory_ptr",
                              "nativeSrc": "17117:31:67",
                              "nodeType": "YulIdentifier",
                              "src": "17117:31:67"
                            },
                            "nativeSrc": "17117:38:67",
                            "nodeType": "YulFunctionCall",
                            "src": "17117:38:67"
                          },
                          "variables": [
                            {
                              "name": "length",
                              "nativeSrc": "17107:6:67",
                              "nodeType": "YulTypedName",
                              "src": "17107:6:67",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nativeSrc": "17164:77:67",
                          "nodeType": "YulAssignment",
                          "src": "17164:77:67",
                          "value": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nativeSrc": "17229:3:67",
                                "nodeType": "YulIdentifier",
                                "src": "17229:3:67"
                              },
                              {
                                "name": "length",
                                "nativeSrc": "17234:6:67",
                                "nodeType": "YulIdentifier",
                                "src": "17234:6:67"
                              }
                            ],
                            "functionName": {
                              "name": "array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack",
                              "nativeSrc": "17171:57:67",
                              "nodeType": "YulIdentifier",
                              "src": "17171:57:67"
                            },
                            "nativeSrc": "17171:70:67",
                            "nodeType": "YulFunctionCall",
                            "src": "17171:70:67"
                          },
                          "variableNames": [
                            {
                              "name": "pos",
                              "nativeSrc": "17164:3:67",
                              "nodeType": "YulIdentifier",
                              "src": "17164:3:67"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nativeSrc": "17289:5:67",
                                    "nodeType": "YulIdentifier",
                                    "src": "17289:5:67"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "17296:4:67",
                                    "nodeType": "YulLiteral",
                                    "src": "17296:4:67",
                                    "type": "",
                                    "value": "0x20"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "17285:3:67",
                                  "nodeType": "YulIdentifier",
                                  "src": "17285:3:67"
                                },
                                "nativeSrc": "17285:16:67",
                                "nodeType": "YulFunctionCall",
                                "src": "17285:16:67"
                              },
                              {
                                "name": "pos",
                                "nativeSrc": "17303:3:67",
                                "nodeType": "YulIdentifier",
                                "src": "17303:3:67"
                              },
                              {
                                "name": "length",
                                "nativeSrc": "17308:6:67",
                                "nodeType": "YulIdentifier",
                                "src": "17308:6:67"
                              }
                            ],
                            "functionName": {
                              "name": "copy_memory_to_memory_with_cleanup",
                              "nativeSrc": "17250:34:67",
                              "nodeType": "YulIdentifier",
                              "src": "17250:34:67"
                            },
                            "nativeSrc": "17250:65:67",
                            "nodeType": "YulFunctionCall",
                            "src": "17250:65:67"
                          },
                          "nativeSrc": "17250:65:67",
                          "nodeType": "YulExpressionStatement",
                          "src": "17250:65:67"
                        },
                        {
                          "nativeSrc": "17324:46:67",
                          "nodeType": "YulAssignment",
                          "src": "17324:46:67",
                          "value": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nativeSrc": "17335:3:67",
                                "nodeType": "YulIdentifier",
                                "src": "17335:3:67"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "length",
                                    "nativeSrc": "17362:6:67",
                                    "nodeType": "YulIdentifier",
                                    "src": "17362:6:67"
                                  }
                                ],
                                "functionName": {
                                  "name": "round_up_to_mul_of_32",
                                  "nativeSrc": "17340:21:67",
                                  "nodeType": "YulIdentifier",
                                  "src": "17340:21:67"
                                },
                                "nativeSrc": "17340:29:67",
                                "nodeType": "YulFunctionCall",
                                "src": "17340:29:67"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nativeSrc": "17331:3:67",
                              "nodeType": "YulIdentifier",
                              "src": "17331:3:67"
                            },
                            "nativeSrc": "17331:39:67",
                            "nodeType": "YulFunctionCall",
                            "src": "17331:39:67"
                          },
                          "variableNames": [
                            {
                              "name": "end",
                              "nativeSrc": "17324:3:67",
                              "nodeType": "YulIdentifier",
                              "src": "17324:3:67"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack",
                    "nativeSrc": "17003:373:67",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nativeSrc": "17074:5:67",
                        "nodeType": "YulTypedName",
                        "src": "17074:5:67",
                        "type": ""
                      },
                      {
                        "name": "pos",
                        "nativeSrc": "17081:3:67",
                        "nodeType": "YulTypedName",
                        "src": "17081:3:67",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "end",
                        "nativeSrc": "17089:3:67",
                        "nodeType": "YulTypedName",
                        "src": "17089:3:67",
                        "type": ""
                      }
                    ],
                    "src": "17003:373:67"
                  },
                  {
                    "body": {
                      "nativeSrc": "17582:440:67",
                      "nodeType": "YulBlock",
                      "src": "17582:440:67",
                      "statements": [
                        {
                          "nativeSrc": "17592:27:67",
                          "nodeType": "YulAssignment",
                          "src": "17592:27:67",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nativeSrc": "17604:9:67",
                                "nodeType": "YulIdentifier",
                                "src": "17604:9:67"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "17615:3:67",
                                "nodeType": "YulLiteral",
                                "src": "17615:3:67",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nativeSrc": "17600:3:67",
                              "nodeType": "YulIdentifier",
                              "src": "17600:3:67"
                            },
                            "nativeSrc": "17600:19:67",
                            "nodeType": "YulFunctionCall",
                            "src": "17600:19:67"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nativeSrc": "17592:4:67",
                              "nodeType": "YulIdentifier",
                              "src": "17592:4:67"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value0",
                                "nativeSrc": "17673:6:67",
                                "nodeType": "YulIdentifier",
                                "src": "17673:6:67"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nativeSrc": "17686:9:67",
                                    "nodeType": "YulIdentifier",
                                    "src": "17686:9:67"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "17697:1:67",
                                    "nodeType": "YulLiteral",
                                    "src": "17697:1:67",
                                    "type": "",
                                    "value": "0"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "17682:3:67",
                                  "nodeType": "YulIdentifier",
                                  "src": "17682:3:67"
                                },
                                "nativeSrc": "17682:17:67",
                                "nodeType": "YulFunctionCall",
                                "src": "17682:17:67"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_t_address_to_t_address_fromStack",
                              "nativeSrc": "17629:43:67",
                              "nodeType": "YulIdentifier",
                              "src": "17629:43:67"
                            },
                            "nativeSrc": "17629:71:67",
                            "nodeType": "YulFunctionCall",
                            "src": "17629:71:67"
                          },
                          "nativeSrc": "17629:71:67",
                          "nodeType": "YulExpressionStatement",
                          "src": "17629:71:67"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value1",
                                "nativeSrc": "17754:6:67",
                                "nodeType": "YulIdentifier",
                                "src": "17754:6:67"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nativeSrc": "17767:9:67",
                                    "nodeType": "YulIdentifier",
                                    "src": "17767:9:67"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "17778:2:67",
                                    "nodeType": "YulLiteral",
                                    "src": "17778:2:67",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "17763:3:67",
                                  "nodeType": "YulIdentifier",
                                  "src": "17763:3:67"
                                },
                                "nativeSrc": "17763:18:67",
                                "nodeType": "YulFunctionCall",
                                "src": "17763:18:67"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_t_address_to_t_address_fromStack",
                              "nativeSrc": "17710:43:67",
                              "nodeType": "YulIdentifier",
                              "src": "17710:43:67"
                            },
                            "nativeSrc": "17710:72:67",
                            "nodeType": "YulFunctionCall",
                            "src": "17710:72:67"
                          },
                          "nativeSrc": "17710:72:67",
                          "nodeType": "YulExpressionStatement",
                          "src": "17710:72:67"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value2",
                                "nativeSrc": "17836:6:67",
                                "nodeType": "YulIdentifier",
                                "src": "17836:6:67"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nativeSrc": "17849:9:67",
                                    "nodeType": "YulIdentifier",
                                    "src": "17849:9:67"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "17860:2:67",
                                    "nodeType": "YulLiteral",
                                    "src": "17860:2:67",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "17845:3:67",
                                  "nodeType": "YulIdentifier",
                                  "src": "17845:3:67"
                                },
                                "nativeSrc": "17845:18:67",
                                "nodeType": "YulFunctionCall",
                                "src": "17845:18:67"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_t_uint256_to_t_uint256_fromStack",
                              "nativeSrc": "17792:43:67",
                              "nodeType": "YulIdentifier",
                              "src": "17792:43:67"
                            },
                            "nativeSrc": "17792:72:67",
                            "nodeType": "YulFunctionCall",
                            "src": "17792:72:67"
                          },
                          "nativeSrc": "17792:72:67",
                          "nodeType": "YulExpressionStatement",
                          "src": "17792:72:67"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nativeSrc": "17885:9:67",
                                    "nodeType": "YulIdentifier",
                                    "src": "17885:9:67"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "17896:2:67",
                                    "nodeType": "YulLiteral",
                                    "src": "17896:2:67",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "17881:3:67",
                                  "nodeType": "YulIdentifier",
                                  "src": "17881:3:67"
                                },
                                "nativeSrc": "17881:18:67",
                                "nodeType": "YulFunctionCall",
                                "src": "17881:18:67"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "tail",
                                    "nativeSrc": "17905:4:67",
                                    "nodeType": "YulIdentifier",
                                    "src": "17905:4:67"
                                  },
                                  {
                                    "name": "headStart",
                                    "nativeSrc": "17911:9:67",
                                    "nodeType": "YulIdentifier",
                                    "src": "17911:9:67"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nativeSrc": "17901:3:67",
                                  "nodeType": "YulIdentifier",
                                  "src": "17901:3:67"
                                },
                                "nativeSrc": "17901:20:67",
                                "nodeType": "YulFunctionCall",
                                "src": "17901:20:67"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nativeSrc": "17874:6:67",
                              "nodeType": "YulIdentifier",
                              "src": "17874:6:67"
                            },
                            "nativeSrc": "17874:48:67",
                            "nodeType": "YulFunctionCall",
                            "src": "17874:48:67"
                          },
                          "nativeSrc": "17874:48:67",
                          "nodeType": "YulExpressionStatement",
                          "src": "17874:48:67"
                        },
                        {
                          "nativeSrc": "17931:84:67",
                          "nodeType": "YulAssignment",
                          "src": "17931:84:67",
                          "value": {
                            "arguments": [
                              {
                                "name": "value3",
                                "nativeSrc": "18001:6:67",
                                "nodeType": "YulIdentifier",
                                "src": "18001:6:67"
                              },
                              {
                                "name": "tail",
                                "nativeSrc": "18010:4:67",
                                "nodeType": "YulIdentifier",
                                "src": "18010:4:67"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack",
                              "nativeSrc": "17939:61:67",
                              "nodeType": "YulIdentifier",
                              "src": "17939:61:67"
                            },
                            "nativeSrc": "17939:76:67",
                            "nodeType": "YulFunctionCall",
                            "src": "17939:76:67"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nativeSrc": "17931:4:67",
                              "nodeType": "YulIdentifier",
                              "src": "17931:4:67"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed",
                    "nativeSrc": "17382:640:67",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nativeSrc": "17530:9:67",
                        "nodeType": "YulTypedName",
                        "src": "17530:9:67",
                        "type": ""
                      },
                      {
                        "name": "value3",
                        "nativeSrc": "17542:6:67",
                        "nodeType": "YulTypedName",
                        "src": "17542:6:67",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nativeSrc": "17550:6:67",
                        "nodeType": "YulTypedName",
                        "src": "17550:6:67",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nativeSrc": "17558:6:67",
                        "nodeType": "YulTypedName",
                        "src": "17558:6:67",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nativeSrc": "17566:6:67",
                        "nodeType": "YulTypedName",
                        "src": "17566:6:67",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nativeSrc": "17577:4:67",
                        "nodeType": "YulTypedName",
                        "src": "17577:4:67",
                        "type": ""
                      }
                    ],
                    "src": "17382:640:67"
                  },
                  {
                    "body": {
                      "nativeSrc": "18090:79:67",
                      "nodeType": "YulBlock",
                      "src": "18090:79:67",
                      "statements": [
                        {
                          "nativeSrc": "18100:22:67",
                          "nodeType": "YulAssignment",
                          "src": "18100:22:67",
                          "value": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nativeSrc": "18115:6:67",
                                "nodeType": "YulIdentifier",
                                "src": "18115:6:67"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nativeSrc": "18109:5:67",
                              "nodeType": "YulIdentifier",
                              "src": "18109:5:67"
                            },
                            "nativeSrc": "18109:13:67",
                            "nodeType": "YulFunctionCall",
                            "src": "18109:13:67"
                          },
                          "variableNames": [
                            {
                              "name": "value",
                              "nativeSrc": "18100:5:67",
                              "nodeType": "YulIdentifier",
                              "src": "18100:5:67"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "value",
                                "nativeSrc": "18157:5:67",
                                "nodeType": "YulIdentifier",
                                "src": "18157:5:67"
                              }
                            ],
                            "functionName": {
                              "name": "validator_revert_t_bytes4",
                              "nativeSrc": "18131:25:67",
                              "nodeType": "YulIdentifier",
                              "src": "18131:25:67"
                            },
                            "nativeSrc": "18131:32:67",
                            "nodeType": "YulFunctionCall",
                            "src": "18131:32:67"
                          },
                          "nativeSrc": "18131:32:67",
                          "nodeType": "YulExpressionStatement",
                          "src": "18131:32:67"
                        }
                      ]
                    },
                    "name": "abi_decode_t_bytes4_fromMemory",
                    "nativeSrc": "18028:141:67",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "offset",
                        "nativeSrc": "18068:6:67",
                        "nodeType": "YulTypedName",
                        "src": "18068:6:67",
                        "type": ""
                      },
                      {
                        "name": "end",
                        "nativeSrc": "18076:3:67",
                        "nodeType": "YulTypedName",
                        "src": "18076:3:67",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value",
                        "nativeSrc": "18084:5:67",
                        "nodeType": "YulTypedName",
                        "src": "18084:5:67",
                        "type": ""
                      }
                    ],
                    "src": "18028:141:67"
                  },
                  {
                    "body": {
                      "nativeSrc": "18251:273:67",
                      "nodeType": "YulBlock",
                      "src": "18251:273:67",
                      "statements": [
                        {
                          "body": {
                            "nativeSrc": "18297:83:67",
                            "nodeType": "YulBlock",
                            "src": "18297:83:67",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
                                    "nativeSrc": "18299:77:67",
                                    "nodeType": "YulIdentifier",
                                    "src": "18299:77:67"
                                  },
                                  "nativeSrc": "18299:79:67",
                                  "nodeType": "YulFunctionCall",
                                  "src": "18299:79:67"
                                },
                                "nativeSrc": "18299:79:67",
                                "nodeType": "YulExpressionStatement",
                                "src": "18299:79:67"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nativeSrc": "18272:7:67",
                                    "nodeType": "YulIdentifier",
                                    "src": "18272:7:67"
                                  },
                                  {
                                    "name": "headStart",
                                    "nativeSrc": "18281:9:67",
                                    "nodeType": "YulIdentifier",
                                    "src": "18281:9:67"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nativeSrc": "18268:3:67",
                                  "nodeType": "YulIdentifier",
                                  "src": "18268:3:67"
                                },
                                "nativeSrc": "18268:23:67",
                                "nodeType": "YulFunctionCall",
                                "src": "18268:23:67"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "18293:2:67",
                                "nodeType": "YulLiteral",
                                "src": "18293:2:67",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nativeSrc": "18264:3:67",
                              "nodeType": "YulIdentifier",
                              "src": "18264:3:67"
                            },
                            "nativeSrc": "18264:32:67",
                            "nodeType": "YulFunctionCall",
                            "src": "18264:32:67"
                          },
                          "nativeSrc": "18261:119:67",
                          "nodeType": "YulIf",
                          "src": "18261:119:67"
                        },
                        {
                          "nativeSrc": "18390:127:67",
                          "nodeType": "YulBlock",
                          "src": "18390:127:67",
                          "statements": [
                            {
                              "nativeSrc": "18405:15:67",
                              "nodeType": "YulVariableDeclaration",
                              "src": "18405:15:67",
                              "value": {
                                "kind": "number",
                                "nativeSrc": "18419:1:67",
                                "nodeType": "YulLiteral",
                                "src": "18419:1:67",
                                "type": "",
                                "value": "0"
                              },
                              "variables": [
                                {
                                  "name": "offset",
                                  "nativeSrc": "18409:6:67",
                                  "nodeType": "YulTypedName",
                                  "src": "18409:6:67",
                                  "type": ""
                                }
                              ]
                            },
                            {
                              "nativeSrc": "18434:73:67",
                              "nodeType": "YulAssignment",
                              "src": "18434:73:67",
                              "value": {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "headStart",
                                        "nativeSrc": "18479:9:67",
                                        "nodeType": "YulIdentifier",
                                        "src": "18479:9:67"
                                      },
                                      {
                                        "name": "offset",
                                        "nativeSrc": "18490:6:67",
                                        "nodeType": "YulIdentifier",
                                        "src": "18490:6:67"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nativeSrc": "18475:3:67",
                                      "nodeType": "YulIdentifier",
                                      "src": "18475:3:67"
                                    },
                                    "nativeSrc": "18475:22:67",
                                    "nodeType": "YulFunctionCall",
                                    "src": "18475:22:67"
                                  },
                                  {
                                    "name": "dataEnd",
                                    "nativeSrc": "18499:7:67",
                                    "nodeType": "YulIdentifier",
                                    "src": "18499:7:67"
                                  }
                                ],
                                "functionName": {
                                  "name": "abi_decode_t_bytes4_fromMemory",
                                  "nativeSrc": "18444:30:67",
                                  "nodeType": "YulIdentifier",
                                  "src": "18444:30:67"
                                },
                                "nativeSrc": "18444:63:67",
                                "nodeType": "YulFunctionCall",
                                "src": "18444:63:67"
                              },
                              "variableNames": [
                                {
                                  "name": "value0",
                                  "nativeSrc": "18434:6:67",
                                  "nodeType": "YulIdentifier",
                                  "src": "18434:6:67"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_bytes4_fromMemory",
                    "nativeSrc": "18175:349:67",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nativeSrc": "18221:9:67",
                        "nodeType": "YulTypedName",
                        "src": "18221:9:67",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nativeSrc": "18232:7:67",
                        "nodeType": "YulTypedName",
                        "src": "18232:7:67",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nativeSrc": "18244:6:67",
                        "nodeType": "YulTypedName",
                        "src": "18244:6:67",
                        "type": ""
                      }
                    ],
                    "src": "18175:349:67"
                  },
                  {
                    "body": {
                      "nativeSrc": "18644:34:67",
                      "nodeType": "YulBlock",
                      "src": "18644:34:67",
                      "statements": [
                        {
                          "nativeSrc": "18654:18:67",
                          "nodeType": "YulAssignment",
                          "src": "18654:18:67",
                          "value": {
                            "name": "pos",
                            "nativeSrc": "18669:3:67",
                            "nodeType": "YulIdentifier",
                            "src": "18669:3:67"
                          },
                          "variableNames": [
                            {
                              "name": "updated_pos",
                              "nativeSrc": "18654:11:67",
                              "nodeType": "YulIdentifier",
                              "src": "18654:11:67"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack",
                    "nativeSrc": "18530:148:67",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "pos",
                        "nativeSrc": "18616:3:67",
                        "nodeType": "YulTypedName",
                        "src": "18616:3:67",
                        "type": ""
                      },
                      {
                        "name": "length",
                        "nativeSrc": "18621:6:67",
                        "nodeType": "YulTypedName",
                        "src": "18621:6:67",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "updated_pos",
                        "nativeSrc": "18632:11:67",
                        "nodeType": "YulTypedName",
                        "src": "18632:11:67",
                        "type": ""
                      }
                    ],
                    "src": "18530:148:67"
                  },
                  {
                    "body": {
                      "nativeSrc": "18794:280:67",
                      "nodeType": "YulBlock",
                      "src": "18794:280:67",
                      "statements": [
                        {
                          "nativeSrc": "18804:53:67",
                          "nodeType": "YulVariableDeclaration",
                          "src": "18804:53:67",
                          "value": {
                            "arguments": [
                              {
                                "name": "value",
                                "nativeSrc": "18851:5:67",
                                "nodeType": "YulIdentifier",
                                "src": "18851:5:67"
                              }
                            ],
                            "functionName": {
                              "name": "array_length_t_string_memory_ptr",
                              "nativeSrc": "18818:32:67",
                              "nodeType": "YulIdentifier",
                              "src": "18818:32:67"
                            },
                            "nativeSrc": "18818:39:67",
                            "nodeType": "YulFunctionCall",
                            "src": "18818:39:67"
                          },
                          "variables": [
                            {
                              "name": "length",
                              "nativeSrc": "18808:6:67",
                              "nodeType": "YulTypedName",
                              "src": "18808:6:67",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nativeSrc": "18866:96:67",
                          "nodeType": "YulAssignment",
                          "src": "18866:96:67",
                          "value": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nativeSrc": "18950:3:67",
                                "nodeType": "YulIdentifier",
                                "src": "18950:3:67"
                              },
                              {
                                "name": "length",
                                "nativeSrc": "18955:6:67",
                                "nodeType": "YulIdentifier",
                                "src": "18955:6:67"
                              }
                            ],
                            "functionName": {
                              "name": "array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack",
                              "nativeSrc": "18873:76:67",
                              "nodeType": "YulIdentifier",
                              "src": "18873:76:67"
                            },
                            "nativeSrc": "18873:89:67",
                            "nodeType": "YulFunctionCall",
                            "src": "18873:89:67"
                          },
                          "variableNames": [
                            {
                              "name": "pos",
                              "nativeSrc": "18866:3:67",
                              "nodeType": "YulIdentifier",
                              "src": "18866:3:67"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nativeSrc": "19010:5:67",
                                    "nodeType": "YulIdentifier",
                                    "src": "19010:5:67"
                                  },
                                  {
                                    "kind": "number",
                                    "nativeSrc": "19017:4:67",
                                    "nodeType": "YulLiteral",
                                    "src": "19017:4:67",
                                    "type": "",
                                    "value": "0x20"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nativeSrc": "19006:3:67",
                                  "nodeType": "YulIdentifier",
                                  "src": "19006:3:67"
                                },
                                "nativeSrc": "19006:16:67",
                                "nodeType": "YulFunctionCall",
                                "src": "19006:16:67"
                              },
                              {
                                "name": "pos",
                                "nativeSrc": "19024:3:67",
                                "nodeType": "YulIdentifier",
                                "src": "19024:3:67"
                              },
                              {
                                "name": "length",
                                "nativeSrc": "19029:6:67",
                                "nodeType": "YulIdentifier",
                                "src": "19029:6:67"
                              }
                            ],
                            "functionName": {
                              "name": "copy_memory_to_memory_with_cleanup",
                              "nativeSrc": "18971:34:67",
                              "nodeType": "YulIdentifier",
                              "src": "18971:34:67"
                            },
                            "nativeSrc": "18971:65:67",
                            "nodeType": "YulFunctionCall",
                            "src": "18971:65:67"
                          },
                          "nativeSrc": "18971:65:67",
                          "nodeType": "YulExpressionStatement",
                          "src": "18971:65:67"
                        },
                        {
                          "nativeSrc": "19045:23:67",
                          "nodeType": "YulAssignment",
                          "src": "19045:23:67",
                          "value": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nativeSrc": "19056:3:67",
                                "nodeType": "YulIdentifier",
                                "src": "19056:3:67"
                              },
                              {
                                "name": "length",
                                "nativeSrc": "19061:6:67",
                                "nodeType": "YulIdentifier",
                                "src": "19061:6:67"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nativeSrc": "19052:3:67",
                              "nodeType": "YulIdentifier",
                              "src": "19052:3:67"
                            },
                            "nativeSrc": "19052:16:67",
                            "nodeType": "YulFunctionCall",
                            "src": "19052:16:67"
                          },
                          "variableNames": [
                            {
                              "name": "end",
                              "nativeSrc": "19045:3:67",
                              "nodeType": "YulIdentifier",
                              "src": "19045:3:67"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack",
                    "nativeSrc": "18684:390:67",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nativeSrc": "18775:5:67",
                        "nodeType": "YulTypedName",
                        "src": "18775:5:67",
                        "type": ""
                      },
                      {
                        "name": "pos",
                        "nativeSrc": "18782:3:67",
                        "nodeType": "YulTypedName",
                        "src": "18782:3:67",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "end",
                        "nativeSrc": "18790:3:67",
                        "nodeType": "YulTypedName",
                        "src": "18790:3:67",
                        "type": ""
                      }
                    ],
                    "src": "18684:390:67"
                  },
                  {
                    "body": {
                      "nativeSrc": "19264:251:67",
                      "nodeType": "YulBlock",
                      "src": "19264:251:67",
                      "statements": [
                        {
                          "nativeSrc": "19275:102:67",
                          "nodeType": "YulAssignment",
                          "src": "19275:102:67",
                          "value": {
                            "arguments": [
                              {
                                "name": "value0",
                                "nativeSrc": "19364:6:67",
                                "nodeType": "YulIdentifier",
                                "src": "19364:6:67"
                              },
                              {
                                "name": "pos",
                                "nativeSrc": "19373:3:67",
                                "nodeType": "YulIdentifier",
                                "src": "19373:3:67"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack",
                              "nativeSrc": "19282:81:67",
                              "nodeType": "YulIdentifier",
                              "src": "19282:81:67"
                            },
                            "nativeSrc": "19282:95:67",
                            "nodeType": "YulFunctionCall",
                            "src": "19282:95:67"
                          },
                          "variableNames": [
                            {
                              "name": "pos",
                              "nativeSrc": "19275:3:67",
                              "nodeType": "YulIdentifier",
                              "src": "19275:3:67"
                            }
                          ]
                        },
                        {
                          "nativeSrc": "19387:102:67",
                          "nodeType": "YulAssignment",
                          "src": "19387:102:67",
                          "value": {
                            "arguments": [
                              {
                                "name": "value1",
                                "nativeSrc": "19476:6:67",
                                "nodeType": "YulIdentifier",
                                "src": "19476:6:67"
                              },
                              {
                                "name": "pos",
                                "nativeSrc": "19485:3:67",
                                "nodeType": "YulIdentifier",
                                "src": "19485:3:67"
                              }
                            ],
                            "functionName": {
                              "name": "abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack",
                              "nativeSrc": "19394:81:67",
                              "nodeType": "YulIdentifier",
                              "src": "19394:81:67"
                            },
                            "nativeSrc": "19394:95:67",
                            "nodeType": "YulFunctionCall",
                            "src": "19394:95:67"
                          },
                          "variableNames": [
                            {
                              "name": "pos",
                              "nativeSrc": "19387:3:67",
                              "nodeType": "YulIdentifier",
                              "src": "19387:3:67"
                            }
                          ]
                        },
                        {
                          "nativeSrc": "19499:10:67",
                          "nodeType": "YulAssignment",
                          "src": "19499:10:67",
                          "value": {
                            "name": "pos",
                            "nativeSrc": "19506:3:67",
                            "nodeType": "YulIdentifier",
                            "src": "19506:3:67"
                          },
                          "variableNames": [
                            {
                              "name": "end",
                              "nativeSrc": "19499:3:67",
                              "nodeType": "YulIdentifier",
                              "src": "19499:3:67"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_packed_t_string_memory_ptr_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed",
                    "nativeSrc": "19080:435:67",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "pos",
                        "nativeSrc": "19235:3:67",
                        "nodeType": "YulTypedName",
                        "src": "19235:3:67",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nativeSrc": "19241:6:67",
                        "nodeType": "YulTypedName",
                        "src": "19241:6:67",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nativeSrc": "19249:6:67",
                        "nodeType": "YulTypedName",
                        "src": "19249:6:67",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "end",
                        "nativeSrc": "19260:3:67",
                        "nodeType": "YulTypedName",
                        "src": "19260:3:67",
                        "type": ""
                      }
                    ],
                    "src": "19080:435:67"
                  },
                  {
                    "body": {
                      "nativeSrc": "19566:149:67",
                      "nodeType": "YulBlock",
                      "src": "19566:149:67",
                      "statements": [
                        {
                          "nativeSrc": "19576:25:67",
                          "nodeType": "YulAssignment",
                          "src": "19576:25:67",
                          "value": {
                            "arguments": [
                              {
                                "name": "x",
                                "nativeSrc": "19599:1:67",
                                "nodeType": "YulIdentifier",
                                "src": "19599:1:67"
                              }
                            ],
                            "functionName": {
                              "name": "cleanup_t_uint256",
                              "nativeSrc": "19581:17:67",
                              "nodeType": "YulIdentifier",
                              "src": "19581:17:67"
                            },
                            "nativeSrc": "19581:20:67",
                            "nodeType": "YulFunctionCall",
                            "src": "19581:20:67"
                          },
                          "variableNames": [
                            {
                              "name": "x",
                              "nativeSrc": "19576:1:67",
                              "nodeType": "YulIdentifier",
                              "src": "19576:1:67"
                            }
                          ]
                        },
                        {
                          "nativeSrc": "19610:25:67",
                          "nodeType": "YulAssignment",
                          "src": "19610:25:67",
                          "value": {
                            "arguments": [
                              {
                                "name": "y",
                                "nativeSrc": "19633:1:67",
                                "nodeType": "YulIdentifier",
                                "src": "19633:1:67"
                              }
                            ],
                            "functionName": {
                              "name": "cleanup_t_uint256",
                              "nativeSrc": "19615:17:67",
                              "nodeType": "YulIdentifier",
                              "src": "19615:17:67"
                            },
                            "nativeSrc": "19615:20:67",
                            "nodeType": "YulFunctionCall",
                            "src": "19615:20:67"
                          },
                          "variableNames": [
                            {
                              "name": "y",
                              "nativeSrc": "19610:1:67",
                              "nodeType": "YulIdentifier",
                              "src": "19610:1:67"
                            }
                          ]
                        },
                        {
                          "nativeSrc": "19644:17:67",
                          "nodeType": "YulAssignment",
                          "src": "19644:17:67",
                          "value": {
                            "arguments": [
                              {
                                "name": "x",
                                "nativeSrc": "19656:1:67",
                                "nodeType": "YulIdentifier",
                                "src": "19656:1:67"
                              },
                              {
                                "name": "y",
                                "nativeSrc": "19659:1:67",
                                "nodeType": "YulIdentifier",
                                "src": "19659:1:67"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nativeSrc": "19652:3:67",
                              "nodeType": "YulIdentifier",
                              "src": "19652:3:67"
                            },
                            "nativeSrc": "19652:9:67",
                            "nodeType": "YulFunctionCall",
                            "src": "19652:9:67"
                          },
                          "variableNames": [
                            {
                              "name": "diff",
                              "nativeSrc": "19644:4:67",
                              "nodeType": "YulIdentifier",
                              "src": "19644:4:67"
                            }
                          ]
                        },
                        {
                          "body": {
                            "nativeSrc": "19686:22:67",
                            "nodeType": "YulBlock",
                            "src": "19686:22:67",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x11",
                                    "nativeSrc": "19688:16:67",
                                    "nodeType": "YulIdentifier",
                                    "src": "19688:16:67"
                                  },
                                  "nativeSrc": "19688:18:67",
                                  "nodeType": "YulFunctionCall",
                                  "src": "19688:18:67"
                                },
                                "nativeSrc": "19688:18:67",
                                "nodeType": "YulExpressionStatement",
                                "src": "19688:18:67"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "diff",
                                "nativeSrc": "19677:4:67",
                                "nodeType": "YulIdentifier",
                                "src": "19677:4:67"
                              },
                              {
                                "name": "x",
                                "nativeSrc": "19683:1:67",
                                "nodeType": "YulIdentifier",
                                "src": "19683:1:67"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nativeSrc": "19674:2:67",
                              "nodeType": "YulIdentifier",
                              "src": "19674:2:67"
                            },
                            "nativeSrc": "19674:11:67",
                            "nodeType": "YulFunctionCall",
                            "src": "19674:11:67"
                          },
                          "nativeSrc": "19671:37:67",
                          "nodeType": "YulIf",
                          "src": "19671:37:67"
                        }
                      ]
                    },
                    "name": "checked_sub_t_uint256",
                    "nativeSrc": "19521:194:67",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "x",
                        "nativeSrc": "19552:1:67",
                        "nodeType": "YulTypedName",
                        "src": "19552:1:67",
                        "type": ""
                      },
                      {
                        "name": "y",
                        "nativeSrc": "19555:1:67",
                        "nodeType": "YulTypedName",
                        "src": "19555:1:67",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "diff",
                        "nativeSrc": "19561:4:67",
                        "nodeType": "YulTypedName",
                        "src": "19561:4:67",
                        "type": ""
                      }
                    ],
                    "src": "19521:194:67"
                  },
                  {
                    "body": {
                      "nativeSrc": "19749:152:67",
                      "nodeType": "YulBlock",
                      "src": "19749:152:67",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nativeSrc": "19766:1:67",
                                "nodeType": "YulLiteral",
                                "src": "19766:1:67",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "19769:77:67",
                                "nodeType": "YulLiteral",
                                "src": "19769:77:67",
                                "type": "",
                                "value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nativeSrc": "19759:6:67",
                              "nodeType": "YulIdentifier",
                              "src": "19759:6:67"
                            },
                            "nativeSrc": "19759:88:67",
                            "nodeType": "YulFunctionCall",
                            "src": "19759:88:67"
                          },
                          "nativeSrc": "19759:88:67",
                          "nodeType": "YulExpressionStatement",
                          "src": "19759:88:67"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nativeSrc": "19863:1:67",
                                "nodeType": "YulLiteral",
                                "src": "19863:1:67",
                                "type": "",
                                "value": "4"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "19866:4:67",
                                "nodeType": "YulLiteral",
                                "src": "19866:4:67",
                                "type": "",
                                "value": "0x31"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nativeSrc": "19856:6:67",
                              "nodeType": "YulIdentifier",
                              "src": "19856:6:67"
                            },
                            "nativeSrc": "19856:15:67",
                            "nodeType": "YulFunctionCall",
                            "src": "19856:15:67"
                          },
                          "nativeSrc": "19856:15:67",
                          "nodeType": "YulExpressionStatement",
                          "src": "19856:15:67"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nativeSrc": "19887:1:67",
                                "nodeType": "YulLiteral",
                                "src": "19887:1:67",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "19890:4:67",
                                "nodeType": "YulLiteral",
                                "src": "19890:4:67",
                                "type": "",
                                "value": "0x24"
                              }
                            ],
                            "functionName": {
                              "name": "revert",
                              "nativeSrc": "19880:6:67",
                              "nodeType": "YulIdentifier",
                              "src": "19880:6:67"
                            },
                            "nativeSrc": "19880:15:67",
                            "nodeType": "YulFunctionCall",
                            "src": "19880:15:67"
                          },
                          "nativeSrc": "19880:15:67",
                          "nodeType": "YulExpressionStatement",
                          "src": "19880:15:67"
                        }
                      ]
                    },
                    "name": "panic_error_0x31",
                    "nativeSrc": "19721:180:67",
                    "nodeType": "YulFunctionDefinition",
                    "src": "19721:180:67"
                  },
                  {
                    "body": {
                      "nativeSrc": "19935:152:67",
                      "nodeType": "YulBlock",
                      "src": "19935:152:67",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nativeSrc": "19952:1:67",
                                "nodeType": "YulLiteral",
                                "src": "19952:1:67",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "19955:77:67",
                                "nodeType": "YulLiteral",
                                "src": "19955:77:67",
                                "type": "",
                                "value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nativeSrc": "19945:6:67",
                              "nodeType": "YulIdentifier",
                              "src": "19945:6:67"
                            },
                            "nativeSrc": "19945:88:67",
                            "nodeType": "YulFunctionCall",
                            "src": "19945:88:67"
                          },
                          "nativeSrc": "19945:88:67",
                          "nodeType": "YulExpressionStatement",
                          "src": "19945:88:67"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nativeSrc": "20049:1:67",
                                "nodeType": "YulLiteral",
                                "src": "20049:1:67",
                                "type": "",
                                "value": "4"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "20052:4:67",
                                "nodeType": "YulLiteral",
                                "src": "20052:4:67",
                                "type": "",
                                "value": "0x12"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nativeSrc": "20042:6:67",
                              "nodeType": "YulIdentifier",
                              "src": "20042:6:67"
                            },
                            "nativeSrc": "20042:15:67",
                            "nodeType": "YulFunctionCall",
                            "src": "20042:15:67"
                          },
                          "nativeSrc": "20042:15:67",
                          "nodeType": "YulExpressionStatement",
                          "src": "20042:15:67"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nativeSrc": "20073:1:67",
                                "nodeType": "YulLiteral",
                                "src": "20073:1:67",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nativeSrc": "20076:4:67",
                                "nodeType": "YulLiteral",
                                "src": "20076:4:67",
                                "type": "",
                                "value": "0x24"
                              }
                            ],
                            "functionName": {
                              "name": "revert",
                              "nativeSrc": "20066:6:67",
                              "nodeType": "YulIdentifier",
                              "src": "20066:6:67"
                            },
                            "nativeSrc": "20066:15:67",
                            "nodeType": "YulFunctionCall",
                            "src": "20066:15:67"
                          },
                          "nativeSrc": "20066:15:67",
                          "nodeType": "YulExpressionStatement",
                          "src": "20066:15:67"
                        }
                      ]
                    },
                    "name": "panic_error_0x12",
                    "nativeSrc": "19907:180:67",
                    "nodeType": "YulFunctionDefinition",
                    "src": "19907:180:67"
                  }
                ]
              },
              "contents": "{\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function cleanup_t_bytes4(value) -> cleaned {\n        cleaned := and(value, 0xffffffff00000000000000000000000000000000000000000000000000000000)\n    }\n\n    function validator_revert_t_bytes4(value) {\n        if iszero(eq(value, cleanup_t_bytes4(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_bytes4(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_bytes4(value)\n    }\n\n    function abi_decode_tuple_t_bytes4(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bytes4(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function cleanup_t_bool(value) -> cleaned {\n        cleaned := iszero(iszero(value))\n    }\n\n    function abi_encode_t_bool_to_t_bool_fromStack(value, pos) {\n        mstore(pos, cleanup_t_bool(value))\n    }\n\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_bool_to_t_bool_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function array_length_t_string_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function copy_memory_to_memory_with_cleanup(src, dst, length) {\n\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        mstore(add(dst, length), 0)\n\n    }\n\n    function round_up_to_mul_of_32(value) -> result {\n        result := and(add(value, 31), not(31))\n    }\n\n    function abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value, pos) -> end {\n        let length := array_length_t_string_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_fromStack(pos, length)\n        copy_memory_to_memory_with_cleanup(add(value, 0x20), pos, length)\n        end := add(pos, round_up_to_mul_of_32(length))\n    }\n\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        mstore(add(headStart, 0), sub(tail, headStart))\n        tail := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_fromStack(value0,  tail)\n\n    }\n\n    function cleanup_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function validator_revert_t_uint256(value) {\n        if iszero(eq(value, cleanup_t_uint256(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_uint256(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_uint256(value)\n    }\n\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function abi_encode_t_address_to_t_address_fromStack(value, pos) {\n        mstore(pos, cleanup_t_address(value))\n    }\n\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function validator_revert_t_address(value) {\n        if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_address(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_address(value)\n    }\n\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_encode_t_uint256_to_t_uint256_fromStack(value, pos) {\n        mstore(pos, cleanup_t_uint256(value))\n    }\n\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function abi_decode_tuple_t_addresst_addresst_uint256(headStart, dataEnd) -> value0, value1, value2 {\n        if slt(sub(dataEnd, headStart), 96) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 64\n\n            value2 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function validator_revert_t_bool(value) {\n        if iszero(eq(value, cleanup_t_bool(value))) { revert(0, 0) }\n    }\n\n    function abi_decode_t_bool(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_bool(value)\n    }\n\n    function abi_decode_tuple_t_addresst_bool(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_bool(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() {\n        revert(0, 0)\n    }\n\n    function revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae() {\n        revert(0, 0)\n    }\n\n    function panic_error_0x41() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n\n    function finalize_allocation(memPtr, size) {\n        let newFreePtr := add(memPtr, round_up_to_mul_of_32(size))\n        // protect against overflow\n        if or(gt(newFreePtr, 0xffffffffffffffff), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n    }\n\n    function allocate_memory(size) -> memPtr {\n        memPtr := allocate_unbounded()\n        finalize_allocation(memPtr, size)\n    }\n\n    function array_allocation_size_t_bytes_memory_ptr(length) -> size {\n        // Make sure we can allocate memory without overflow\n        if gt(length, 0xffffffffffffffff) { panic_error_0x41() }\n\n        size := round_up_to_mul_of_32(length)\n\n        // add length slot\n        size := add(size, 0x20)\n\n    }\n\n    function copy_calldata_to_memory_with_cleanup(src, dst, length) {\n\n        calldatacopy(dst, src, length)\n        mstore(add(dst, length), 0)\n\n    }\n\n    function abi_decode_available_length_t_bytes_memory_ptr(src, length, end) -> array {\n        array := allocate_memory(array_allocation_size_t_bytes_memory_ptr(length))\n        mstore(array, length)\n        let dst := add(array, 0x20)\n        if gt(add(src, length), end) { revert_error_987264b3b1d58a9c7f8255e93e81c77d86d6299019c33110a076957a3e06e2ae() }\n        copy_calldata_to_memory_with_cleanup(src, dst, length)\n    }\n\n    // bytes\n    function abi_decode_t_bytes_memory_ptr(offset, end) -> array {\n        if iszero(slt(add(offset, 0x1f), end)) { revert_error_1b9f4a0a5773e33b91aa01db23bf8c55fce1411167c872835e7fa00a4f17d46d() }\n        let length := calldataload(offset)\n        array := abi_decode_available_length_t_bytes_memory_ptr(add(offset, 0x20), length, end)\n    }\n\n    function abi_decode_tuple_t_addresst_addresst_uint256t_bytes_memory_ptr(headStart, dataEnd) -> value0, value1, value2, value3 {\n        if slt(sub(dataEnd, headStart), 128) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 64\n\n            value2 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := calldataload(add(headStart, 96))\n            if gt(offset, 0xffffffffffffffff) { revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() }\n\n            value3 := abi_decode_t_bytes_memory_ptr(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_decode_tuple_t_addresst_address(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_address(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function panic_error_0x22() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x22)\n        revert(0, 0x24)\n    }\n\n    function extract_byte_array_length(data) -> length {\n        length := div(data, 2)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) {\n            length := and(length, 0x7f)\n        }\n\n        if eq(outOfPlaceEncoding, lt(length, 32)) {\n            panic_error_0x22()\n        }\n    }\n\n    function abi_encode_tuple_t_address_t_uint256_t_address__to_t_address_t_uint256_t_address__fromStack_reversed(headStart , value2, value1, value0) -> tail {\n        tail := add(headStart, 96)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value1,  add(headStart, 32))\n\n        abi_encode_t_address_to_t_address_fromStack(value2,  add(headStart, 64))\n\n    }\n\n    function abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed(headStart , value1, value0) -> tail {\n        tail := add(headStart, 64)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value1,  add(headStart, 32))\n\n    }\n\n    function panic_error_0x11() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n\n    function increment_t_uint256(value) -> ret {\n        value := cleanup_t_uint256(value)\n        if eq(value, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff) { panic_error_0x11() }\n        ret := add(value, 1)\n    }\n\n    function panic_error_0x32() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n\n    function array_dataslot_t_string_storage(ptr) -> data {\n        data := ptr\n\n        mstore(0, ptr)\n        data := keccak256(0, 0x20)\n\n    }\n\n    function divide_by_32_ceil(value) -> result {\n        result := div(add(value, 31), 32)\n    }\n\n    function shift_left_dynamic(bits, value) -> newValue {\n        newValue :=\n\n        shl(bits, value)\n\n    }\n\n    function update_byte_slice_dynamic32(value, shiftBytes, toInsert) -> result {\n        let shiftBits := mul(shiftBytes, 8)\n        let mask := shift_left_dynamic(shiftBits, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n        toInsert := shift_left_dynamic(shiftBits, toInsert)\n        value := and(value, not(mask))\n        result := or(value, and(toInsert, mask))\n    }\n\n    function identity(value) -> ret {\n        ret := value\n    }\n\n    function convert_t_uint256_to_t_uint256(value) -> converted {\n        converted := cleanup_t_uint256(identity(cleanup_t_uint256(value)))\n    }\n\n    function prepare_store_t_uint256(value) -> ret {\n        ret := value\n    }\n\n    function update_storage_value_t_uint256_to_t_uint256(slot, offset, value_0) {\n        let convertedValue_0 := convert_t_uint256_to_t_uint256(value_0)\n        sstore(slot, update_byte_slice_dynamic32(sload(slot), offset, prepare_store_t_uint256(convertedValue_0)))\n    }\n\n    function zero_value_for_split_t_uint256() -> ret {\n        ret := 0\n    }\n\n    function storage_set_to_zero_t_uint256(slot, offset) {\n        let zero_0 := zero_value_for_split_t_uint256()\n        update_storage_value_t_uint256_to_t_uint256(slot, offset, zero_0)\n    }\n\n    function clear_storage_range_t_bytes1(start, end) {\n        for {} lt(start, end) { start := add(start, 1) }\n        {\n            storage_set_to_zero_t_uint256(start, 0)\n        }\n    }\n\n    function clean_up_bytearray_end_slots_t_string_storage(array, len, startIndex) {\n\n        if gt(len, 31) {\n            let dataArea := array_dataslot_t_string_storage(array)\n            let deleteStart := add(dataArea, divide_by_32_ceil(startIndex))\n            // If we are clearing array to be short byte array, we want to clear only data starting from array data area.\n            if lt(startIndex, 32) { deleteStart := dataArea }\n            clear_storage_range_t_bytes1(deleteStart, add(dataArea, divide_by_32_ceil(len)))\n        }\n\n    }\n\n    function shift_right_unsigned_dynamic(bits, value) -> newValue {\n        newValue :=\n\n        shr(bits, value)\n\n    }\n\n    function mask_bytes_dynamic(data, bytes) -> result {\n        let mask := not(shift_right_unsigned_dynamic(mul(8, bytes), not(0)))\n        result := and(data, mask)\n    }\n    function extract_used_part_and_set_length_of_short_byte_array(data, len) -> used {\n        // we want to save only elements that are part of the array after resizing\n        // others should be set to zero\n        data := mask_bytes_dynamic(data, len)\n        used := or(data, mul(2, len))\n    }\n    function copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage(slot, src) {\n\n        let newLen := array_length_t_string_memory_ptr(src)\n        // Make sure array length is sane\n        if gt(newLen, 0xffffffffffffffff) { panic_error_0x41() }\n\n        let oldLen := extract_byte_array_length(sload(slot))\n\n        // potentially truncate data\n        clean_up_bytearray_end_slots_t_string_storage(slot, oldLen, newLen)\n\n        let srcOffset := 0\n\n        srcOffset := 0x20\n\n        switch gt(newLen, 31)\n        case 1 {\n            let loopEnd := and(newLen, not(0x1f))\n\n            let dstPtr := array_dataslot_t_string_storage(slot)\n            let i := 0\n            for { } lt(i, loopEnd) { i := add(i, 0x20) } {\n                sstore(dstPtr, mload(add(src, srcOffset)))\n                dstPtr := add(dstPtr, 1)\n                srcOffset := add(srcOffset, 32)\n            }\n            if lt(loopEnd, newLen) {\n                let lastValue := mload(add(src, srcOffset))\n                sstore(dstPtr, mask_bytes_dynamic(lastValue, and(newLen, 0x1f)))\n            }\n            sstore(slot, add(mul(newLen, 2), 1))\n        }\n        default {\n            let value := 0\n            if newLen {\n                value := mload(add(src, srcOffset))\n            }\n            sstore(slot, extract_used_part_and_set_length_of_short_byte_array(value, newLen))\n        }\n    }\n\n    function array_length_t_bytes_memory_ptr(value) -> length {\n\n        length := mload(value)\n\n    }\n\n    function array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack(pos, length) -> updated_pos {\n        mstore(pos, length)\n        updated_pos := add(pos, 0x20)\n    }\n\n    function abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack(value, pos) -> end {\n        let length := array_length_t_bytes_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_bytes_memory_ptr_fromStack(pos, length)\n        copy_memory_to_memory_with_cleanup(add(value, 0x20), pos, length)\n        end := add(pos, round_up_to_mul_of_32(length))\n    }\n\n    function abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed(headStart , value3, value2, value1, value0) -> tail {\n        tail := add(headStart, 128)\n\n        abi_encode_t_address_to_t_address_fromStack(value0,  add(headStart, 0))\n\n        abi_encode_t_address_to_t_address_fromStack(value1,  add(headStart, 32))\n\n        abi_encode_t_uint256_to_t_uint256_fromStack(value2,  add(headStart, 64))\n\n        mstore(add(headStart, 96), sub(tail, headStart))\n        tail := abi_encode_t_bytes_memory_ptr_to_t_bytes_memory_ptr_fromStack(value3,  tail)\n\n    }\n\n    function abi_decode_t_bytes4_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_bytes4(value)\n    }\n\n    function abi_decode_tuple_t_bytes4_fromMemory(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_bytes4_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack(pos, length) -> updated_pos {\n        updated_pos := pos\n    }\n\n    function abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack(value, pos) -> end {\n        let length := array_length_t_string_memory_ptr(value)\n        pos := array_storeLengthForEncoding_t_string_memory_ptr_nonPadded_inplace_fromStack(pos, length)\n        copy_memory_to_memory_with_cleanup(add(value, 0x20), pos, length)\n        end := add(pos, length)\n    }\n\n    function abi_encode_tuple_packed_t_string_memory_ptr_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed(pos , value1, value0) -> end {\n\n        pos := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack(value0,  pos)\n\n        pos := abi_encode_t_string_memory_ptr_to_t_string_memory_ptr_nonPadded_inplace_fromStack(value1,  pos)\n\n        end := pos\n    }\n\n    function checked_sub_t_uint256(x, y) -> diff {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n        diff := sub(x, y)\n\n        if gt(diff, x) { panic_error_0x11() }\n\n    }\n\n    function panic_error_0x31() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x31)\n        revert(0, 0x24)\n    }\n\n    function panic_error_0x12() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x12)\n        revert(0, 0x24)\n    }\n\n}\n",
              "id": 67,
              "language": "Yul",
              "name": "#utility.yul"
            }
          ],
          "immutableReferences": {},
          "linkReferences": {},
          "object": "608060405234801561001057600080fd5b50600436106101425760003560e01c80634f6ccce7116100b857806395d89b411161007c57806395d89b4114610387578063a22cb465146103a5578063b88d4fde146103c1578063c87b56dd146103dd578063e985e9c51461040d578063f2fde38b1461043d57610142565b80634f6ccce7146102cf5780636352211e146102ff57806370a082311461032f578063715018a61461035f5780638da5cb5b1461036957610142565b806323b872dd1161010a57806323b872dd146101ff5780632f745c591461021b57806330b2c5961461024b57806340d097c31461026757806342842e0e1461029757806342966c68146102b357610142565b806301ffc9a71461014757806306fdde0314610177578063081812fc14610195578063095ea7b3146101c557806318160ddd146101e1575b600080fd5b610161600480360381019061015c919061218d565b610459565b60405161016e91906121d5565b60405180910390f35b61017f61046b565b60405161018c9190612280565b60405180910390f35b6101af60048036038101906101aa91906122d8565b6104fd565b6040516101bc9190612346565b60405180910390f35b6101df60048036038101906101da919061238d565b610519565b005b6101e961052f565b6040516101f691906123dc565b60405180910390f35b610219600480360381019061021491906123f7565b61053c565b005b6102356004803603810190610230919061238d565b61063e565b60405161024291906123dc565b60405180910390f35b6102656004803603810190610260919061238d565b6106e7565b005b610281600480360381019061027c919061244a565b6106f5565b60405161028e91906123dc565b60405180910390f35b6102b160048036038101906102ac91906123f7565b61074f565b005b6102cd60048036038101906102c891906122d8565b61076f565b005b6102e960048036038101906102e491906122d8565b610786565b6040516102f691906123dc565b60405180910390f35b610319600480360381019061031491906122d8565b6107fc565b6040516103269190612346565b60405180910390f35b6103496004803603810190610344919061244a565b61080e565b60405161035691906123dc565b60405180910390f35b6103676108c8565b005b6103716108dc565b60405161037e9190612346565b60405180910390f35b61038f610906565b60405161039c9190612280565b60405180910390f35b6103bf60048036038101906103ba91906124a3565b610998565b005b6103db60048036038101906103d69190612618565b6109ae565b005b6103f760048036038101906103f291906122d8565b6109d3565b6040516104049190612280565b60405180910390f35b6104276004803603810190610422919061269b565b6109e5565b60405161043491906121d5565b60405180910390f35b6104576004803603810190610452919061244a565b610a79565b005b600061046482610aff565b9050919050565b60606000805461047a9061270a565b80601f01602080910402602001604051908101604052809291908181526020018280546104a69061270a565b80156104f35780601f106104c8576101008083540402835291602001916104f3565b820191906000526020600020905b8154815290600101906020018083116104d657829003601f168201915b5050505050905090565b600061050882610b60565b5061051282610be8565b9050919050565b61052b8282610526610c25565b610c2d565b5050565b6000600880549050905090565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036105ae5760006040517f64a0ae920000000000000000000000000000000000000000000000000000000081526004016105a59190612346565b60405180910390fd5b60006105c283836105bd610c25565b610c3f565b90508373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610638578382826040517f64283d7b00000000000000000000000000000000000000000000000000000000815260040161062f9392919061273b565b60405180910390fd5b50505050565b60006106498361080e565b821061068e5782826040517fa57d13dc000000000000000000000000000000000000000000000000000000008152600401610685929190612772565b60405180910390fd5b600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002054905092915050565b6106f18282610c55565b5050565b60006106ff610c73565b6000600c6000815480929190610714906127ca565b9190505590506107248382610c55565b61074681604051806060016040528060358152602001612c9560359139610cfa565b80915050919050565b61076a838383604051806020016040528060008152506109ae565b505050565b61078260008261077d610c25565b610c3f565b5050565b600061079061052f565b82106107d6576000826040517fa57d13dc0000000000000000000000000000000000000000000000000000000081526004016107cd929190612772565b60405180910390fd5b600882815481106107ea576107e9612812565b5b90600052602060002001549050919050565b600061080782610b60565b9050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036108815760006040517f89c62b640000000000000000000000000000000000000000000000000000000081526004016108789190612346565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6108d0610c73565b6108da6000610d56565b565b6000600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6060600180546109159061270a565b80601f01602080910402602001604051908101604052809291908181526020018280546109419061270a565b801561098e5780601f106109635761010080835404028352916020019161098e565b820191906000526020600020905b81548152906001019060200180831161097157829003601f168201915b5050505050905090565b6109aa6109a3610c25565b8383610e1c565b5050565b6109b984848461053c565b6109cd6109c4610c25565b85858585610f8b565b50505050565b60606109de8261113c565b9050919050565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b610a81610c73565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610af35760006040517f1e4fbdf7000000000000000000000000000000000000000000000000000000008152600401610aea9190612346565b60405180910390fd5b610afc81610d56565b50565b6000634906490660e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480610b595750610b588261124f565b5b9050919050565b600080610b6c836112c9565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610bdf57826040517f7e273289000000000000000000000000000000000000000000000000000000008152600401610bd691906123dc565b60405180910390fd5b80915050919050565b60006004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600033905090565b610c3a8383836001611306565b505050565b6000610c4c8484846114cb565b90509392505050565b610c6f8282604051806020016040528060008152506115e8565b5050565b610c7b610c25565b73ffffffffffffffffffffffffffffffffffffffff16610c996108dc565b73ffffffffffffffffffffffffffffffffffffffff1614610cf857610cbc610c25565b6040517f118cdaa7000000000000000000000000000000000000000000000000000000008152600401610cef9190612346565b60405180910390fd5b565b80600a60008481526020019081526020016000209081610d1a91906129ed565b507ff8e1a15aba9398e019f0b49df1a4fde98ee17ae345cb5f6b5e2c27f5033e8ce782604051610d4a91906123dc565b60405180910390a15050565b6000600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600b60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610e8d57816040517f5b08ba18000000000000000000000000000000000000000000000000000000008152600401610e849190612346565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051610f7e91906121d5565b60405180910390a3505050565b60008373ffffffffffffffffffffffffffffffffffffffff163b1115611135578273ffffffffffffffffffffffffffffffffffffffff1663150b7a02868685856040518563ffffffff1660e01b8152600401610fea9493929190612b14565b6020604051808303816000875af192505050801561102657506040513d601f19601f820116820180604052508101906110239190612b75565b60015b6110aa573d8060008114611056576040519150601f19603f3d011682016040523d82523d6000602084013e61105b565b606091505b5060008151036110a257836040517f64a0ae920000000000000000000000000000000000000000000000000000000081526004016110999190612346565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161461113357836040517f64a0ae9200000000000000000000000000000000000000000000000000000000815260040161112a9190612346565b60405180910390fd5b505b5050505050565b606061114782610b60565b506000600a600084815260200190815260200160002080546111689061270a565b80601f01602080910402602001604051908101604052809291908181526020018280546111949061270a565b80156111e15780601f106111b6576101008083540402835291602001916111e1565b820191906000526020600020905b8154815290600101906020018083116111c457829003601f168201915b5050505050905060006111f261160c565b9050600081510361120757819250505061124a565b60008251111561123c578082604051602001611224929190612bde565b6040516020818303038152906040529250505061124a565b61124584611623565b925050505b919050565b60007f780e9d63000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806112c257506112c18261168c565b5b9050919050565b60006002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b808061133f5750600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614155b1561147357600061134f84610b60565b9050600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141580156113ba57508273ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614155b80156113cd57506113cb81846109e5565b155b1561140f57826040517fa9fbf51f0000000000000000000000000000000000000000000000000000000081526004016114069190612346565b60405180910390fd5b811561147157838573ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45b505b836004600085815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050505050565b6000806114d985858561176e565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361151d5761151884611988565b61155c565b8473ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161461155b5761155a81856119d1565b5b5b600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff160361159e5761159984611abc565b6115dd565b8473ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146115dc576115db8585611b8d565b5b5b809150509392505050565b6115f28383611c18565b6116076115fd610c25565b6000858585610f8b565b505050565b606060405180602001604052806000815250905090565b606061162e82610b60565b50600061163961160c565b905060008151116116595760405180602001604052806000815250611684565b8061166384611d11565b604051602001611674929190612bde565b6040516020818303038152906040525b915050919050565b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061175757507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80611767575061176682611ddf565b5b9050919050565b60008061177a846112c9565b9050600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16146117bc576117bb818486611e49565b5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161461184d576117fe600085600080611306565b6001600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055505b600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16146118d0576001600360008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055505b846002600086815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550838573ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4809150509392505050565b6008805490506009600083815260200190815260200160002081905550600881908060018154018082558091505060019003906000526020600020016000909190919091505550565b60006119dc8361080e565b90506000600760008481526020019081526020016000205490506000600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050828214611a885760008160008581526020019081526020016000205490508082600085815260200190815260200160002081905550826007600083815260200190815260200160002081905550505b6007600085815260200190815260200160002060009055806000848152602001908152602001600020600090555050505050565b60006001600880549050611ad09190612c02565b9050600060096000848152602001908152602001600020549050600060088381548110611b0057611aff612812565b5b906000526020600020015490508060088381548110611b2257611b21612812565b5b906000526020600020018190555081600960008381526020019081526020016000208190555060096000858152602001908152602001600020600090556008805480611b7157611b70612c36565b5b6001900381819060005260206000200160009055905550505050565b60006001611b9a8461080e565b611ba49190612c02565b905081600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002081905550806007600084815260200190815260200160002081905550505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611c8a5760006040517f64a0ae92000000000000000000000000000000000000000000000000000000008152600401611c819190612346565b60405180910390fd5b6000611c9883836000610c3f565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614611d0c5760006040517f73c6ac6e000000000000000000000000000000000000000000000000000000008152600401611d039190612346565b60405180910390fd5b505050565b606060006001611d2084611f0d565b01905060008167ffffffffffffffff811115611d3f57611d3e6124ed565b5b6040519080825280601f01601f191660200182016040528015611d715781602001600182028036833780820191505090505b509050600082602001820190505b600115611dd4578080600190039150507f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a8581611dc857611dc7612c65565b5b04945060008503611d7f575b819350505050919050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b611e54838383612060565b611f0857600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603611ec957806040517f7e273289000000000000000000000000000000000000000000000000000000008152600401611ec091906123dc565b60405180910390fd5b81816040517f177e802f000000000000000000000000000000000000000000000000000000008152600401611eff929190612772565b60405180910390fd5b505050565b600080600090507a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008310611f6b577a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008381611f6157611f60612c65565b5b0492506040810190505b6d04ee2d6d415b85acef81000000008310611fa8576d04ee2d6d415b85acef81000000008381611f9e57611f9d612c65565b5b0492506020810190505b662386f26fc100008310611fd757662386f26fc100008381611fcd57611fcc612c65565b5b0492506010810190505b6305f5e1008310612000576305f5e1008381611ff657611ff5612c65565b5b0492506008810190505b612710831061202557612710838161201b5761201a612c65565b5b0492506004810190505b60648310612048576064838161203e5761203d612c65565b5b0492506002810190505b600a8310612057576001810190505b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415801561211857508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614806120d957506120d884846109e5565b5b8061211757508273ffffffffffffffffffffffffffffffffffffffff166120ff83610be8565b73ffffffffffffffffffffffffffffffffffffffff16145b5b90509392505050565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b61216a81612135565b811461217557600080fd5b50565b60008135905061218781612161565b92915050565b6000602082840312156121a3576121a261212b565b5b60006121b184828501612178565b91505092915050565b60008115159050919050565b6121cf816121ba565b82525050565b60006020820190506121ea60008301846121c6565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561222a57808201518184015260208101905061220f565b60008484015250505050565b6000601f19601f8301169050919050565b6000612252826121f0565b61225c81856121fb565b935061226c81856020860161220c565b61227581612236565b840191505092915050565b6000602082019050818103600083015261229a8184612247565b905092915050565b6000819050919050565b6122b5816122a2565b81146122c057600080fd5b50565b6000813590506122d2816122ac565b92915050565b6000602082840312156122ee576122ed61212b565b5b60006122fc848285016122c3565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061233082612305565b9050919050565b61234081612325565b82525050565b600060208201905061235b6000830184612337565b92915050565b61236a81612325565b811461237557600080fd5b50565b60008135905061238781612361565b92915050565b600080604083850312156123a4576123a361212b565b5b60006123b285828601612378565b92505060206123c3858286016122c3565b9150509250929050565b6123d6816122a2565b82525050565b60006020820190506123f160008301846123cd565b92915050565b6000806000606084860312156124105761240f61212b565b5b600061241e86828701612378565b935050602061242f86828701612378565b9250506040612440868287016122c3565b9150509250925092565b6000602082840312156124605761245f61212b565b5b600061246e84828501612378565b91505092915050565b612480816121ba565b811461248b57600080fd5b50565b60008135905061249d81612477565b92915050565b600080604083850312156124ba576124b961212b565b5b60006124c885828601612378565b92505060206124d98582860161248e565b9150509250929050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61252582612236565b810181811067ffffffffffffffff82111715612544576125436124ed565b5b80604052505050565b6000612557612121565b9050612563828261251c565b919050565b600067ffffffffffffffff821115612583576125826124ed565b5b61258c82612236565b9050602081019050919050565b82818337600083830152505050565b60006125bb6125b684612568565b61254d565b9050828152602081018484840111156125d7576125d66124e8565b5b6125e2848285612599565b509392505050565b600082601f8301126125ff576125fe6124e3565b5b813561260f8482602086016125a8565b91505092915050565b600080600080608085870312156126325761263161212b565b5b600061264087828801612378565b945050602061265187828801612378565b9350506040612662878288016122c3565b925050606085013567ffffffffffffffff81111561268357612682612130565b5b61268f878288016125ea565b91505092959194509250565b600080604083850312156126b2576126b161212b565b5b60006126c085828601612378565b92505060206126d185828601612378565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061272257607f821691505b602082108103612735576127346126db565b5b50919050565b60006060820190506127506000830186612337565b61275d60208301856123cd565b61276a6040830184612337565b949350505050565b60006040820190506127876000830185612337565b61279460208301846123cd565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006127d5826122a2565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036128075761280661279b565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026128a37fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82612866565b6128ad8683612866565b95508019841693508086168417925050509392505050565b6000819050919050565b60006128ea6128e56128e0846122a2565b6128c5565b6122a2565b9050919050565b6000819050919050565b612904836128cf565b612918612910826128f1565b848454612873565b825550505050565b600090565b61292d612920565b6129388184846128fb565b505050565b5b8181101561295c57612951600082612925565b60018101905061293e565b5050565b601f8211156129a15761297281612841565b61297b84612856565b8101602085101561298a578190505b61299e61299685612856565b83018261293d565b50505b505050565b600082821c905092915050565b60006129c4600019846008026129a6565b1980831691505092915050565b60006129dd83836129b3565b9150826002028217905092915050565b6129f6826121f0565b67ffffffffffffffff811115612a0f57612a0e6124ed565b5b612a19825461270a565b612a24828285612960565b600060209050601f831160018114612a575760008415612a45578287015190505b612a4f85826129d1565b865550612ab7565b601f198416612a6586612841565b60005b82811015612a8d57848901518255600182019150602085019450602081019050612a68565b86831015612aaa5784890151612aa6601f8916826129b3565b8355505b6001600288020188555050505b505050505050565b600081519050919050565b600082825260208201905092915050565b6000612ae682612abf565b612af08185612aca565b9350612b0081856020860161220c565b612b0981612236565b840191505092915050565b6000608082019050612b296000830187612337565b612b366020830186612337565b612b4360408301856123cd565b8181036060830152612b558184612adb565b905095945050505050565b600081519050612b6f81612161565b92915050565b600060208284031215612b8b57612b8a61212b565b5b6000612b9984828501612b60565b91505092915050565b600081905092915050565b6000612bb8826121f0565b612bc28185612ba2565b9350612bd281856020860161220c565b80840191505092915050565b6000612bea8285612bad565b9150612bf68284612bad565b91508190509392505050565b6000612c0d826122a2565b9150612c18836122a2565b9250828203905081811115612c3057612c2f61279b565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fdfe697066733a2f2f516d62464b31593269633248325558767978476d51697962417179416b5050656743624c6f644a47573362714d66a2646970667358221220b83569333861773d1457ad47106fd59db66ac713987444b5a148145cd98df5e864736f6c634300081c0033",
          "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x142 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x4F6CCCE7 GT PUSH2 0xB8 JUMPI DUP1 PUSH4 0x95D89B41 GT PUSH2 0x7C JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x387 JUMPI DUP1 PUSH4 0xA22CB465 EQ PUSH2 0x3A5 JUMPI DUP1 PUSH4 0xB88D4FDE EQ PUSH2 0x3C1 JUMPI DUP1 PUSH4 0xC87B56DD EQ PUSH2 0x3DD JUMPI DUP1 PUSH4 0xE985E9C5 EQ PUSH2 0x40D JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x43D JUMPI PUSH2 0x142 JUMP JUMPDEST DUP1 PUSH4 0x4F6CCCE7 EQ PUSH2 0x2CF JUMPI DUP1 PUSH4 0x6352211E EQ PUSH2 0x2FF JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x32F JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x35F JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x369 JUMPI PUSH2 0x142 JUMP JUMPDEST DUP1 PUSH4 0x23B872DD GT PUSH2 0x10A JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x1FF JUMPI DUP1 PUSH4 0x2F745C59 EQ PUSH2 0x21B JUMPI DUP1 PUSH4 0x30B2C596 EQ PUSH2 0x24B JUMPI DUP1 PUSH4 0x40D097C3 EQ PUSH2 0x267 JUMPI DUP1 PUSH4 0x42842E0E EQ PUSH2 0x297 JUMPI DUP1 PUSH4 0x42966C68 EQ PUSH2 0x2B3 JUMPI PUSH2 0x142 JUMP JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x147 JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x177 JUMPI DUP1 PUSH4 0x81812FC EQ PUSH2 0x195 JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x1C5 JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x1E1 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x161 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x15C SWAP2 SWAP1 PUSH2 0x218D JUMP JUMPDEST PUSH2 0x459 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x16E SWAP2 SWAP1 PUSH2 0x21D5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x17F PUSH2 0x46B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x18C SWAP2 SWAP1 PUSH2 0x2280 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1AF PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1AA SWAP2 SWAP1 PUSH2 0x22D8 JUMP JUMPDEST PUSH2 0x4FD JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1BC SWAP2 SWAP1 PUSH2 0x2346 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x1DF PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x1DA SWAP2 SWAP1 PUSH2 0x238D JUMP JUMPDEST PUSH2 0x519 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1E9 PUSH2 0x52F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1F6 SWAP2 SWAP1 PUSH2 0x23DC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x219 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x214 SWAP2 SWAP1 PUSH2 0x23F7 JUMP JUMPDEST PUSH2 0x53C JUMP JUMPDEST STOP JUMPDEST PUSH2 0x235 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x230 SWAP2 SWAP1 PUSH2 0x238D JUMP JUMPDEST PUSH2 0x63E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x242 SWAP2 SWAP1 PUSH2 0x23DC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x265 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x260 SWAP2 SWAP1 PUSH2 0x238D JUMP JUMPDEST PUSH2 0x6E7 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x281 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x27C SWAP2 SWAP1 PUSH2 0x244A JUMP JUMPDEST PUSH2 0x6F5 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x28E SWAP2 SWAP1 PUSH2 0x23DC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x2B1 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2AC SWAP2 SWAP1 PUSH2 0x23F7 JUMP JUMPDEST PUSH2 0x74F JUMP JUMPDEST STOP JUMPDEST PUSH2 0x2CD PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2C8 SWAP2 SWAP1 PUSH2 0x22D8 JUMP JUMPDEST PUSH2 0x76F JUMP JUMPDEST STOP JUMPDEST PUSH2 0x2E9 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x2E4 SWAP2 SWAP1 PUSH2 0x22D8 JUMP JUMPDEST PUSH2 0x786 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x2F6 SWAP2 SWAP1 PUSH2 0x23DC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x319 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x314 SWAP2 SWAP1 PUSH2 0x22D8 JUMP JUMPDEST PUSH2 0x7FC JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x326 SWAP2 SWAP1 PUSH2 0x2346 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x349 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x344 SWAP2 SWAP1 PUSH2 0x244A JUMP JUMPDEST PUSH2 0x80E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x356 SWAP2 SWAP1 PUSH2 0x23DC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x367 PUSH2 0x8C8 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x371 PUSH2 0x8DC JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x37E SWAP2 SWAP1 PUSH2 0x2346 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x38F PUSH2 0x906 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x39C SWAP2 SWAP1 PUSH2 0x2280 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x3BF PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x3BA SWAP2 SWAP1 PUSH2 0x24A3 JUMP JUMPDEST PUSH2 0x998 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x3DB PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x3D6 SWAP2 SWAP1 PUSH2 0x2618 JUMP JUMPDEST PUSH2 0x9AE JUMP JUMPDEST STOP JUMPDEST PUSH2 0x3F7 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x3F2 SWAP2 SWAP1 PUSH2 0x22D8 JUMP JUMPDEST PUSH2 0x9D3 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x404 SWAP2 SWAP1 PUSH2 0x2280 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x427 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x422 SWAP2 SWAP1 PUSH2 0x269B JUMP JUMPDEST PUSH2 0x9E5 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x434 SWAP2 SWAP1 PUSH2 0x21D5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x457 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x452 SWAP2 SWAP1 PUSH2 0x244A JUMP JUMPDEST PUSH2 0xA79 JUMP JUMPDEST STOP JUMPDEST PUSH1 0x0 PUSH2 0x464 DUP3 PUSH2 0xAFF JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP1 SLOAD PUSH2 0x47A SWAP1 PUSH2 0x270A JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x4A6 SWAP1 PUSH2 0x270A JUMP JUMPDEST DUP1 ISZERO PUSH2 0x4F3 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x4C8 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x4F3 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x4D6 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x508 DUP3 PUSH2 0xB60 JUMP JUMPDEST POP PUSH2 0x512 DUP3 PUSH2 0xBE8 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x52B DUP3 DUP3 PUSH2 0x526 PUSH2 0xC25 JUMP JUMPDEST PUSH2 0xC2D JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x8 DUP1 SLOAD SWAP1 POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x5AE JUMPI PUSH1 0x0 PUSH1 0x40 MLOAD PUSH32 0x64A0AE9200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x5A5 SWAP2 SWAP1 PUSH2 0x2346 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x5C2 DUP4 DUP4 PUSH2 0x5BD PUSH2 0xC25 JUMP JUMPDEST PUSH2 0xC3F JUMP JUMPDEST SWAP1 POP DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x638 JUMPI DUP4 DUP3 DUP3 PUSH1 0x40 MLOAD PUSH32 0x64283D7B00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x62F SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x273B JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x649 DUP4 PUSH2 0x80E JUMP JUMPDEST DUP3 LT PUSH2 0x68E JUMPI DUP3 DUP3 PUSH1 0x40 MLOAD PUSH32 0xA57D13DC00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x685 SWAP3 SWAP2 SWAP1 PUSH2 0x2772 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x6 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x6F1 DUP3 DUP3 PUSH2 0xC55 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x6FF PUSH2 0xC73 JUMP JUMPDEST PUSH1 0x0 PUSH1 0xC PUSH1 0x0 DUP2 SLOAD DUP1 SWAP3 SWAP2 SWAP1 PUSH2 0x714 SWAP1 PUSH2 0x27CA JUMP JUMPDEST SWAP2 SWAP1 POP SSTORE SWAP1 POP PUSH2 0x724 DUP4 DUP3 PUSH2 0xC55 JUMP JUMPDEST PUSH2 0x746 DUP2 PUSH1 0x40 MLOAD DUP1 PUSH1 0x60 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x35 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x2C95 PUSH1 0x35 SWAP2 CODECOPY PUSH2 0xCFA JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x76A DUP4 DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x9AE JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x782 PUSH1 0x0 DUP3 PUSH2 0x77D PUSH2 0xC25 JUMP JUMPDEST PUSH2 0xC3F JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x790 PUSH2 0x52F JUMP JUMPDEST DUP3 LT PUSH2 0x7D6 JUMPI PUSH1 0x0 DUP3 PUSH1 0x40 MLOAD PUSH32 0xA57D13DC00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x7CD SWAP3 SWAP2 SWAP1 PUSH2 0x2772 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x8 DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x7EA JUMPI PUSH2 0x7E9 PUSH2 0x2812 JUMP JUMPDEST JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x807 DUP3 PUSH2 0xB60 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x881 JUMPI PUSH1 0x0 PUSH1 0x40 MLOAD PUSH32 0x89C62B6400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x878 SWAP2 SWAP1 PUSH2 0x2346 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x3 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x8D0 PUSH2 0xC73 JUMP JUMPDEST PUSH2 0x8DA PUSH1 0x0 PUSH2 0xD56 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 PUSH1 0xB PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x1 DUP1 SLOAD PUSH2 0x915 SWAP1 PUSH2 0x270A JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x941 SWAP1 PUSH2 0x270A JUMP JUMPDEST DUP1 ISZERO PUSH2 0x98E JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x963 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x98E JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x971 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0x9AA PUSH2 0x9A3 PUSH2 0xC25 JUMP JUMPDEST DUP4 DUP4 PUSH2 0xE1C JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x9B9 DUP5 DUP5 DUP5 PUSH2 0x53C JUMP JUMPDEST PUSH2 0x9CD PUSH2 0x9C4 PUSH2 0xC25 JUMP JUMPDEST DUP6 DUP6 DUP6 DUP6 PUSH2 0xF8B JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x9DE DUP3 PUSH2 0x113C JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x5 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0xFF AND SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0xA81 PUSH2 0xC73 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0xAF3 JUMPI PUSH1 0x0 PUSH1 0x40 MLOAD PUSH32 0x1E4FBDF700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xAEA SWAP2 SWAP1 PUSH2 0x2346 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0xAFC DUP2 PUSH2 0xD56 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 PUSH4 0x49064906 PUSH1 0xE0 SHL PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ DUP1 PUSH2 0xB59 JUMPI POP PUSH2 0xB58 DUP3 PUSH2 0x124F JUMP JUMPDEST JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0xB6C DUP4 PUSH2 0x12C9 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0xBDF JUMPI DUP3 PUSH1 0x40 MLOAD PUSH32 0x7E27328900000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xBD6 SWAP2 SWAP1 PUSH2 0x23DC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x4 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0xC3A DUP4 DUP4 DUP4 PUSH1 0x1 PUSH2 0x1306 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xC4C DUP5 DUP5 DUP5 PUSH2 0x14CB JUMP JUMPDEST SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0xC6F DUP3 DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x15E8 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0xC7B PUSH2 0xC25 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xC99 PUSH2 0x8DC JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xCF8 JUMPI PUSH2 0xCBC PUSH2 0xC25 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x118CDAA700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xCEF SWAP2 SWAP1 PUSH2 0x2346 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST DUP1 PUSH1 0xA PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SWAP1 DUP2 PUSH2 0xD1A SWAP2 SWAP1 PUSH2 0x29ED JUMP JUMPDEST POP PUSH32 0xF8E1A15ABA9398E019F0B49DF1A4FDE98EE17AE345CB5F6B5E2C27F5033E8CE7 DUP3 PUSH1 0x40 MLOAD PUSH2 0xD4A SWAP2 SWAP1 PUSH2 0x23DC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xB PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP DUP2 PUSH1 0xB PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0xE8D JUMPI DUP2 PUSH1 0x40 MLOAD PUSH32 0x5B08BA1800000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xE84 SWAP2 SWAP1 PUSH2 0x2346 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 0x5 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH1 0xFF MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31 DUP4 PUSH1 0x40 MLOAD PUSH2 0xF7E SWAP2 SWAP1 PUSH2 0x21D5 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EXTCODESIZE GT ISZERO PUSH2 0x1135 JUMPI DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x150B7A02 DUP7 DUP7 DUP6 DUP6 PUSH1 0x40 MLOAD DUP6 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0xFEA SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x2B14 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0x1026 JUMPI POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1023 SWAP2 SWAP1 PUSH2 0x2B75 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0x10AA JUMPI RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x1056 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x105B JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP PUSH1 0x0 DUP2 MLOAD SUB PUSH2 0x10A2 JUMPI DUP4 PUSH1 0x40 MLOAD PUSH32 0x64A0AE9200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1099 SWAP2 SWAP1 PUSH2 0x2346 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 MLOAD DUP2 PUSH1 0x20 ADD REVERT JUMPDEST PUSH4 0x150B7A02 PUSH1 0xE0 SHL PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP2 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ PUSH2 0x1133 JUMPI DUP4 PUSH1 0x40 MLOAD PUSH32 0x64A0AE9200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x112A SWAP2 SWAP1 PUSH2 0x2346 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x1147 DUP3 PUSH2 0xB60 JUMP JUMPDEST POP PUSH1 0x0 PUSH1 0xA PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP1 SLOAD PUSH2 0x1168 SWAP1 PUSH2 0x270A JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x1194 SWAP1 PUSH2 0x270A JUMP JUMPDEST DUP1 ISZERO PUSH2 0x11E1 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x11B6 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x11E1 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x11C4 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP PUSH1 0x0 PUSH2 0x11F2 PUSH2 0x160C JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 MLOAD SUB PUSH2 0x1207 JUMPI DUP2 SWAP3 POP POP POP PUSH2 0x124A JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD GT ISZERO PUSH2 0x123C JUMPI DUP1 DUP3 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x1224 SWAP3 SWAP2 SWAP1 PUSH2 0x2BDE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP3 POP POP POP PUSH2 0x124A JUMP JUMPDEST PUSH2 0x1245 DUP5 PUSH2 0x1623 JUMP JUMPDEST SWAP3 POP POP POP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0x780E9D6300000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ DUP1 PUSH2 0x12C2 JUMPI POP PUSH2 0x12C1 DUP3 PUSH2 0x168C JUMP JUMPDEST JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 DUP1 PUSH2 0x133F JUMPI POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO JUMPDEST ISZERO PUSH2 0x1473 JUMPI PUSH1 0x0 PUSH2 0x134F DUP5 PUSH2 0xB60 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO DUP1 ISZERO PUSH2 0x13BA JUMPI POP DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO JUMPDEST DUP1 ISZERO PUSH2 0x13CD JUMPI POP PUSH2 0x13CB DUP2 DUP5 PUSH2 0x9E5 JUMP JUMPDEST ISZERO JUMPDEST ISZERO PUSH2 0x140F JUMPI DUP3 PUSH1 0x40 MLOAD PUSH32 0xA9FBF51F00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1406 SWAP2 SWAP1 PUSH2 0x2346 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 ISZERO PUSH2 0x1471 JUMPI DUP4 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 JUMPDEST POP JUMPDEST DUP4 PUSH1 0x4 PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x14D9 DUP6 DUP6 DUP6 PUSH2 0x176E JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x151D JUMPI PUSH2 0x1518 DUP5 PUSH2 0x1988 JUMP JUMPDEST PUSH2 0x155C JUMP JUMPDEST DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x155B JUMPI PUSH2 0x155A DUP2 DUP6 PUSH2 0x19D1 JUMP JUMPDEST JUMPDEST JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x159E JUMPI PUSH2 0x1599 DUP5 PUSH2 0x1ABC JUMP JUMPDEST PUSH2 0x15DD JUMP JUMPDEST DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x15DC JUMPI PUSH2 0x15DB DUP6 DUP6 PUSH2 0x1B8D JUMP JUMPDEST JUMPDEST JUMPDEST DUP1 SWAP2 POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x15F2 DUP4 DUP4 PUSH2 0x1C18 JUMP JUMPDEST PUSH2 0x1607 PUSH2 0x15FD PUSH2 0xC25 JUMP JUMPDEST PUSH1 0x0 DUP6 DUP6 DUP6 PUSH2 0xF8B JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x162E DUP3 PUSH2 0xB60 JUMP JUMPDEST POP PUSH1 0x0 PUSH2 0x1639 PUSH2 0x160C JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP2 MLOAD GT PUSH2 0x1659 JUMPI PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE POP PUSH2 0x1684 JUMP JUMPDEST DUP1 PUSH2 0x1663 DUP5 PUSH2 0x1D11 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x1674 SWAP3 SWAP2 SWAP1 PUSH2 0x2BDE JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE JUMPDEST SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0x80AC58CD00000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ DUP1 PUSH2 0x1757 JUMPI POP PUSH32 0x5B5E139F00000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ JUMPDEST DUP1 PUSH2 0x1767 JUMPI POP PUSH2 0x1766 DUP3 PUSH2 0x1DDF JUMP JUMPDEST JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x177A DUP5 PUSH2 0x12C9 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x17BC JUMPI PUSH2 0x17BB DUP2 DUP5 DUP7 PUSH2 0x1E49 JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x184D JUMPI PUSH2 0x17FE PUSH1 0x0 DUP6 PUSH1 0x0 DUP1 PUSH2 0x1306 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x3 PUSH1 0x0 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD SUB SWAP3 POP POP DUP2 SWAP1 SSTORE POP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x18D0 JUMPI PUSH1 0x1 PUSH1 0x3 PUSH1 0x0 DUP8 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP JUMPDEST DUP5 PUSH1 0x2 PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP4 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 DUP1 SWAP2 POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x8 DUP1 SLOAD SWAP1 POP PUSH1 0x9 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP PUSH1 0x8 DUP2 SWAP1 DUP1 PUSH1 0x1 DUP2 SLOAD ADD DUP1 DUP3 SSTORE DUP1 SWAP2 POP POP PUSH1 0x1 SWAP1 SUB SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 SWAP1 SWAP2 SWAP1 SWAP2 SWAP1 SWAP2 POP SSTORE POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x19DC DUP4 PUSH2 0x80E JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH1 0x7 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP PUSH1 0x0 PUSH1 0x6 PUSH1 0x0 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SWAP1 POP DUP3 DUP3 EQ PUSH2 0x1A88 JUMPI PUSH1 0x0 DUP2 PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP DUP1 DUP3 PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP3 PUSH1 0x7 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP POP JUMPDEST PUSH1 0x7 PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SSTORE DUP1 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SSTORE POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x8 DUP1 SLOAD SWAP1 POP PUSH2 0x1AD0 SWAP2 SWAP1 PUSH2 0x2C02 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH1 0x9 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 SLOAD SWAP1 POP PUSH1 0x0 PUSH1 0x8 DUP4 DUP2 SLOAD DUP2 LT PUSH2 0x1B00 JUMPI PUSH2 0x1AFF PUSH2 0x2812 JUMP JUMPDEST JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD SLOAD SWAP1 POP DUP1 PUSH1 0x8 DUP4 DUP2 SLOAD DUP2 LT PUSH2 0x1B22 JUMPI PUSH2 0x1B21 PUSH2 0x2812 JUMP JUMPDEST JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD DUP2 SWAP1 SSTORE POP DUP2 PUSH1 0x9 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP PUSH1 0x9 PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 SWAP1 SSTORE PUSH1 0x8 DUP1 SLOAD DUP1 PUSH2 0x1B71 JUMPI PUSH2 0x1B70 PUSH2 0x2C36 JUMP JUMPDEST JUMPDEST PUSH1 0x1 SWAP1 SUB DUP2 DUP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 SWAP1 SSTORE SWAP1 SSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH2 0x1B9A DUP5 PUSH2 0x80E JUMP JUMPDEST PUSH2 0x1BA4 SWAP2 SWAP1 PUSH2 0x2C02 JUMP JUMPDEST SWAP1 POP DUP2 PUSH1 0x6 PUSH1 0x0 DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP DUP1 PUSH1 0x7 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 DUP2 SWAP1 SSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x1C8A JUMPI PUSH1 0x0 PUSH1 0x40 MLOAD PUSH32 0x64A0AE9200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1C81 SWAP2 SWAP1 PUSH2 0x2346 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x1C98 DUP4 DUP4 PUSH1 0x0 PUSH2 0xC3F JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x1D0C JUMPI PUSH1 0x0 PUSH1 0x40 MLOAD PUSH32 0x73C6AC6E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1D03 SWAP2 SWAP1 PUSH2 0x2346 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 PUSH1 0x1 PUSH2 0x1D20 DUP5 PUSH2 0x1F0D JUMP JUMPDEST ADD SWAP1 POP PUSH1 0x0 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x1D3F JUMPI PUSH2 0x1D3E PUSH2 0x24ED JUMP JUMPDEST JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0x1D71 JUMPI DUP2 PUSH1 0x20 ADD PUSH1 0x1 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP JUMPDEST POP SWAP1 POP PUSH1 0x0 DUP3 PUSH1 0x20 ADD DUP3 ADD SWAP1 POP JUMPDEST PUSH1 0x1 ISZERO PUSH2 0x1DD4 JUMPI DUP1 DUP1 PUSH1 0x1 SWAP1 SUB SWAP2 POP POP PUSH32 0x3031323334353637383961626364656600000000000000000000000000000000 PUSH1 0xA DUP7 MOD BYTE DUP2 MSTORE8 PUSH1 0xA DUP6 DUP2 PUSH2 0x1DC8 JUMPI PUSH2 0x1DC7 PUSH2 0x2C65 JUMP JUMPDEST JUMPDEST DIV SWAP5 POP PUSH1 0x0 DUP6 SUB PUSH2 0x1D7F JUMPI JUMPDEST DUP2 SWAP4 POP POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH32 0x1FFC9A700000000000000000000000000000000000000000000000000000000 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND DUP3 PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND EQ SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x1E54 DUP4 DUP4 DUP4 PUSH2 0x2060 JUMP JUMPDEST PUSH2 0x1F08 JUMPI PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x1EC9 JUMPI DUP1 PUSH1 0x40 MLOAD PUSH32 0x7E27328900000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1EC0 SWAP2 SWAP1 PUSH2 0x23DC JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 DUP2 PUSH1 0x40 MLOAD PUSH32 0x177E802F00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x1EFF SWAP3 SWAP2 SWAP1 PUSH2 0x2772 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 POP PUSH27 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F010000000000000000 DUP4 LT PUSH2 0x1F6B JUMPI PUSH27 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F010000000000000000 DUP4 DUP2 PUSH2 0x1F61 JUMPI PUSH2 0x1F60 PUSH2 0x2C65 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x40 DUP2 ADD SWAP1 POP JUMPDEST PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 LT PUSH2 0x1FA8 JUMPI PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 DUP2 PUSH2 0x1F9E JUMPI PUSH2 0x1F9D PUSH2 0x2C65 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x20 DUP2 ADD SWAP1 POP JUMPDEST PUSH7 0x2386F26FC10000 DUP4 LT PUSH2 0x1FD7 JUMPI PUSH7 0x2386F26FC10000 DUP4 DUP2 PUSH2 0x1FCD JUMPI PUSH2 0x1FCC PUSH2 0x2C65 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x10 DUP2 ADD SWAP1 POP JUMPDEST PUSH4 0x5F5E100 DUP4 LT PUSH2 0x2000 JUMPI PUSH4 0x5F5E100 DUP4 DUP2 PUSH2 0x1FF6 JUMPI PUSH2 0x1FF5 PUSH2 0x2C65 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x8 DUP2 ADD SWAP1 POP JUMPDEST PUSH2 0x2710 DUP4 LT PUSH2 0x2025 JUMPI PUSH2 0x2710 DUP4 DUP2 PUSH2 0x201B JUMPI PUSH2 0x201A PUSH2 0x2C65 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x4 DUP2 ADD SWAP1 POP JUMPDEST PUSH1 0x64 DUP4 LT PUSH2 0x2048 JUMPI PUSH1 0x64 DUP4 DUP2 PUSH2 0x203E JUMPI PUSH2 0x203D PUSH2 0x2C65 JUMP JUMPDEST JUMPDEST DIV SWAP3 POP PUSH1 0x2 DUP2 ADD SWAP1 POP JUMPDEST PUSH1 0xA DUP4 LT PUSH2 0x2057 JUMPI PUSH1 0x1 DUP2 ADD SWAP1 POP JUMPDEST DUP1 SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO DUP1 ISZERO PUSH2 0x2118 JUMPI POP DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ DUP1 PUSH2 0x20D9 JUMPI POP PUSH2 0x20D8 DUP5 DUP5 PUSH2 0x9E5 JUMP JUMPDEST JUMPDEST DUP1 PUSH2 0x2117 JUMPI POP DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x20FF DUP4 PUSH2 0xBE8 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ JUMPDEST JUMPDEST SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x216A DUP2 PUSH2 0x2135 JUMP JUMPDEST DUP2 EQ PUSH2 0x2175 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x2187 DUP2 PUSH2 0x2161 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x21A3 JUMPI PUSH2 0x21A2 PUSH2 0x212B JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x21B1 DUP5 DUP3 DUP6 ADD PUSH2 0x2178 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x21CF DUP2 PUSH2 0x21BA JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x21EA PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x21C6 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x222A JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x220F JUMP JUMPDEST PUSH1 0x0 DUP5 DUP5 ADD MSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F NOT PUSH1 0x1F DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2252 DUP3 PUSH2 0x21F0 JUMP JUMPDEST PUSH2 0x225C DUP2 DUP6 PUSH2 0x21FB JUMP JUMPDEST SWAP4 POP PUSH2 0x226C DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x220C JUMP JUMPDEST PUSH2 0x2275 DUP2 PUSH2 0x2236 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 0x0 DUP4 ADD MSTORE PUSH2 0x229A DUP2 DUP5 PUSH2 0x2247 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x22B5 DUP2 PUSH2 0x22A2 JUMP JUMPDEST DUP2 EQ PUSH2 0x22C0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x22D2 DUP2 PUSH2 0x22AC JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x22EE JUMPI PUSH2 0x22ED PUSH2 0x212B JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x22FC DUP5 DUP3 DUP6 ADD PUSH2 0x22C3 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2330 DUP3 PUSH2 0x2305 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2340 DUP2 PUSH2 0x2325 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x235B PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x2337 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x236A DUP2 PUSH2 0x2325 JUMP JUMPDEST DUP2 EQ PUSH2 0x2375 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x2387 DUP2 PUSH2 0x2361 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x23A4 JUMPI PUSH2 0x23A3 PUSH2 0x212B JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x23B2 DUP6 DUP3 DUP7 ADD PUSH2 0x2378 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x23C3 DUP6 DUP3 DUP7 ADD PUSH2 0x22C3 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH2 0x23D6 DUP2 PUSH2 0x22A2 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x23F1 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x23CD JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x2410 JUMPI PUSH2 0x240F PUSH2 0x212B JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x241E DUP7 DUP3 DUP8 ADD PUSH2 0x2378 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x20 PUSH2 0x242F DUP7 DUP3 DUP8 ADD PUSH2 0x2378 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x40 PUSH2 0x2440 DUP7 DUP3 DUP8 ADD PUSH2 0x22C3 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2460 JUMPI PUSH2 0x245F PUSH2 0x212B JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x246E DUP5 DUP3 DUP6 ADD PUSH2 0x2378 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x2480 DUP2 PUSH2 0x21BA JUMP JUMPDEST DUP2 EQ PUSH2 0x248B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x249D DUP2 PUSH2 0x2477 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x24BA JUMPI PUSH2 0x24B9 PUSH2 0x212B JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x24C8 DUP6 DUP3 DUP7 ADD PUSH2 0x2378 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x24D9 DUP6 DUP3 DUP7 ADD PUSH2 0x248E JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH2 0x2525 DUP3 PUSH2 0x2236 JUMP JUMPDEST DUP2 ADD DUP2 DUP2 LT PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT OR ISZERO PUSH2 0x2544 JUMPI PUSH2 0x2543 PUSH2 0x24ED JUMP JUMPDEST JUMPDEST DUP1 PUSH1 0x40 MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2557 PUSH2 0x2121 JUMP JUMPDEST SWAP1 POP PUSH2 0x2563 DUP3 DUP3 PUSH2 0x251C JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x2583 JUMPI PUSH2 0x2582 PUSH2 0x24ED JUMP JUMPDEST JUMPDEST PUSH2 0x258C DUP3 PUSH2 0x2236 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP3 DUP2 DUP4 CALLDATACOPY PUSH1 0x0 DUP4 DUP4 ADD MSTORE POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x25BB PUSH2 0x25B6 DUP5 PUSH2 0x2568 JUMP JUMPDEST PUSH2 0x254D JUMP JUMPDEST SWAP1 POP DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP5 DUP5 DUP5 ADD GT ISZERO PUSH2 0x25D7 JUMPI PUSH2 0x25D6 PUSH2 0x24E8 JUMP JUMPDEST JUMPDEST PUSH2 0x25E2 DUP5 DUP3 DUP6 PUSH2 0x2599 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x25FF JUMPI PUSH2 0x25FE PUSH2 0x24E3 JUMP JUMPDEST JUMPDEST DUP2 CALLDATALOAD PUSH2 0x260F DUP5 DUP3 PUSH1 0x20 DUP7 ADD PUSH2 0x25A8 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x2632 JUMPI PUSH2 0x2631 PUSH2 0x212B JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2640 DUP8 DUP3 DUP9 ADD PUSH2 0x2378 JUMP JUMPDEST SWAP5 POP POP PUSH1 0x20 PUSH2 0x2651 DUP8 DUP3 DUP9 ADD PUSH2 0x2378 JUMP JUMPDEST SWAP4 POP POP PUSH1 0x40 PUSH2 0x2662 DUP8 DUP3 DUP9 ADD PUSH2 0x22C3 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2683 JUMPI PUSH2 0x2682 PUSH2 0x2130 JUMP JUMPDEST JUMPDEST PUSH2 0x268F DUP8 DUP3 DUP9 ADD PUSH2 0x25EA JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x26B2 JUMPI PUSH2 0x26B1 PUSH2 0x212B JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x26C0 DUP6 DUP3 DUP7 ADD PUSH2 0x2378 JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x26D1 DUP6 DUP3 DUP7 ADD PUSH2 0x2378 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x2 DUP3 DIV SWAP1 POP PUSH1 0x1 DUP3 AND DUP1 PUSH2 0x2722 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x2735 JUMPI PUSH2 0x2734 PUSH2 0x26DB JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP3 ADD SWAP1 POP PUSH2 0x2750 PUSH1 0x0 DUP4 ADD DUP7 PUSH2 0x2337 JUMP JUMPDEST PUSH2 0x275D PUSH1 0x20 DUP4 ADD DUP6 PUSH2 0x23CD JUMP JUMPDEST PUSH2 0x276A PUSH1 0x40 DUP4 ADD DUP5 PUSH2 0x2337 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 ADD SWAP1 POP PUSH2 0x2787 PUSH1 0x0 DUP4 ADD DUP6 PUSH2 0x2337 JUMP JUMPDEST PUSH2 0x2794 PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x23CD JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x27D5 DUP3 PUSH2 0x22A2 JUMP JUMPDEST SWAP2 POP PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 SUB PUSH2 0x2807 JUMPI PUSH2 0x2806 PUSH2 0x279B JUMP JUMPDEST JUMPDEST PUSH1 0x1 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP DUP2 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 PUSH1 0x1F DUP4 ADD DIV SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 SHL SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x8 DUP4 MUL PUSH2 0x28A3 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 PUSH2 0x2866 JUMP JUMPDEST PUSH2 0x28AD DUP7 DUP4 PUSH2 0x2866 JUMP JUMPDEST SWAP6 POP DUP1 NOT DUP5 AND SWAP4 POP DUP1 DUP7 AND DUP5 OR SWAP3 POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x28EA PUSH2 0x28E5 PUSH2 0x28E0 DUP5 PUSH2 0x22A2 JUMP JUMPDEST PUSH2 0x28C5 JUMP JUMPDEST PUSH2 0x22A2 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x2904 DUP4 PUSH2 0x28CF JUMP JUMPDEST PUSH2 0x2918 PUSH2 0x2910 DUP3 PUSH2 0x28F1 JUMP JUMPDEST DUP5 DUP5 SLOAD PUSH2 0x2873 JUMP JUMPDEST DUP3 SSTORE POP POP POP POP JUMP JUMPDEST PUSH1 0x0 SWAP1 JUMP JUMPDEST PUSH2 0x292D PUSH2 0x2920 JUMP JUMPDEST PUSH2 0x2938 DUP2 DUP5 DUP5 PUSH2 0x28FB JUMP JUMPDEST POP POP POP JUMP JUMPDEST JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x295C JUMPI PUSH2 0x2951 PUSH1 0x0 DUP3 PUSH2 0x2925 JUMP JUMPDEST PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH2 0x293E JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x1F DUP3 GT ISZERO PUSH2 0x29A1 JUMPI PUSH2 0x2972 DUP2 PUSH2 0x2841 JUMP JUMPDEST PUSH2 0x297B DUP5 PUSH2 0x2856 JUMP JUMPDEST DUP2 ADD PUSH1 0x20 DUP6 LT ISZERO PUSH2 0x298A JUMPI DUP2 SWAP1 POP JUMPDEST PUSH2 0x299E PUSH2 0x2996 DUP6 PUSH2 0x2856 JUMP JUMPDEST DUP4 ADD DUP3 PUSH2 0x293D JUMP JUMPDEST POP POP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 SHR SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x29C4 PUSH1 0x0 NOT DUP5 PUSH1 0x8 MUL PUSH2 0x29A6 JUMP JUMPDEST NOT DUP1 DUP4 AND SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x29DD DUP4 DUP4 PUSH2 0x29B3 JUMP JUMPDEST SWAP2 POP DUP3 PUSH1 0x2 MUL DUP3 OR SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x29F6 DUP3 PUSH2 0x21F0 JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2A0F JUMPI PUSH2 0x2A0E PUSH2 0x24ED JUMP JUMPDEST JUMPDEST PUSH2 0x2A19 DUP3 SLOAD PUSH2 0x270A JUMP JUMPDEST PUSH2 0x2A24 DUP3 DUP3 DUP6 PUSH2 0x2960 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 SWAP1 POP PUSH1 0x1F DUP4 GT PUSH1 0x1 DUP2 EQ PUSH2 0x2A57 JUMPI PUSH1 0x0 DUP5 ISZERO PUSH2 0x2A45 JUMPI DUP3 DUP8 ADD MLOAD SWAP1 POP JUMPDEST PUSH2 0x2A4F DUP6 DUP3 PUSH2 0x29D1 JUMP JUMPDEST DUP7 SSTORE POP PUSH2 0x2AB7 JUMP JUMPDEST PUSH1 0x1F NOT DUP5 AND PUSH2 0x2A65 DUP7 PUSH2 0x2841 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x2A8D JUMPI DUP5 DUP10 ADD MLOAD DUP3 SSTORE PUSH1 0x1 DUP3 ADD SWAP2 POP PUSH1 0x20 DUP6 ADD SWAP5 POP PUSH1 0x20 DUP2 ADD SWAP1 POP PUSH2 0x2A68 JUMP JUMPDEST DUP7 DUP4 LT ISZERO PUSH2 0x2AAA JUMPI DUP5 DUP10 ADD MLOAD PUSH2 0x2AA6 PUSH1 0x1F DUP10 AND DUP3 PUSH2 0x29B3 JUMP JUMPDEST DUP4 SSTORE POP JUMPDEST PUSH1 0x1 PUSH1 0x2 DUP9 MUL ADD DUP9 SSTORE POP POP POP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MSTORE PUSH1 0x20 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2AE6 DUP3 PUSH2 0x2ABF JUMP JUMPDEST PUSH2 0x2AF0 DUP2 DUP6 PUSH2 0x2ACA JUMP JUMPDEST SWAP4 POP PUSH2 0x2B00 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x220C JUMP JUMPDEST PUSH2 0x2B09 DUP2 PUSH2 0x2236 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x80 DUP3 ADD SWAP1 POP PUSH2 0x2B29 PUSH1 0x0 DUP4 ADD DUP8 PUSH2 0x2337 JUMP JUMPDEST PUSH2 0x2B36 PUSH1 0x20 DUP4 ADD DUP7 PUSH2 0x2337 JUMP JUMPDEST PUSH2 0x2B43 PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x23CD JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 0x60 DUP4 ADD MSTORE PUSH2 0x2B55 DUP2 DUP5 PUSH2 0x2ADB JUMP JUMPDEST SWAP1 POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD SWAP1 POP PUSH2 0x2B6F DUP2 PUSH2 0x2161 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2B8B JUMPI PUSH2 0x2B8A PUSH2 0x212B JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x2B99 DUP5 DUP3 DUP6 ADD PUSH2 0x2B60 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2BB8 DUP3 PUSH2 0x21F0 JUMP JUMPDEST PUSH2 0x2BC2 DUP2 DUP6 PUSH2 0x2BA2 JUMP JUMPDEST SWAP4 POP PUSH2 0x2BD2 DUP2 DUP6 PUSH1 0x20 DUP7 ADD PUSH2 0x220C JUMP JUMPDEST DUP1 DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2BEA DUP3 DUP6 PUSH2 0x2BAD JUMP JUMPDEST SWAP2 POP PUSH2 0x2BF6 DUP3 DUP5 PUSH2 0x2BAD JUMP JUMPDEST SWAP2 POP DUP2 SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2C0D DUP3 PUSH2 0x22A2 JUMP JUMPDEST SWAP2 POP PUSH2 0x2C18 DUP4 PUSH2 0x22A2 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 SUB SWAP1 POP DUP2 DUP2 GT ISZERO PUSH2 0x2C30 JUMPI PUSH2 0x2C2F PUSH2 0x279B JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x31 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT INVALID PUSH10 0x7066733A2F2F516D6246 0x4B BALANCE MSIZE ORIGIN PUSH10 0x63324832555876797847 PUSH14 0x51697962417179416B5050656743 PUSH3 0x4C6F64 BLOBBASEFEE SELFBALANCE JUMPI CALLER PUSH3 0x714D66 LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xB8 CALLDATALOAD PUSH10 0x333861773D1457AD4710 PUSH16 0xD59DB66AC713987444B5A148145CD98D CREATE2 0xE8 PUSH5 0x736F6C6343 STOP ADDMOD SHR STOP CALLER ",
          "sourceMap": "123:356:66:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2071:230:63;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2364:89:45;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3496:154;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3322:113;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;2062:102:49;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4142:578:45;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;1736:255:49;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;364:112:66;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;1130:249:63;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4786:132:45;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;563:314:48;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;2236:226:49;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2184:118:45;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;1919:208;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2293:101:40;;;:::i;:::-;;1638:85;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2517:93:45;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3717:144;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;4984:233;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;1867:196:63;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;3927:153:45;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;2543:215:40;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;2071:230:63;2228:4;2257:36;2281:11;2257:23;:36::i;:::-;2250:43;;2071:230;;;:::o;2364:89:45:-;2409:13;2441:5;2434:12;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2364:89;:::o;3496:154::-;3563:7;3582:22;3596:7;3582:13;:22::i;:::-;;3622:21;3635:7;3622:12;:21::i;:::-;3615:28;;3496:154;;;:::o;3322:113::-;3393:35;3402:2;3406:7;3415:12;:10;:12::i;:::-;3393:8;:35::i;:::-;3322:113;;:::o;2062:102:49:-;2114:7;2140:10;:17;;;;2133:24;;2062:102;:::o;4142:578:45:-;4250:1;4236:16;;:2;:16;;;4232:87;;4305:1;4275:33;;;;;;;;;;;:::i;:::-;;;;;;;;4232:87;4537:21;4561:34;4569:2;4573:7;4582:12;:10;:12::i;:::-;4561:7;:34::i;:::-;4537:58;;4626:4;4609:21;;:13;:21;;;4605:109;;4674:4;4680:7;4689:13;4653:50;;;;;;;;;;;;;:::i;:::-;;;;;;;;4605:109;4222:498;4142:578;;;:::o;1736:255:49:-;1824:7;1856:16;1866:5;1856:9;:16::i;:::-;1847:5;:25;1843:99;;1918:5;1925;1895:36;;;;;;;;;;;;:::i;:::-;;;;;;;;1843:99;1958:12;:19;1971:5;1958:19;;;;;;;;;;;;;;;:26;1978:5;1958:26;;;;;;;;;;;;1951:33;;1736:255;;;;:::o;364:112:66:-;445:23;455:2;459:8;445:9;:23::i;:::-;364:112;;:::o;1130:249:63:-;1213:7;1531:13:40;:11;:13::i;:::-;1238:15:63::1;1256:12;;:14;;;;;;;;;:::i;:::-;;;;;1238:32;;1281:22;1291:2;1295:7;1281:9;:22::i;:::-;1314:32;1327:7;1336:9;;;;;;;;;;;;;;;;;1314:12;:32::i;:::-;1364:7;1357:14;;;1130:249:::0;;;:::o;4786:132:45:-;4872:39;4889:4;4895:2;4899:7;4872:39;;;;;;;;;;;;:16;:39::i;:::-;4786:132;;;:::o;563:314:48:-;828:42;844:1;848:7;857:12;:10;:12::i;:::-;828:7;:42::i;:::-;;563:314;:::o;2236:226:49:-;2302:7;2334:13;:11;:13::i;:::-;2325:5;:22;2321:101;;2401:1;2405:5;2370:41;;;;;;;;;;;;:::i;:::-;;;;;;;;2321:101;2438:10;2449:5;2438:17;;;;;;;;:::i;:::-;;;;;;;;;;2431:24;;2236:226;;;:::o;2184:118:45:-;2247:7;2273:22;2287:7;2273:13;:22::i;:::-;2266:29;;2184:118;;;:::o;1919:208::-;1982:7;2022:1;2005:19;;:5;:19;;;2001:87;;2074:1;2047:30;;;;;;;;;;;:::i;:::-;;;;;;;;2001:87;2104:9;:16;2114:5;2104:16;;;;;;;;;;;;;;;;2097:23;;1919:208;;;:::o;2293:101:40:-;1531:13;:11;:13::i;:::-;2357:30:::1;2384:1;2357:18;:30::i;:::-;2293:101::o:0;1638:85::-;1684:7;1710:6;;;;;;;;;;;1703:13;;1638:85;:::o;2517:93:45:-;2564:13;2596:7;2589:14;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2517:93;:::o;3717:144::-;3802:52;3821:12;:10;:12::i;:::-;3835:8;3845;3802:18;:52::i;:::-;3717:144;;:::o;4984:233::-;5097:31;5110:4;5116:2;5120:7;5097:12;:31::i;:::-;5138:72;5172:12;:10;:12::i;:::-;5186:4;5192:2;5196:7;5205:4;5138:33;:72::i;:::-;4984:233;;;;:::o;1867:196:63:-;1994:13;2032:23;2047:7;2032:14;:23::i;:::-;2025:30;;1867:196;;;:::o;3927:153:45:-;4015:4;4038:18;:25;4057:5;4038:25;;;;;;;;;;;;;;;:35;4064:8;4038:35;;;;;;;;;;;;;;;;;;;;;;;;;4031:42;;3927:153;;;;:::o;2543:215:40:-;1531:13;:11;:13::i;:::-;2647:1:::1;2627:22;;:8;:22;;::::0;2623:91:::1;;2700:1;2672:31;;;;;;;;;;;:::i;:::-;;;;;;;;2623:91;2723:28;2742:8;2723:18;:28::i;:::-;2543:215:::0;:::o;938:207:50:-;1040:4;761:10;754:18;;1063:35;;;:11;:35;;;;:75;;;;1102:36;1126:11;1102:23;:36::i;:::-;1063:75;1056:82;;938:207;;;:::o;16212:241:45:-;16275:7;16294:13;16310:17;16319:7;16310:8;:17::i;:::-;16294:33;;16358:1;16341:19;;:5;:19;;;16337:88;;16406:7;16383:31;;;;;;;;;;;:::i;:::-;;;;;;;;16337:88;16441:5;16434:12;;;16212:241;;;:::o;5963:127::-;6033:7;6059:15;:24;6075:7;6059:24;;;;;;;;;;;;;;;;;;;;;6052:31;;5963:127;;;:::o;656:96:54:-;709:7;735:10;728:17;;656:96;:::o;14492:120:45:-;14572:33;14581:2;14585:7;14594:4;14600;14572:8;:33::i;:::-;14492:120;;;:::o;1457:212:63:-;1597:7;1629:32;1643:2;1647:7;1656:4;1629:13;:32::i;:::-;1622:39;;1457:212;;;;;:::o;10656:100:45:-;10723:26;10733:2;10737:7;10723:26;;;;;;;;;;;;:9;:26::i;:::-;10656:100;;:::o;1796:162:40:-;1866:12;:10;:12::i;:::-;1855:23;;:7;:5;:7::i;:::-;:23;;;1851:101;;1928:12;:10;:12::i;:::-;1901:40;;;;;;;;;;;:::i;:::-;;;;;;;;1851:101;1796:162::o;1923:167:50:-;2036:9;2014:10;:19;2025:7;2014:19;;;;;;;;;;;:31;;;;;;:::i;:::-;;2060:23;2075:7;2060:23;;;;;;:::i;:::-;;;;;;;;1923:167;;:::o;2912:187:40:-;2985:16;3004:6;;;;;;;;;;;2985:25;;3029:8;3020:6;;:17;;;;;;;;;;;;;;;;;;3083:8;3052:40;;3073:8;3052:40;;;;;;;;;;;;2975:124;2912:187;:::o;15665:312:45:-;15792:1;15772:22;;:8;:22;;;15768:91;;15839:8;15817:31;;;;;;;;;;;:::i;:::-;;;;;;;;15768:91;15906:8;15868:18;:25;15887:5;15868:25;;;;;;;;;;;;;;;:35;15894:8;15868:35;;;;;;;;;;;;;;;;:46;;;;;;;;;;;;;;;;;;15951:8;15929:41;;15944:5;15929:41;;;15961:8;15929:41;;;;;;:::i;:::-;;;;;;;;15665:312;;;:::o;985:924:53:-;1182:1;1165:2;:14;;;:18;1161:742;;;1219:2;1203:36;;;1240:8;1250:4;1256:7;1265:4;1203:67;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;1199:694;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1577:1;1560:6;:13;:18;1556:323;;1700:2;1664:39;;;;;;;;;;;:::i;:::-;;;;;;;;1556:323;1831:6;1825:13;1816:6;1812:2;1808:15;1801:38;1199:694;1327:41;;;1317:51;;;:6;:51;;;;1313:182;;1473:2;1437:39;;;;;;;;;;;:::i;:::-;;;;;;;;1313:182;1271:238;1161:742;985:924;;;;;:::o;1211:593:50:-;1284:13;1309:22;1323:7;1309:13;:22::i;:::-;;1342:23;1368:10;:19;1379:7;1368:19;;;;;;;;;;;1342:45;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1397:18;1418:10;:8;:10::i;:::-;1397:31;;1523:1;1507:4;1501:18;:23;1497:70;;1547:9;1540:16;;;;;;1497:70;1692:1;1672:9;1666:23;:27;1662:95;;;1730:4;1736:9;1716:30;;;;;;;;;:::i;:::-;;;;;;;;;;;;;1709:37;;;;;;1662:95;1774:23;1789:7;1774:14;:23::i;:::-;1767:30;;;;1211:593;;;;:::o;1435:222:49:-;1537:4;1575:35;1560:50;;;:11;:50;;;;:90;;;;1614:36;1638:11;1614:23;:36::i;:::-;1560:90;1553:97;;1435:222;;;:::o;5732:115:45:-;5798:7;5824;:16;5832:7;5824:16;;;;;;;;;;;;;;;;;;;;;5817:23;;5732:115;;;:::o;14794:662::-;14954:9;:31;;;;14983:1;14967:18;;:4;:18;;;;14954:31;14950:460;;;15001:13;15017:22;15031:7;15017:13;:22::i;:::-;15001:38;;15183:1;15167:18;;:4;:18;;;;:35;;;;;15198:4;15189:13;;:5;:13;;;;15167:35;:69;;;;;15207:29;15224:5;15231:4;15207:16;:29::i;:::-;15206:30;15167:69;15163:142;;;15285:4;15263:27;;;;;;;;;;;:::i;:::-;;;;;;;;15163:142;15323:9;15319:81;;;15377:7;15373:2;15357:28;;15366:5;15357:28;;;;;;;;;;;;15319:81;14987:423;14950:460;15447:2;15420:15;:24;15436:7;15420:24;;;;;;;;;;;;:29;;;;;;;;;;;;;;;;;;14794:662;;;;:::o;2518:625:49:-;2613:7;2632:21;2656:32;2670:2;2674:7;2683:4;2656:13;:32::i;:::-;2632:56;;2728:1;2703:27;;:13;:27;;;2699:210;;2746:40;2778:7;2746:31;:40::i;:::-;2699:210;;;2824:2;2807:19;;:13;:19;;;2803:106;;2842:56;2875:13;2890:7;2842:32;:56::i;:::-;2803:106;2699:210;2936:1;2922:16;;:2;:16;;;2918:188;;2954:45;2991:7;2954:36;:45::i;:::-;2918:188;;;3037:2;3020:19;;:13;:19;;;3016:90;;3055:40;3083:2;3087:7;3055:27;:40::i;:::-;3016:90;2918:188;3123:13;3116:20;;;2518:625;;;;;:::o;10977:207:45:-;11071:18;11077:2;11081:7;11071:5;:18::i;:::-;11099:78;11133:12;:10;:12::i;:::-;11155:1;11159:2;11163:7;11172:4;11099:33;:78::i;:::-;10977:207;;;:::o;3173:92::-;3224:13;3249:9;;;;;;;;;;;;;;3173:92;:::o;2676:255::-;2740:13;2765:22;2779:7;2765:13;:22::i;:::-;;2798:21;2822:10;:8;:10::i;:::-;2798:34;;2873:1;2855:7;2849:21;:25;:75;;;;;;;;;;;;;;;;;2891:7;2900:18;:7;:16;:18::i;:::-;2877:42;;;;;;;;;:::i;:::-;;;;;;;;;;;;;2849:75;2842:82;;;2676:255;;;:::o;1560:300::-;1662:4;1712:25;1697:40;;;:11;:40;;;;:104;;;;1768:33;1753:48;;;:11;:48;;;;1697:104;:156;;;;1817:36;1841:11;1817:23;:36::i;:::-;1697:156;1678:175;;1560:300;;;:::o;8861:795::-;8947:7;8966:12;8981:17;8990:7;8981:8;:17::i;:::-;8966:32;;9074:1;9058:18;;:4;:18;;;9054:86;;9092:37;9109:4;9115;9121:7;9092:16;:37::i;:::-;9054:86;9200:1;9184:18;;:4;:18;;;9180:256;;9300:48;9317:1;9321:7;9338:1;9342:5;9300:8;:48::i;:::-;9410:1;9391:9;:15;9401:4;9391:15;;;;;;;;;;;;;;;;:20;;;;;;;;;;;9180:256;9464:1;9450:16;;:2;:16;;;9446:107;;9527:1;9510:9;:13;9520:2;9510:13;;;;;;;;;;;;;;;;:18;;;;;;;;;;;9446:107;9582:2;9563:7;:16;9571:7;9563:16;;;;;;;;;;;;:21;;;;;;;;;;;;;;;;;;9619:7;9615:2;9600:27;;9609:4;9600:27;;;;;;;;;;;;9645:4;9638:11;;;8861:795;;;;;:::o;3846:161:49:-;3949:10;:17;;;;3922:15;:24;3938:7;3922:24;;;;;;;;;;;:44;;;;3976:10;3992:7;3976:24;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3846:161;:::o;4624:1055::-;4886:22;4911:15;4921:4;4911:9;:15::i;:::-;4886:40;;4936:18;4957:17;:26;4975:7;4957:26;;;;;;;;;;;;4936:47;;4994:61;5058:12;:18;5071:4;5058:18;;;;;;;;;;;;;;;4994:82;;5194:14;5180:10;:28;5176:325;;5224:19;5246;:35;5266:14;5246:35;;;;;;;;;;;;5224:57;;5330:11;5296:19;:31;5316:10;5296:31;;;;;;;;;;;:45;;;;5446:10;5413:17;:30;5431:11;5413:30;;;;;;;;;;;:43;;;;5210:291;5176:325;5594:17;:26;5612:7;5594:26;;;;;;;;;;;5587:33;;;5637:19;:35;5657:14;5637:35;;;;;;;;;;;5630:42;;;4705:974;;;4624:1055;;:::o;5967:1061::-;6216:22;6261:1;6241:10;:17;;;;:21;;;;:::i;:::-;6216:46;;6272:18;6293:15;:24;6309:7;6293:24;;;;;;;;;;;;6272:45;;6639:19;6661:10;6672:14;6661:26;;;;;;;;:::i;:::-;;;;;;;;;;6639:48;;6723:11;6698:10;6709;6698:22;;;;;;;;:::i;:::-;;;;;;;;;:36;;;;6833:10;6802:15;:28;6818:11;6802:28;;;;;;;;;;;:41;;;;6971:15;:24;6987:7;6971:24;;;;;;;;;;;6964:31;;;7005:10;:16;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;6038:990;;;5967:1061;:::o;3437:214::-;3521:14;3554:1;3538:13;3548:2;3538:9;:13::i;:::-;:17;;;;:::i;:::-;3521:34;;3592:7;3565:12;:16;3578:2;3565:16;;;;;;;;;;;;;;;:24;3582:6;3565:24;;;;;;;;;;;:34;;;;3638:6;3609:17;:26;3627:7;3609:26;;;;;;;;;;;:35;;;;3511:140;3437:214;;:::o;9978:327:45:-;10059:1;10045:16;;:2;:16;;;10041:87;;10114:1;10084:33;;;;;;;;;;;:::i;:::-;;;;;;;;10041:87;10137:21;10161:32;10169:2;10173:7;10190:1;10161:7;:32::i;:::-;10137:56;;10232:1;10207:27;;:13;:27;;;10203:96;;10285:1;10257:31;;;;;;;;;;;:::i;:::-;;;;;;;;10203:96;10031:274;9978:327;;:::o;987:632:56:-;1043:13;1092:14;1129:1;1109:17;1120:5;1109:10;:17::i;:::-;:21;1092:38;;1144:20;1178:6;1167:18;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1144:41;;1199:11;1294:6;1290:2;1286:15;1278:6;1274:28;1267:35;;1329:247;1336:4;1329:247;;;1360:5;;;;;;;;1464:10;1459:2;1452:5;1448:14;1443:32;1438:3;1430:46;1520:2;1511:11;;;;;;:::i;:::-;;;;;1553:1;1544:5;:10;1329:247;1540:21;1329:247;1596:6;1589:13;;;;;987:632;;;:::o;763:146:57:-;839:4;877:25;862:40;;;:11;:40;;;;855:47;;763:146;;;:::o;7105:368:45:-;7217:38;7231:5;7238:7;7247;7217:13;:38::i;:::-;7212:255;;7292:1;7275:19;;:5;:19;;;7271:186;;7344:7;7321:31;;;;;;;;;;;:::i;:::-;;;;;;;;7271:186;7425:7;7434;7398:44;;;;;;;;;;;;:::i;:::-;;;;;;;;7212:255;7105:368;;;:::o;25316:916:59:-;25369:7;25388:14;25405:1;25388:18;;25453:8;25444:5;:17;25440:103;;25490:8;25481:17;;;;;;:::i;:::-;;;;;25526:2;25516:12;;;;25440:103;25569:8;25560:5;:17;25556:103;;25606:8;25597:17;;;;;;:::i;:::-;;;;;25642:2;25632:12;;;;25556:103;25685:8;25676:5;:17;25672:103;;25722:8;25713:17;;;;;;:::i;:::-;;;;;25758:2;25748:12;;;;25672:103;25801:7;25792:5;:16;25788:100;;25837:7;25828:16;;;;;;:::i;:::-;;;;;25872:1;25862:11;;;;25788:100;25914:7;25905:5;:16;25901:100;;25950:7;25941:16;;;;;;:::i;:::-;;;;;25985:1;25975:11;;;;25901:100;26027:7;26018:5;:16;26014:100;;26063:7;26054:16;;;;;;:::i;:::-;;;;;26098:1;26088:11;;;;26014:100;26140:7;26131:5;:16;26127:66;;26177:1;26167:11;;;;26127:66;26219:6;26212:13;;;25316:916;;;:::o;6401:272:45:-;6504:4;6558:1;6539:21;;:7;:21;;;;:127;;;;;6586:7;6577:16;;:5;:16;;;:52;;;;6597:32;6614:5;6621:7;6597:16;:32::i;:::-;6577:52;:88;;;;6658:7;6633:32;;:21;6646:7;6633:12;:21::i;:::-;:32;;;6577:88;6539:127;6520:146;;6401:272;;;;;:::o;7:75:67:-;40:6;73:2;67:9;57:19;;7:75;:::o;88:117::-;197:1;194;187:12;211:117;320:1;317;310:12;334:149;370:7;410:66;403:5;399:78;388:89;;334:149;;;:::o;489:120::-;561:23;578:5;561:23;:::i;:::-;554:5;551:34;541:62;;599:1;596;589:12;541:62;489:120;:::o;615:137::-;660:5;698:6;685:20;676:29;;714:32;740:5;714:32;:::i;:::-;615:137;;;;:::o;758:327::-;816:6;865:2;853:9;844:7;840:23;836:32;833:119;;;871:79;;:::i;:::-;833:119;991:1;1016:52;1060:7;1051:6;1040:9;1036:22;1016:52;:::i;:::-;1006:62;;962:116;758:327;;;;:::o;1091:90::-;1125:7;1168:5;1161:13;1154:21;1143:32;;1091:90;;;:::o;1187:109::-;1268:21;1283:5;1268:21;:::i;:::-;1263:3;1256:34;1187:109;;:::o;1302:210::-;1389:4;1427:2;1416:9;1412:18;1404:26;;1440:65;1502:1;1491:9;1487:17;1478:6;1440:65;:::i;:::-;1302:210;;;;:::o;1518:99::-;1570:6;1604:5;1598:12;1588:22;;1518:99;;;:::o;1623:169::-;1707:11;1741:6;1736:3;1729:19;1781:4;1776:3;1772:14;1757:29;;1623:169;;;;:::o;1798:248::-;1880:1;1890:113;1904:6;1901:1;1898:13;1890:113;;;1989:1;1984:3;1980:11;1974:18;1970:1;1965:3;1961:11;1954:39;1926:2;1923:1;1919:10;1914:15;;1890:113;;;2037:1;2028:6;2023:3;2019:16;2012:27;1860:186;1798:248;;;:::o;2052:102::-;2093:6;2144:2;2140:7;2135:2;2128:5;2124:14;2120:28;2110:38;;2052:102;;;:::o;2160:377::-;2248:3;2276:39;2309:5;2276:39;:::i;:::-;2331:71;2395:6;2390:3;2331:71;:::i;:::-;2324:78;;2411:65;2469:6;2464:3;2457:4;2450:5;2446:16;2411:65;:::i;:::-;2501:29;2523:6;2501:29;:::i;:::-;2496:3;2492:39;2485:46;;2252:285;2160:377;;;;:::o;2543:313::-;2656:4;2694:2;2683:9;2679:18;2671:26;;2743:9;2737:4;2733:20;2729:1;2718:9;2714:17;2707:47;2771:78;2844:4;2835:6;2771:78;:::i;:::-;2763:86;;2543:313;;;;:::o;2862:77::-;2899:7;2928:5;2917:16;;2862:77;;;:::o;2945:122::-;3018:24;3036:5;3018:24;:::i;:::-;3011:5;3008:35;2998:63;;3057:1;3054;3047:12;2998:63;2945:122;:::o;3073:139::-;3119:5;3157:6;3144:20;3135:29;;3173:33;3200:5;3173:33;:::i;:::-;3073:139;;;;:::o;3218:329::-;3277:6;3326:2;3314:9;3305:7;3301:23;3297:32;3294:119;;;3332:79;;:::i;:::-;3294:119;3452:1;3477:53;3522:7;3513:6;3502:9;3498:22;3477:53;:::i;:::-;3467:63;;3423:117;3218:329;;;;:::o;3553:126::-;3590:7;3630:42;3623:5;3619:54;3608:65;;3553:126;;;:::o;3685:96::-;3722:7;3751:24;3769:5;3751:24;:::i;:::-;3740:35;;3685:96;;;:::o;3787:118::-;3874:24;3892:5;3874:24;:::i;:::-;3869:3;3862:37;3787:118;;:::o;3911:222::-;4004:4;4042:2;4031:9;4027:18;4019:26;;4055:71;4123:1;4112:9;4108:17;4099:6;4055:71;:::i;:::-;3911:222;;;;:::o;4139:122::-;4212:24;4230:5;4212:24;:::i;:::-;4205:5;4202:35;4192:63;;4251:1;4248;4241:12;4192:63;4139:122;:::o;4267:139::-;4313:5;4351:6;4338:20;4329:29;;4367:33;4394:5;4367:33;:::i;:::-;4267:139;;;;:::o;4412:474::-;4480:6;4488;4537:2;4525:9;4516:7;4512:23;4508:32;4505:119;;;4543:79;;:::i;:::-;4505:119;4663:1;4688:53;4733:7;4724:6;4713:9;4709:22;4688:53;:::i;:::-;4678:63;;4634:117;4790:2;4816:53;4861:7;4852:6;4841:9;4837:22;4816:53;:::i;:::-;4806:63;;4761:118;4412:474;;;;;:::o;4892:118::-;4979:24;4997:5;4979:24;:::i;:::-;4974:3;4967:37;4892:118;;:::o;5016:222::-;5109:4;5147:2;5136:9;5132:18;5124:26;;5160:71;5228:1;5217:9;5213:17;5204:6;5160:71;:::i;:::-;5016:222;;;;:::o;5244:619::-;5321:6;5329;5337;5386:2;5374:9;5365:7;5361:23;5357:32;5354:119;;;5392:79;;:::i;:::-;5354:119;5512:1;5537:53;5582:7;5573:6;5562:9;5558:22;5537:53;:::i;:::-;5527:63;;5483:117;5639:2;5665:53;5710:7;5701:6;5690:9;5686:22;5665:53;:::i;:::-;5655:63;;5610:118;5767:2;5793:53;5838:7;5829:6;5818:9;5814:22;5793:53;:::i;:::-;5783:63;;5738:118;5244:619;;;;;:::o;5869:329::-;5928:6;5977:2;5965:9;5956:7;5952:23;5948:32;5945:119;;;5983:79;;:::i;:::-;5945:119;6103:1;6128:53;6173:7;6164:6;6153:9;6149:22;6128:53;:::i;:::-;6118:63;;6074:117;5869:329;;;;:::o;6204:116::-;6274:21;6289:5;6274:21;:::i;:::-;6267:5;6264:32;6254:60;;6310:1;6307;6300:12;6254:60;6204:116;:::o;6326:133::-;6369:5;6407:6;6394:20;6385:29;;6423:30;6447:5;6423:30;:::i;:::-;6326:133;;;;:::o;6465:468::-;6530:6;6538;6587:2;6575:9;6566:7;6562:23;6558:32;6555:119;;;6593:79;;:::i;:::-;6555:119;6713:1;6738:53;6783:7;6774:6;6763:9;6759:22;6738:53;:::i;:::-;6728:63;;6684:117;6840:2;6866:50;6908:7;6899:6;6888:9;6884:22;6866:50;:::i;:::-;6856:60;;6811:115;6465:468;;;;;:::o;6939:117::-;7048:1;7045;7038:12;7062:117;7171:1;7168;7161:12;7185:180;7233:77;7230:1;7223:88;7330:4;7327:1;7320:15;7354:4;7351:1;7344:15;7371:281;7454:27;7476:4;7454:27;:::i;:::-;7446:6;7442:40;7584:6;7572:10;7569:22;7548:18;7536:10;7533:34;7530:62;7527:88;;;7595:18;;:::i;:::-;7527:88;7635:10;7631:2;7624:22;7414:238;7371:281;;:::o;7658:129::-;7692:6;7719:20;;:::i;:::-;7709:30;;7748:33;7776:4;7768:6;7748:33;:::i;:::-;7658:129;;;:::o;7793:307::-;7854:4;7944:18;7936:6;7933:30;7930:56;;;7966:18;;:::i;:::-;7930:56;8004:29;8026:6;8004:29;:::i;:::-;7996:37;;8088:4;8082;8078:15;8070:23;;7793:307;;;:::o;8106:148::-;8204:6;8199:3;8194;8181:30;8245:1;8236:6;8231:3;8227:16;8220:27;8106:148;;;:::o;8260:423::-;8337:5;8362:65;8378:48;8419:6;8378:48;:::i;:::-;8362:65;:::i;:::-;8353:74;;8450:6;8443:5;8436:21;8488:4;8481:5;8477:16;8526:3;8517:6;8512:3;8508:16;8505:25;8502:112;;;8533:79;;:::i;:::-;8502:112;8623:54;8670:6;8665:3;8660;8623:54;:::i;:::-;8343:340;8260:423;;;;;:::o;8702:338::-;8757:5;8806:3;8799:4;8791:6;8787:17;8783:27;8773:122;;8814:79;;:::i;:::-;8773:122;8931:6;8918:20;8956:78;9030:3;9022:6;9015:4;9007:6;9003:17;8956:78;:::i;:::-;8947:87;;8763:277;8702:338;;;;:::o;9046:943::-;9141:6;9149;9157;9165;9214:3;9202:9;9193:7;9189:23;9185:33;9182:120;;;9221:79;;:::i;:::-;9182:120;9341:1;9366:53;9411:7;9402:6;9391:9;9387:22;9366:53;:::i;:::-;9356:63;;9312:117;9468:2;9494:53;9539:7;9530:6;9519:9;9515:22;9494:53;:::i;:::-;9484:63;;9439:118;9596:2;9622:53;9667:7;9658:6;9647:9;9643:22;9622:53;:::i;:::-;9612:63;;9567:118;9752:2;9741:9;9737:18;9724:32;9783:18;9775:6;9772:30;9769:117;;;9805:79;;:::i;:::-;9769:117;9910:62;9964:7;9955:6;9944:9;9940:22;9910:62;:::i;:::-;9900:72;;9695:287;9046:943;;;;;;;:::o;9995:474::-;10063:6;10071;10120:2;10108:9;10099:7;10095:23;10091:32;10088:119;;;10126:79;;:::i;:::-;10088:119;10246:1;10271:53;10316:7;10307:6;10296:9;10292:22;10271:53;:::i;:::-;10261:63;;10217:117;10373:2;10399:53;10444:7;10435:6;10424:9;10420:22;10399:53;:::i;:::-;10389:63;;10344:118;9995:474;;;;;:::o;10475:180::-;10523:77;10520:1;10513:88;10620:4;10617:1;10610:15;10644:4;10641:1;10634:15;10661:320;10705:6;10742:1;10736:4;10732:12;10722:22;;10789:1;10783:4;10779:12;10810:18;10800:81;;10866:4;10858:6;10854:17;10844:27;;10800:81;10928:2;10920:6;10917:14;10897:18;10894:38;10891:84;;10947:18;;:::i;:::-;10891:84;10712:269;10661:320;;;:::o;10987:442::-;11136:4;11174:2;11163:9;11159:18;11151:26;;11187:71;11255:1;11244:9;11240:17;11231:6;11187:71;:::i;:::-;11268:72;11336:2;11325:9;11321:18;11312:6;11268:72;:::i;:::-;11350;11418:2;11407:9;11403:18;11394:6;11350:72;:::i;:::-;10987:442;;;;;;:::o;11435:332::-;11556:4;11594:2;11583:9;11579:18;11571:26;;11607:71;11675:1;11664:9;11660:17;11651:6;11607:71;:::i;:::-;11688:72;11756:2;11745:9;11741:18;11732:6;11688:72;:::i;:::-;11435:332;;;;;:::o;11773:180::-;11821:77;11818:1;11811:88;11918:4;11915:1;11908:15;11942:4;11939:1;11932:15;11959:233;11998:3;12021:24;12039:5;12021:24;:::i;:::-;12012:33;;12067:66;12060:5;12057:77;12054:103;;12137:18;;:::i;:::-;12054:103;12184:1;12177:5;12173:13;12166:20;;11959:233;;;:::o;12198:180::-;12246:77;12243:1;12236:88;12343:4;12340:1;12333:15;12367:4;12364:1;12357:15;12384:141;12433:4;12456:3;12448:11;;12479:3;12476:1;12469:14;12513:4;12510:1;12500:18;12492:26;;12384:141;;;:::o;12531:93::-;12568:6;12615:2;12610;12603:5;12599:14;12595:23;12585:33;;12531:93;;;:::o;12630:107::-;12674:8;12724:5;12718:4;12714:16;12693:37;;12630:107;;;;:::o;12743:393::-;12812:6;12862:1;12850:10;12846:18;12885:97;12915:66;12904:9;12885:97;:::i;:::-;13003:39;13033:8;13022:9;13003:39;:::i;:::-;12991:51;;13075:4;13071:9;13064:5;13060:21;13051:30;;13124:4;13114:8;13110:19;13103:5;13100:30;13090:40;;12819:317;;12743:393;;;;;:::o;13142:60::-;13170:3;13191:5;13184:12;;13142:60;;;:::o;13208:142::-;13258:9;13291:53;13309:34;13318:24;13336:5;13318:24;:::i;:::-;13309:34;:::i;:::-;13291:53;:::i;:::-;13278:66;;13208:142;;;:::o;13356:75::-;13399:3;13420:5;13413:12;;13356:75;;;:::o;13437:269::-;13547:39;13578:7;13547:39;:::i;:::-;13608:91;13657:41;13681:16;13657:41;:::i;:::-;13649:6;13642:4;13636:11;13608:91;:::i;:::-;13602:4;13595:105;13513:193;13437:269;;;:::o;13712:73::-;13757:3;13712:73;:::o;13791:189::-;13868:32;;:::i;:::-;13909:65;13967:6;13959;13953:4;13909:65;:::i;:::-;13844:136;13791:189;;:::o;13986:186::-;14046:120;14063:3;14056:5;14053:14;14046:120;;;14117:39;14154:1;14147:5;14117:39;:::i;:::-;14090:1;14083:5;14079:13;14070:22;;14046:120;;;13986:186;;:::o;14178:543::-;14279:2;14274:3;14271:11;14268:446;;;14313:38;14345:5;14313:38;:::i;:::-;14397:29;14415:10;14397:29;:::i;:::-;14387:8;14383:44;14580:2;14568:10;14565:18;14562:49;;;14601:8;14586:23;;14562:49;14624:80;14680:22;14698:3;14680:22;:::i;:::-;14670:8;14666:37;14653:11;14624:80;:::i;:::-;14283:431;;14268:446;14178:543;;;:::o;14727:117::-;14781:8;14831:5;14825:4;14821:16;14800:37;;14727:117;;;;:::o;14850:169::-;14894:6;14927:51;14975:1;14971:6;14963:5;14960:1;14956:13;14927:51;:::i;:::-;14923:56;15008:4;15002;14998:15;14988:25;;14901:118;14850:169;;;;:::o;15024:295::-;15100:4;15246:29;15271:3;15265:4;15246:29;:::i;:::-;15238:37;;15308:3;15305:1;15301:11;15295:4;15292:21;15284:29;;15024:295;;;;:::o;15324:1395::-;15441:37;15474:3;15441:37;:::i;:::-;15543:18;15535:6;15532:30;15529:56;;;15565:18;;:::i;:::-;15529:56;15609:38;15641:4;15635:11;15609:38;:::i;:::-;15694:67;15754:6;15746;15740:4;15694:67;:::i;:::-;15788:1;15812:4;15799:17;;15844:2;15836:6;15833:14;15861:1;15856:618;;;;16518:1;16535:6;16532:77;;;16584:9;16579:3;16575:19;16569:26;16560:35;;16532:77;16635:67;16695:6;16688:5;16635:67;:::i;:::-;16629:4;16622:81;16491:222;15826:887;;15856:618;15908:4;15904:9;15896:6;15892:22;15942:37;15974:4;15942:37;:::i;:::-;16001:1;16015:208;16029:7;16026:1;16023:14;16015:208;;;16108:9;16103:3;16099:19;16093:26;16085:6;16078:42;16159:1;16151:6;16147:14;16137:24;;16206:2;16195:9;16191:18;16178:31;;16052:4;16049:1;16045:12;16040:17;;16015:208;;;16251:6;16242:7;16239:19;16236:179;;;16309:9;16304:3;16300:19;16294:26;16352:48;16394:4;16386:6;16382:17;16371:9;16352:48;:::i;:::-;16344:6;16337:64;16259:156;16236:179;16461:1;16457;16449:6;16445:14;16441:22;16435:4;16428:36;15863:611;;;15826:887;;15416:1303;;;15324:1395;;:::o;16725:98::-;16776:6;16810:5;16804:12;16794:22;;16725:98;;;:::o;16829:168::-;16912:11;16946:6;16941:3;16934:19;16986:4;16981:3;16977:14;16962:29;;16829:168;;;;:::o;17003:373::-;17089:3;17117:38;17149:5;17117:38;:::i;:::-;17171:70;17234:6;17229:3;17171:70;:::i;:::-;17164:77;;17250:65;17308:6;17303:3;17296:4;17289:5;17285:16;17250:65;:::i;:::-;17340:29;17362:6;17340:29;:::i;:::-;17335:3;17331:39;17324:46;;17093:283;17003:373;;;;:::o;17382:640::-;17577:4;17615:3;17604:9;17600:19;17592:27;;17629:71;17697:1;17686:9;17682:17;17673:6;17629:71;:::i;:::-;17710:72;17778:2;17767:9;17763:18;17754:6;17710:72;:::i;:::-;17792;17860:2;17849:9;17845:18;17836:6;17792:72;:::i;:::-;17911:9;17905:4;17901:20;17896:2;17885:9;17881:18;17874:48;17939:76;18010:4;18001:6;17939:76;:::i;:::-;17931:84;;17382:640;;;;;;;:::o;18028:141::-;18084:5;18115:6;18109:13;18100:22;;18131:32;18157:5;18131:32;:::i;:::-;18028:141;;;;:::o;18175:349::-;18244:6;18293:2;18281:9;18272:7;18268:23;18264:32;18261:119;;;18299:79;;:::i;:::-;18261:119;18419:1;18444:63;18499:7;18490:6;18479:9;18475:22;18444:63;:::i;:::-;18434:73;;18390:127;18175:349;;;;:::o;18530:148::-;18632:11;18669:3;18654:18;;18530:148;;;;:::o;18684:390::-;18790:3;18818:39;18851:5;18818:39;:::i;:::-;18873:89;18955:6;18950:3;18873:89;:::i;:::-;18866:96;;18971:65;19029:6;19024:3;19017:4;19010:5;19006:16;18971:65;:::i;:::-;19061:6;19056:3;19052:16;19045:23;;18794:280;18684:390;;;;:::o;19080:435::-;19260:3;19282:95;19373:3;19364:6;19282:95;:::i;:::-;19275:102;;19394:95;19485:3;19476:6;19394:95;:::i;:::-;19387:102;;19506:3;19499:10;;19080:435;;;;;:::o;19521:194::-;19561:4;19581:20;19599:1;19581:20;:::i;:::-;19576:25;;19615:20;19633:1;19615:20;:::i;:::-;19610:25;;19659:1;19656;19652:9;19644:17;;19683:1;19677:4;19674:11;19671:37;;;19688:18;;:::i;:::-;19671:37;19521:194;;;;:::o;19721:180::-;19769:77;19766:1;19759:88;19866:4;19863:1;19856:15;19890:4;19887:1;19880:15;19907:180;19955:77;19952:1;19945:88;20052:4;20049:1;20042:15;20076:4;20073:1;20066:15"
        },
        "gasEstimates": {
          "creation": {
            "codeDepositCost": "2303800",
            "executionCost": "infinite",
            "totalCost": "infinite"
          },
          "external": {
            "approve(address,uint256)": "infinite",
            "balanceOf(address)": "infinite",
            "burn(uint256)": "infinite",
            "getApproved(uint256)": "infinite",
            "isApprovedForAll(address,address)": "infinite",
            "mintWithSpecificTokenId(address,uint256)": "infinite",
            "name()": "infinite",
            "owner()": "2633",
            "ownerOf(uint256)": "infinite",
            "renounceOwnership()": "infinite",
            "safeMint(address)": "infinite",
            "safeTransferFrom(address,address,uint256)": "infinite",
            "safeTransferFrom(address,address,uint256,bytes)": "infinite",
            "setApprovalForAll(address,bool)": "infinite",
            "supportsInterface(bytes4)": "1024",
            "symbol()": "infinite",
            "tokenByIndex(uint256)": "infinite",
            "tokenOfOwnerByIndex(address,uint256)": "infinite",
            "tokenURI(uint256)": "infinite",
            "totalSupply()": "2557",
            "transferFrom(address,address,uint256)": "infinite",
            "transferOwnership(address)": "infinite"
          }
        },
        "methodIdentifiers": {
          "approve(address,uint256)": "095ea7b3",
          "balanceOf(address)": "70a08231",
          "burn(uint256)": "42966c68",
          "getApproved(uint256)": "081812fc",
          "isApprovedForAll(address,address)": "e985e9c5",
          "mintWithSpecificTokenId(address,uint256)": "30b2c596",
          "name()": "06fdde03",
          "owner()": "8da5cb5b",
          "ownerOf(uint256)": "6352211e",
          "renounceOwnership()": "715018a6",
          "safeMint(address)": "40d097c3",
          "safeTransferFrom(address,address,uint256)": "42842e0e",
          "safeTransferFrom(address,address,uint256,bytes)": "b88d4fde",
          "setApprovalForAll(address,bool)": "a22cb465",
          "supportsInterface(bytes4)": "01ffc9a7",
          "symbol()": "95d89b41",
          "tokenByIndex(uint256)": "4f6ccce7",
          "tokenOfOwnerByIndex(address,uint256)": "2f745c59",
          "tokenURI(uint256)": "c87b56dd",
          "totalSupply()": "18160ddd",
          "transferFrom(address,address,uint256)": "23b872dd",
          "transferOwnership(address)": "f2fde38b"
        }
      },
      "metadata": "{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"tokenName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"tokenSymbol\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ERC721EnumerableForbiddenBatchMint\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC721IncorrectOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721InsufficientApproval\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC721InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"ERC721InvalidOperator\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC721InvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC721InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC721InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721NonexistentToken\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"ERC721OutOfBoundsIndex\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_fromTokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_toTokenId\",\"type\":\"uint256\"}],\"name\":\"BatchMetadataUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"MetadataUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"mintWithSpecificTokenId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"safeMint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"ERC721EnumerableForbiddenBatchMint()\":[{\"details\":\"Batch mint is not allowed.\"}],\"ERC721IncorrectOwner(address,uint256,address)\":[{\"details\":\"Indicates an error related to the ownership over a particular token. Used in transfers.\",\"params\":{\"owner\":\"Address of the current owner of a token.\",\"sender\":\"Address whose tokens are being transferred.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC721InsufficientApproval(address,uint256)\":[{\"details\":\"Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC721InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC721InvalidOperator(address)\":[{\"details\":\"Indicates a failure with the `operator` to be approved. Used in approvals.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC721InvalidOwner(address)\":[{\"details\":\"Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in ERC-20. Used in balance queries.\",\"params\":{\"owner\":\"Address of the current owner of a token.\"}}],\"ERC721InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC721InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC721NonexistentToken(uint256)\":[{\"details\":\"Indicates a `tokenId` whose `owner` is the zero address.\",\"params\":{\"tokenId\":\"Identifier number of a token.\"}}],\"ERC721OutOfBoundsIndex(address,uint256)\":[{\"details\":\"An `owner`'s token query was out of bounds for `index`. NOTE: The owner being `address(0)` indicates a global out of bounds index.\"}],\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}]},\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"BatchMetadataUpdate(uint256,uint256)\":{\"details\":\"This event emits when the metadata of a range of tokens is changed. So that the third-party platforms such as NFT market could timely update the images and related attributes of the NFTs.\"},\"MetadataUpdate(uint256)\":{\"details\":\"This event emits when the metadata of a token is changed. So that the third-party platforms such as NFT market could timely update the images and related attributes of the NFT.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"burn(uint256)\":{\"details\":\"Burns `tokenId`. See {ERC721-_burn}. Requirements: - The caller must own `tokenId` or be an approved operator.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenByIndex(uint256)\":{\"details\":\"See {IERC721Enumerable-tokenByIndex}.\"},\"tokenOfOwnerByIndex(address,uint256)\":{\"details\":\"See {IERC721Enumerable-tokenOfOwnerByIndex}.\"},\"totalSupply()\":{\"details\":\"See {IERC721Enumerable-totalSupply}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/WrappedMyToken.sol\":\"WrappedMyToken\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../utils/introspection/IERC165.sol\\\";\\n\",\"keccak256\":\"0xde7e9fd9aee8d4f40772f96bb3b58836cbc6dfc0227014a061947f8821ea9724\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC4906.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (interfaces/IERC4906.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\nimport {IERC721} from \\\"./IERC721.sol\\\";\\n\\n/// @title ERC-721 Metadata Update Extension\\ninterface IERC4906 is IERC165, IERC721 {\\n    /// @dev This event emits when the metadata of a token is changed.\\n    /// So that the third-party platforms such as NFT market could\\n    /// timely update the images and related attributes of the NFT.\\n    event MetadataUpdate(uint256 _tokenId);\\n\\n    /// @dev This event emits when the metadata of a range of tokens is changed.\\n    /// So that the third-party platforms such as NFT market could\\n    /// timely update the images and related attributes of the NFTs.\\n    event BatchMetadataUpdate(uint256 _fromTokenId, uint256 _toTokenId);\\n}\\n\",\"keccak256\":\"0x1b8691e244f6e11d987459993671db0af33e6a29f7805eac6a9925cc6b601957\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"../token/ERC721/IERC721.sol\\\";\\n\",\"keccak256\":\"0xc4d7ebf63eb2f6bf3fee1b6c0ee775efa9f31b4843a5511d07eea147e212932d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC-20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC-721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in ERC-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC-1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x880da465c203cec76b10d72dbd87c80f387df4102274f23eea1f9c9b0918792b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"./IERC721.sol\\\";\\nimport {IERC721Metadata} from \\\"./extensions/IERC721Metadata.sol\\\";\\nimport {ERC721Utils} from \\\"./utils/ERC721Utils.sol\\\";\\nimport {Context} from \\\"../../utils/Context.sol\\\";\\nimport {Strings} from \\\"../../utils/Strings.sol\\\";\\nimport {IERC165, ERC165} from \\\"../../utils/introspection/ERC165.sol\\\";\\nimport {IERC721Errors} from \\\"../../interfaces/draft-IERC6093.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC-721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\nabstract contract ERC721 is Context, ERC165, IERC721, IERC721Metadata, IERC721Errors {\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    mapping(uint256 tokenId => address) private _owners;\\n\\n    mapping(address owner => uint256) private _balances;\\n\\n    mapping(uint256 tokenId => address) private _tokenApprovals;\\n\\n    mapping(address owner => mapping(address operator => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual returns (uint256) {\\n        if (owner == address(0)) {\\n            revert ERC721InvalidOwner(address(0));\\n        }\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual returns (address) {\\n        return _requireOwned(tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual returns (string memory) {\\n        _requireOwned(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string.concat(baseURI, tokenId.toString()) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual {\\n        _approve(to, tokenId, _msgSender());\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual returns (address) {\\n        _requireOwned(tokenId);\\n\\n        return _getApproved(tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) public virtual {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        // Setting an \\\"auth\\\" arguments enables the `_isAuthorized` check which verifies that the token exists\\n        // (from != 0). Therefore, it is not needed to verify that the return value is not 0 here.\\n        address previousOwner = _update(to, tokenId, _msgSender());\\n        if (previousOwner != from) {\\n            revert ERC721IncorrectOwner(from, tokenId, previousOwner);\\n        }\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual {\\n        transferFrom(from, to, tokenId);\\n        ERC721Utils.checkOnERC721Received(_msgSender(), from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     *\\n     * IMPORTANT: Any overrides to this function that add ownership of tokens not tracked by the\\n     * core ERC-721 logic MUST be matched with the use of {_increaseBalance} to keep balances\\n     * consistent with ownership. The invariant to preserve is that for any address `a` the value returned by\\n     * `balanceOf(a)` must be equal to the number of tokens such that `_ownerOf(tokenId)` is `a`.\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns the approved address for `tokenId`. Returns 0 if `tokenId` is not minted.\\n     */\\n    function _getApproved(uint256 tokenId) internal view virtual returns (address) {\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `owner`'s tokens, or `tokenId` in\\n     * particular (ignoring whether it is owned by `owner`).\\n     *\\n     * WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\\n     * assumption.\\n     */\\n    function _isAuthorized(address owner, address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        return\\n            spender != address(0) &&\\n            (owner == spender || isApprovedForAll(owner, spender) || _getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Checks if `spender` can operate on `tokenId`, assuming the provided `owner` is the actual owner.\\n     * Reverts if:\\n     * - `spender` does not have approval from `owner` for `tokenId`.\\n     * - `spender` does not have approval to manage all of `owner`'s assets.\\n     *\\n     * WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\\n     * assumption.\\n     */\\n    function _checkAuthorized(address owner, address spender, uint256 tokenId) internal view virtual {\\n        if (!_isAuthorized(owner, spender, tokenId)) {\\n            if (owner == address(0)) {\\n                revert ERC721NonexistentToken(tokenId);\\n            } else {\\n                revert ERC721InsufficientApproval(spender, tokenId);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Unsafe write access to the balances, used by extensions that \\\"mint\\\" tokens using an {ownerOf} override.\\n     *\\n     * NOTE: the value is limited to type(uint128).max. This protect against _balance overflow. It is unrealistic that\\n     * a uint256 would ever overflow from increments when these increments are bounded to uint128 values.\\n     *\\n     * WARNING: Increasing an account's balance using this function tends to be paired with an override of the\\n     * {_ownerOf} function to resolve the ownership of the corresponding tokens so that balances and ownership\\n     * remain consistent with one another.\\n     */\\n    function _increaseBalance(address account, uint128 value) internal virtual {\\n        unchecked {\\n            _balances[account] += value;\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from its current owner to `to`, or alternatively mints (or burns) if the current owner\\n     * (or `to`) is the zero address. Returns the owner of the `tokenId` before the update.\\n     *\\n     * The `auth` argument is optional. If the value passed is non 0, then this function will check that\\n     * `auth` is either the owner of the token, or approved to operate on the token (by the owner).\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * NOTE: If overriding this function in a way that tracks balances, see also {_increaseBalance}.\\n     */\\n    function _update(address to, uint256 tokenId, address auth) internal virtual returns (address) {\\n        address from = _ownerOf(tokenId);\\n\\n        // Perform (optional) operator check\\n        if (auth != address(0)) {\\n            _checkAuthorized(from, auth, tokenId);\\n        }\\n\\n        // Execute the update\\n        if (from != address(0)) {\\n            // Clear approval. No need to re-authorize or emit the Approval event\\n            _approve(address(0), tokenId, address(0), false);\\n\\n            unchecked {\\n                _balances[from] -= 1;\\n            }\\n        }\\n\\n        if (to != address(0)) {\\n            unchecked {\\n                _balances[to] += 1;\\n            }\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        return from;\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        address previousOwner = _update(to, tokenId, address(0));\\n        if (previousOwner != address(0)) {\\n            revert ERC721InvalidSender(address(0));\\n        }\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId`, transfers it to `to` and checks for `to` acceptance.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _mint(to, tokenId);\\n        ERC721Utils.checkOnERC721Received(_msgSender(), address(0), to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal {\\n        address previousOwner = _update(address(0), tokenId, address(0));\\n        if (previousOwner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(address from, address to, uint256 tokenId) internal {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        address previousOwner = _update(to, tokenId, address(0));\\n        if (previousOwner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        } else if (previousOwner != from) {\\n            revert ERC721IncorrectOwner(from, tokenId, previousOwner);\\n        }\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking that contract recipients\\n     * are aware of the ERC-721 standard to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is like {safeTransferFrom} in the sense that it invokes\\n     * {IERC721Receiver-onERC721Received} on the receiver, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - `to` cannot be the zero address.\\n     * - `from` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId) internal {\\n        _safeTransfer(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeTransfer-address-address-uint256-}[`_safeTransfer`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _transfer(from, to, tokenId);\\n        ERC721Utils.checkOnERC721Received(_msgSender(), from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * The `auth` argument is optional. If the value passed is non 0, then this function will check that `auth` is\\n     * either the owner of the token, or approved to operate on all tokens held by this owner.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\\n     */\\n    function _approve(address to, uint256 tokenId, address auth) internal {\\n        _approve(to, tokenId, auth, true);\\n    }\\n\\n    /**\\n     * @dev Variant of `_approve` with an optional flag to enable or disable the {Approval} event. The event is not\\n     * emitted in the context of transfers.\\n     */\\n    function _approve(address to, uint256 tokenId, address auth, bool emitEvent) internal virtual {\\n        // Avoid reading the owner unless necessary\\n        if (emitEvent || auth != address(0)) {\\n            address owner = _requireOwned(tokenId);\\n\\n            // We do not use _isAuthorized because single-token approvals should not be able to call approve\\n            if (auth != address(0) && owner != auth && !isApprovedForAll(owner, auth)) {\\n                revert ERC721InvalidApprover(auth);\\n            }\\n\\n            if (emitEvent) {\\n                emit Approval(owner, to, tokenId);\\n            }\\n        }\\n\\n        _tokenApprovals[tokenId] = to;\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Requirements:\\n     * - operator can't be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\\n        if (operator == address(0)) {\\n            revert ERC721InvalidOperator(operator);\\n        }\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` doesn't have a current owner (it hasn't been minted, or it has been burned).\\n     * Returns the owner.\\n     *\\n     * Overrides to ownership logic should be done to {_ownerOf}.\\n     */\\n    function _requireOwned(uint256 tokenId) internal view returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        if (owner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        }\\n        return owner;\\n    }\\n}\\n\",\"keccak256\":\"0x39ed367e54765186281efcfe83e47cf0ad62cc879f10e191360712507125f29a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC-721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC-721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\\n     *   {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC-721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5dc63d1c6a12fe1b17793e1745877b2fcbe1964c3edfd0a482fac21ca8f18261\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @title ERC-721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC-721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be\\n     * reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xb5afb8e8eebc4d1c6404df2f5e1e6d2c3d24fd01e5dfc855314951ecfaae462d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC721/extensions/ERC721Burnable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ERC721} from \\\"../ERC721.sol\\\";\\nimport {Context} from \\\"../../../utils/Context.sol\\\";\\n\\n/**\\n * @title ERC-721 Burnable Token\\n * @dev ERC-721 Token that can be burned (destroyed).\\n */\\nabstract contract ERC721Burnable is Context, ERC721 {\\n    /**\\n     * @dev Burns `tokenId`. See {ERC721-_burn}.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own `tokenId` or be an approved operator.\\n     */\\n    function burn(uint256 tokenId) public virtual {\\n        // Setting an \\\"auth\\\" arguments enables the `_isAuthorized` check which verifies that the token exists\\n        // (from != 0). Therefore, it is not needed to verify that the return value is not 0 here.\\n        _update(address(0), tokenId, _msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0xdee1ff07172e443c6600581fc4f11e7830a6d33e4e551752935b835d52a09404\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC721/extensions/ERC721Enumerable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ERC721} from \\\"../ERC721.sol\\\";\\nimport {IERC721Enumerable} from \\\"./IERC721Enumerable.sol\\\";\\nimport {IERC165} from \\\"../../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the ERC that adds enumerability\\n * of all the token ids in the contract as well as all token ids owned by each account.\\n *\\n * CAUTION: {ERC721} extensions that implement custom `balanceOf` logic, such as {ERC721Consecutive},\\n * interfere with enumerability and should not be used together with {ERC721Enumerable}.\\n */\\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\\n    mapping(address owner => mapping(uint256 index => uint256)) private _ownedTokens;\\n    mapping(uint256 tokenId => uint256) private _ownedTokensIndex;\\n\\n    uint256[] private _allTokens;\\n    mapping(uint256 tokenId => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev An `owner`'s token query was out of bounds for `index`.\\n     *\\n     * NOTE: The owner being `address(0)` indicates a global out of bounds index.\\n     */\\n    error ERC721OutOfBoundsIndex(address owner, uint256 index);\\n\\n    /**\\n     * @dev Batch mint is not allowed.\\n     */\\n    error ERC721EnumerableForbiddenBatchMint();\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual returns (uint256) {\\n        if (index >= balanceOf(owner)) {\\n            revert ERC721OutOfBoundsIndex(owner, index);\\n        }\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual returns (uint256) {\\n        if (index >= totalSupply()) {\\n            revert ERC721OutOfBoundsIndex(address(0), index);\\n        }\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev See {ERC721-_update}.\\n     */\\n    function _update(address to, uint256 tokenId, address auth) internal virtual override returns (address) {\\n        address previousOwner = super._update(to, tokenId, auth);\\n\\n        if (previousOwner == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (previousOwner != to) {\\n            _removeTokenFromOwnerEnumeration(previousOwner, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (previousOwner != to) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n\\n        return previousOwner;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = balanceOf(to) - 1;\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = balanceOf(from);\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        mapping(uint256 index => uint256) storage _ownedTokensByOwner = _ownedTokens[from];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokensByOwner[lastTokenIndex];\\n\\n            _ownedTokensByOwner[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokensByOwner[lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n\\n    /**\\n     * See {ERC721-_increaseBalance}. We need that to account tokens that were minted in batch\\n     */\\n    function _increaseBalance(address account, uint128 amount) internal virtual override {\\n        if (amount > 0) {\\n            revert ERC721EnumerableForbiddenBatchMint();\\n        }\\n        super._increaseBalance(account, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x5191f783af281c75b7de0f1e3e36cdc6ac5cb2358d929584c4953fd02fa2b5eb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC721/extensions/ERC721URIStorage.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ERC721} from \\\"../ERC721.sol\\\";\\nimport {Strings} from \\\"../../../utils/Strings.sol\\\";\\nimport {IERC4906} from \\\"../../../interfaces/IERC4906.sol\\\";\\nimport {IERC165} from \\\"../../../interfaces/IERC165.sol\\\";\\n\\n/**\\n * @dev ERC-721 token with storage based token URI management.\\n */\\nabstract contract ERC721URIStorage is IERC4906, ERC721 {\\n    using Strings for uint256;\\n\\n    // Interface ID as defined in ERC-4906. This does not correspond to a traditional interface ID as ERC-4906 only\\n    // defines events and does not include any external function.\\n    bytes4 private constant ERC4906_INTERFACE_ID = bytes4(0x49064906);\\n\\n    // Optional mapping for token URIs\\n    mapping(uint256 tokenId => string) private _tokenURIs;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC721, IERC165) returns (bool) {\\n        return interfaceId == ERC4906_INTERFACE_ID || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireOwned(tokenId);\\n\\n        string memory _tokenURI = _tokenURIs[tokenId];\\n        string memory base = _baseURI();\\n\\n        // If there is no base URI, return the token URI.\\n        if (bytes(base).length == 0) {\\n            return _tokenURI;\\n        }\\n        // If both are set, concatenate the baseURI and tokenURI (via string.concat).\\n        if (bytes(_tokenURI).length > 0) {\\n            return string.concat(base, _tokenURI);\\n        }\\n\\n        return super.tokenURI(tokenId);\\n    }\\n\\n    /**\\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\\n     *\\n     * Emits {MetadataUpdate}.\\n     */\\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\\n        _tokenURIs[tokenId] = _tokenURI;\\n        emit MetadataUpdate(tokenId);\\n    }\\n}\\n\",\"keccak256\":\"0xe52813067c6d5838eeb34e1da8beb2514371a7d778266013b04ca3be1dda7100\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x3d6954a93ac198a2ffa384fa58ccf18e7e235263e051a394328002eff4e073de\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x37d1aaaa5a2908a09e9dcf56a26ddf762ecf295afb5964695937344fc6802ce1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/utils/ERC721Utils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC721/utils/ERC721Utils.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721Receiver} from \\\"../IERC721Receiver.sol\\\";\\nimport {IERC721Errors} from \\\"../../../interfaces/draft-IERC6093.sol\\\";\\n\\n/**\\n * @dev Library that provide common ERC-721 utility functions.\\n *\\n * See https://eips.ethereum.org/EIPS/eip-721[ERC-721].\\n *\\n * _Available since v5.1._\\n */\\nlibrary ERC721Utils {\\n    /**\\n     * @dev Performs an acceptance check for the provided `operator` by calling {IERC721-onERC721Received}\\n     * on the `to` address. The `operator` is generally the address that initiated the token transfer (i.e. `msg.sender`).\\n     *\\n     * The acceptance call is not executed and treated as a no-op if the target address doesn't contain code (i.e. an EOA).\\n     * Otherwise, the recipient must implement {IERC721Receiver-onERC721Received} and return the acceptance magic value to accept\\n     * the transfer.\\n     */\\n    function checkOnERC721Received(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal {\\n        if (to.code.length > 0) {\\n            try IERC721Receiver(to).onERC721Received(operator, from, tokenId, data) returns (bytes4 retval) {\\n                if (retval != IERC721Receiver.onERC721Received.selector) {\\n                    // Token rejected\\n                    revert IERC721Errors.ERC721InvalidReceiver(to);\\n                }\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    // non-IERC721Receiver implementer\\n                    revert IERC721Errors.ERC721InvalidReceiver(to);\\n                } else {\\n                    assembly (\\\"memory-safe\\\") {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x40399695922383778f9f540a620bec475a2f8e0f08d41f0005682842e28a9855\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Panic.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Panic.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Helper library for emitting standardized panic codes.\\n *\\n * ```solidity\\n * contract Example {\\n *      using Panic for uint256;\\n *\\n *      // Use any of the declared internal constants\\n *      function foo() { Panic.GENERIC.panic(); }\\n *\\n *      // Alternatively\\n *      function foo() { Panic.panic(Panic.GENERIC); }\\n * }\\n * ```\\n *\\n * Follows the list from https://github.com/ethereum/solidity/blob/v0.8.24/libsolutil/ErrorCodes.h[libsolutil].\\n *\\n * _Available since v5.1._\\n */\\n// slither-disable-next-line unused-state\\nlibrary Panic {\\n    /// @dev generic / unspecified error\\n    uint256 internal constant GENERIC = 0x00;\\n    /// @dev used by the assert() builtin\\n    uint256 internal constant ASSERT = 0x01;\\n    /// @dev arithmetic underflow or overflow\\n    uint256 internal constant UNDER_OVERFLOW = 0x11;\\n    /// @dev division or modulo by zero\\n    uint256 internal constant DIVISION_BY_ZERO = 0x12;\\n    /// @dev enum conversion error\\n    uint256 internal constant ENUM_CONVERSION_ERROR = 0x21;\\n    /// @dev invalid encoding in storage\\n    uint256 internal constant STORAGE_ENCODING_ERROR = 0x22;\\n    /// @dev empty array pop\\n    uint256 internal constant EMPTY_ARRAY_POP = 0x31;\\n    /// @dev array out of bounds access\\n    uint256 internal constant ARRAY_OUT_OF_BOUNDS = 0x32;\\n    /// @dev resource error (too large allocation or too large array)\\n    uint256 internal constant RESOURCE_ERROR = 0x41;\\n    /// @dev calling invalid internal function\\n    uint256 internal constant INVALID_INTERNAL_FUNCTION = 0x51;\\n\\n    /// @dev Reverts with a panic code. Recommended to use with\\n    /// the internal constants with predefined codes.\\n    function panic(uint256 code) internal pure {\\n        assembly (\\\"memory-safe\\\") {\\n            mstore(0x00, 0x4e487b71)\\n            mstore(0x20, code)\\n            revert(0x1c, 0x24)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf7fe324703a64fc51702311dc51562d5cb1497734f074e4f483bfb6717572d7a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.2.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"./math/Math.sol\\\";\\nimport {SafeCast} from \\\"./math/SafeCast.sol\\\";\\nimport {SignedMath} from \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    using SafeCast for *;\\n\\n    bytes16 private constant HEX_DIGITS = \\\"0123456789abcdef\\\";\\n    uint8 private constant ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev The `value` string doesn't fit in the specified `length`.\\n     */\\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\\n\\n    /**\\n     * @dev The string being parsed contains characters that are not in scope of the given base.\\n     */\\n    error StringsInvalidChar();\\n\\n    /**\\n     * @dev The string being parsed is not a properly formatted address.\\n     */\\n    error StringsInvalidAddressFormat();\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            assembly (\\\"memory-safe\\\") {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                assembly (\\\"memory-safe\\\") {\\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toStringSigned(int256 value) internal pure returns (string memory) {\\n        return string.concat(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value)));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        uint256 localValue = value;\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\\n            localValue >>= 4;\\n        }\\n        if (localValue != 0) {\\n            revert StringsInsufficientHexLength(value, length);\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\\n     * representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its checksummed ASCII `string` hexadecimal\\n     * representation, according to EIP-55.\\n     */\\n    function toChecksumHexString(address addr) internal pure returns (string memory) {\\n        bytes memory buffer = bytes(toHexString(addr));\\n\\n        // hash the hex part of buffer (skip length + 2 bytes, length 40)\\n        uint256 hashValue;\\n        assembly (\\\"memory-safe\\\") {\\n            hashValue := shr(96, keccak256(add(buffer, 0x22), 40))\\n        }\\n\\n        for (uint256 i = 41; i > 1; --i) {\\n            // possible values for buffer[i] are 48 (0) to 57 (9) and 97 (a) to 102 (f)\\n            if (hashValue & 0xf > 7 && uint8(buffer[i]) > 96) {\\n                // case shift by xoring with 0x20\\n                buffer[i] ^= 0x20;\\n            }\\n            hashValue >>= 4;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n\\n    /**\\n     * @dev Parse a decimal string and returns the value as a `uint256`.\\n     *\\n     * Requirements:\\n     * - The string must be formatted as `[0-9]*`\\n     * - The result must fit into an `uint256` type\\n     */\\n    function parseUint(string memory input) internal pure returns (uint256) {\\n        return parseUint(input, 0, bytes(input).length);\\n    }\\n\\n    /**\\n     * @dev Variant of {parseUint} that parses a substring of `input` located between position `begin` (included) and\\n     * `end` (excluded).\\n     *\\n     * Requirements:\\n     * - The substring must be formatted as `[0-9]*`\\n     * - The result must fit into an `uint256` type\\n     */\\n    function parseUint(string memory input, uint256 begin, uint256 end) internal pure returns (uint256) {\\n        (bool success, uint256 value) = tryParseUint(input, begin, end);\\n        if (!success) revert StringsInvalidChar();\\n        return value;\\n    }\\n\\n    /**\\n     * @dev Variant of {parseUint-string} that returns false if the parsing fails because of an invalid character.\\n     *\\n     * NOTE: This function will revert if the result does not fit in a `uint256`.\\n     */\\n    function tryParseUint(string memory input) internal pure returns (bool success, uint256 value) {\\n        return _tryParseUintUncheckedBounds(input, 0, bytes(input).length);\\n    }\\n\\n    /**\\n     * @dev Variant of {parseUint-string-uint256-uint256} that returns false if the parsing fails because of an invalid\\n     * character.\\n     *\\n     * NOTE: This function will revert if the result does not fit in a `uint256`.\\n     */\\n    function tryParseUint(\\n        string memory input,\\n        uint256 begin,\\n        uint256 end\\n    ) internal pure returns (bool success, uint256 value) {\\n        if (end > bytes(input).length || begin > end) return (false, 0);\\n        return _tryParseUintUncheckedBounds(input, begin, end);\\n    }\\n\\n    /**\\n     * @dev Implementation of {tryParseUint} that does not check bounds. Caller should make sure that\\n     * `begin <= end <= input.length`. Other inputs would result in undefined behavior.\\n     */\\n    function _tryParseUintUncheckedBounds(\\n        string memory input,\\n        uint256 begin,\\n        uint256 end\\n    ) private pure returns (bool success, uint256 value) {\\n        bytes memory buffer = bytes(input);\\n\\n        uint256 result = 0;\\n        for (uint256 i = begin; i < end; ++i) {\\n            uint8 chr = _tryParseChr(bytes1(_unsafeReadBytesOffset(buffer, i)));\\n            if (chr > 9) return (false, 0);\\n            result *= 10;\\n            result += chr;\\n        }\\n        return (true, result);\\n    }\\n\\n    /**\\n     * @dev Parse a decimal string and returns the value as a `int256`.\\n     *\\n     * Requirements:\\n     * - The string must be formatted as `[-+]?[0-9]*`\\n     * - The result must fit in an `int256` type.\\n     */\\n    function parseInt(string memory input) internal pure returns (int256) {\\n        return parseInt(input, 0, bytes(input).length);\\n    }\\n\\n    /**\\n     * @dev Variant of {parseInt-string} that parses a substring of `input` located between position `begin` (included) and\\n     * `end` (excluded).\\n     *\\n     * Requirements:\\n     * - The substring must be formatted as `[-+]?[0-9]*`\\n     * - The result must fit in an `int256` type.\\n     */\\n    function parseInt(string memory input, uint256 begin, uint256 end) internal pure returns (int256) {\\n        (bool success, int256 value) = tryParseInt(input, begin, end);\\n        if (!success) revert StringsInvalidChar();\\n        return value;\\n    }\\n\\n    /**\\n     * @dev Variant of {parseInt-string} that returns false if the parsing fails because of an invalid character or if\\n     * the result does not fit in a `int256`.\\n     *\\n     * NOTE: This function will revert if the absolute value of the result does not fit in a `uint256`.\\n     */\\n    function tryParseInt(string memory input) internal pure returns (bool success, int256 value) {\\n        return _tryParseIntUncheckedBounds(input, 0, bytes(input).length);\\n    }\\n\\n    uint256 private constant ABS_MIN_INT256 = 2 ** 255;\\n\\n    /**\\n     * @dev Variant of {parseInt-string-uint256-uint256} that returns false if the parsing fails because of an invalid\\n     * character or if the result does not fit in a `int256`.\\n     *\\n     * NOTE: This function will revert if the absolute value of the result does not fit in a `uint256`.\\n     */\\n    function tryParseInt(\\n        string memory input,\\n        uint256 begin,\\n        uint256 end\\n    ) internal pure returns (bool success, int256 value) {\\n        if (end > bytes(input).length || begin > end) return (false, 0);\\n        return _tryParseIntUncheckedBounds(input, begin, end);\\n    }\\n\\n    /**\\n     * @dev Implementation of {tryParseInt} that does not check bounds. Caller should make sure that\\n     * `begin <= end <= input.length`. Other inputs would result in undefined behavior.\\n     */\\n    function _tryParseIntUncheckedBounds(\\n        string memory input,\\n        uint256 begin,\\n        uint256 end\\n    ) private pure returns (bool success, int256 value) {\\n        bytes memory buffer = bytes(input);\\n\\n        // Check presence of a negative sign.\\n        bytes1 sign = begin == end ? bytes1(0) : bytes1(_unsafeReadBytesOffset(buffer, begin)); // don't do out-of-bound (possibly unsafe) read if sub-string is empty\\n        bool positiveSign = sign == bytes1(\\\"+\\\");\\n        bool negativeSign = sign == bytes1(\\\"-\\\");\\n        uint256 offset = (positiveSign || negativeSign).toUint();\\n\\n        (bool absSuccess, uint256 absValue) = tryParseUint(input, begin + offset, end);\\n\\n        if (absSuccess && absValue < ABS_MIN_INT256) {\\n            return (true, negativeSign ? -int256(absValue) : int256(absValue));\\n        } else if (absSuccess && negativeSign && absValue == ABS_MIN_INT256) {\\n            return (true, type(int256).min);\\n        } else return (false, 0);\\n    }\\n\\n    /**\\n     * @dev Parse a hexadecimal string (with or without \\\"0x\\\" prefix), and returns the value as a `uint256`.\\n     *\\n     * Requirements:\\n     * - The string must be formatted as `(0x)?[0-9a-fA-F]*`\\n     * - The result must fit in an `uint256` type.\\n     */\\n    function parseHexUint(string memory input) internal pure returns (uint256) {\\n        return parseHexUint(input, 0, bytes(input).length);\\n    }\\n\\n    /**\\n     * @dev Variant of {parseHexUint} that parses a substring of `input` located between position `begin` (included) and\\n     * `end` (excluded).\\n     *\\n     * Requirements:\\n     * - The substring must be formatted as `(0x)?[0-9a-fA-F]*`\\n     * - The result must fit in an `uint256` type.\\n     */\\n    function parseHexUint(string memory input, uint256 begin, uint256 end) internal pure returns (uint256) {\\n        (bool success, uint256 value) = tryParseHexUint(input, begin, end);\\n        if (!success) revert StringsInvalidChar();\\n        return value;\\n    }\\n\\n    /**\\n     * @dev Variant of {parseHexUint-string} that returns false if the parsing fails because of an invalid character.\\n     *\\n     * NOTE: This function will revert if the result does not fit in a `uint256`.\\n     */\\n    function tryParseHexUint(string memory input) internal pure returns (bool success, uint256 value) {\\n        return _tryParseHexUintUncheckedBounds(input, 0, bytes(input).length);\\n    }\\n\\n    /**\\n     * @dev Variant of {parseHexUint-string-uint256-uint256} that returns false if the parsing fails because of an\\n     * invalid character.\\n     *\\n     * NOTE: This function will revert if the result does not fit in a `uint256`.\\n     */\\n    function tryParseHexUint(\\n        string memory input,\\n        uint256 begin,\\n        uint256 end\\n    ) internal pure returns (bool success, uint256 value) {\\n        if (end > bytes(input).length || begin > end) return (false, 0);\\n        return _tryParseHexUintUncheckedBounds(input, begin, end);\\n    }\\n\\n    /**\\n     * @dev Implementation of {tryParseHexUint} that does not check bounds. Caller should make sure that\\n     * `begin <= end <= input.length`. Other inputs would result in undefined behavior.\\n     */\\n    function _tryParseHexUintUncheckedBounds(\\n        string memory input,\\n        uint256 begin,\\n        uint256 end\\n    ) private pure returns (bool success, uint256 value) {\\n        bytes memory buffer = bytes(input);\\n\\n        // skip 0x prefix if present\\n        bool hasPrefix = (end > begin + 1) && bytes2(_unsafeReadBytesOffset(buffer, begin)) == bytes2(\\\"0x\\\"); // don't do out-of-bound (possibly unsafe) read if sub-string is empty\\n        uint256 offset = hasPrefix.toUint() * 2;\\n\\n        uint256 result = 0;\\n        for (uint256 i = begin + offset; i < end; ++i) {\\n            uint8 chr = _tryParseChr(bytes1(_unsafeReadBytesOffset(buffer, i)));\\n            if (chr > 15) return (false, 0);\\n            result *= 16;\\n            unchecked {\\n                // Multiplying by 16 is equivalent to a shift of 4 bits (with additional overflow check).\\n                // This guaratees that adding a value < 16 will not cause an overflow, hence the unchecked.\\n                result += chr;\\n            }\\n        }\\n        return (true, result);\\n    }\\n\\n    /**\\n     * @dev Parse a hexadecimal string (with or without \\\"0x\\\" prefix), and returns the value as an `address`.\\n     *\\n     * Requirements:\\n     * - The string must be formatted as `(0x)?[0-9a-fA-F]{40}`\\n     */\\n    function parseAddress(string memory input) internal pure returns (address) {\\n        return parseAddress(input, 0, bytes(input).length);\\n    }\\n\\n    /**\\n     * @dev Variant of {parseAddress} that parses a substring of `input` located between position `begin` (included) and\\n     * `end` (excluded).\\n     *\\n     * Requirements:\\n     * - The substring must be formatted as `(0x)?[0-9a-fA-F]{40}`\\n     */\\n    function parseAddress(string memory input, uint256 begin, uint256 end) internal pure returns (address) {\\n        (bool success, address value) = tryParseAddress(input, begin, end);\\n        if (!success) revert StringsInvalidAddressFormat();\\n        return value;\\n    }\\n\\n    /**\\n     * @dev Variant of {parseAddress-string} that returns false if the parsing fails because the input is not a properly\\n     * formatted address. See {parseAddress} requirements.\\n     */\\n    function tryParseAddress(string memory input) internal pure returns (bool success, address value) {\\n        return tryParseAddress(input, 0, bytes(input).length);\\n    }\\n\\n    /**\\n     * @dev Variant of {parseAddress-string-uint256-uint256} that returns false if the parsing fails because input is not a properly\\n     * formatted address. See {parseAddress} requirements.\\n     */\\n    function tryParseAddress(\\n        string memory input,\\n        uint256 begin,\\n        uint256 end\\n    ) internal pure returns (bool success, address value) {\\n        if (end > bytes(input).length || begin > end) return (false, address(0));\\n\\n        bool hasPrefix = (end > begin + 1) && bytes2(_unsafeReadBytesOffset(bytes(input), begin)) == bytes2(\\\"0x\\\"); // don't do out-of-bound (possibly unsafe) read if sub-string is empty\\n        uint256 expectedLength = 40 + hasPrefix.toUint() * 2;\\n\\n        // check that input is the correct length\\n        if (end - begin == expectedLength) {\\n            // length guarantees that this does not overflow, and value is at most type(uint160).max\\n            (bool s, uint256 v) = _tryParseHexUintUncheckedBounds(input, begin, end);\\n            return (s, address(uint160(v)));\\n        } else {\\n            return (false, address(0));\\n        }\\n    }\\n\\n    function _tryParseChr(bytes1 chr) private pure returns (uint8) {\\n        uint8 value = uint8(chr);\\n\\n        // Try to parse `chr`:\\n        // - Case 1: [0-9]\\n        // - Case 2: [a-f]\\n        // - Case 3: [A-F]\\n        // - otherwise not supported\\n        unchecked {\\n            if (value > 47 && value < 58) value -= 48;\\n            else if (value > 96 && value < 103) value -= 87;\\n            else if (value > 64 && value < 71) value -= 55;\\n            else return type(uint8).max;\\n        }\\n\\n        return value;\\n    }\\n\\n    /**\\n     * @dev Reads a bytes32 from a bytes array without bounds checking.\\n     *\\n     * NOTE: making this function internal would mean it could be used with memory unsafe offset, and marking the\\n     * assembly block as such would prevent some optimizations.\\n     */\\n    function _unsafeReadBytesOffset(bytes memory buffer, uint256 offset) private pure returns (bytes32 value) {\\n        // This is not memory safe in the general case, but all calls to this private function are within bounds.\\n        assembly (\\\"memory-safe\\\") {\\n            value := mload(add(buffer, add(0x20, offset)))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x44f87e91783e88415bde66f1a63f6c7f0076f2d511548820407d5c95643ac56c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC-165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xddce8e17e3d3f9ed818b4f4c4478a8262aab8b11ed322f1bf5ed705bb4bd97fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x79796192ec90263f21b464d5bc90b777a525971d3de8232be80d9c4f9fb353b8\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Panic} from \\\"../Panic.sol\\\";\\nimport {SafeCast} from \\\"./SafeCast.sol\\\";\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an success flag (no overflow).\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an success flag (no overflow).\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an success flag (no overflow).\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a success flag (no division by zero).\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a success flag (no division by zero).\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Branchless ternary evaluation for `a ? b : c`. Gas costs are constant.\\n     *\\n     * IMPORTANT: This function may reduce bytecode size and consume less gas when used standalone.\\n     * However, the compiler may optimize Solidity ternary operations (i.e. `a ? b : c`) to only compute\\n     * one branch when needed, making this function more expensive.\\n     */\\n    function ternary(bool condition, uint256 a, uint256 b) internal pure returns (uint256) {\\n        unchecked {\\n            // branchless ternary works because:\\n            // b ^ (a ^ b) == a\\n            // b ^ 0 == b\\n            return b ^ ((a ^ b) * SafeCast.toUint(condition));\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return ternary(a > b, a, b);\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return ternary(a < b, a, b);\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            Panic.panic(Panic.DIVISION_BY_ZERO);\\n        }\\n\\n        // The following calculation ensures accurate ceiling division without overflow.\\n        // Since a is non-zero, (a - 1) / b will not overflow.\\n        // The largest possible result occurs when (a - 1) / b is type(uint256).max,\\n        // but the largest value we can obtain is type(uint256).max - 1, which happens\\n        // when a = type(uint256).max and b = 1.\\n        unchecked {\\n            return SafeCast.toUint(a > 0) * ((a - 1) / b + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     *\\n     * Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2\\u00b2\\u2075\\u2076 and mod 2\\u00b2\\u2075\\u2076 - 1, then use\\n            // the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2\\u00b2\\u2075\\u2076 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2\\u00b2\\u2075\\u2076. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                Panic.panic(ternary(denominator == 0, Panic.DIVISION_BY_ZERO, Panic.UNDER_OVERFLOW));\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2\\u00b2\\u2075\\u2076 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2\\u00b2\\u2075\\u2076. Now that denominator is an odd number, it has an inverse modulo 2\\u00b2\\u2075\\u2076 such\\n            // that denominator * inv \\u2261 1 mod 2\\u00b2\\u2075\\u2076. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv \\u2261 1 mod 2\\u2074.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u2078\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u00b9\\u2076\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u00b3\\u00b2\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u2076\\u2074\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u00b9\\u00b2\\u2078\\n            inverse *= 2 - denominator * inverse; // inverse mod 2\\u00b2\\u2075\\u2076\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2\\u00b2\\u2075\\u2076. Since the preconditions guarantee that the outcome is\\n            // less than 2\\u00b2\\u2075\\u2076, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        return mulDiv(x, y, denominator) + SafeCast.toUint(unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0);\\n    }\\n\\n    /**\\n     * @dev Calculate the modular multiplicative inverse of a number in Z/nZ.\\n     *\\n     * If n is a prime, then Z/nZ is a field. In that case all elements are inversible, except 0.\\n     * If n is not a prime, then Z/nZ is not a field, and some elements might not be inversible.\\n     *\\n     * If the input value is not inversible, 0 is returned.\\n     *\\n     * NOTE: If you know for sure that n is (big) a prime, it may be cheaper to use Fermat's little theorem and get the\\n     * inverse using `Math.modExp(a, n - 2, n)`. See {invModPrime}.\\n     */\\n    function invMod(uint256 a, uint256 n) internal pure returns (uint256) {\\n        unchecked {\\n            if (n == 0) return 0;\\n\\n            // The inverse modulo is calculated using the Extended Euclidean Algorithm (iterative version)\\n            // Used to compute integers x and y such that: ax + ny = gcd(a, n).\\n            // When the gcd is 1, then the inverse of a modulo n exists and it's x.\\n            // ax + ny = 1\\n            // ax = 1 + (-y)n\\n            // ax \\u2261 1 (mod n) # x is the inverse of a modulo n\\n\\n            // If the remainder is 0 the gcd is n right away.\\n            uint256 remainder = a % n;\\n            uint256 gcd = n;\\n\\n            // Therefore the initial coefficients are:\\n            // ax + ny = gcd(a, n) = n\\n            // 0a + 1n = n\\n            int256 x = 0;\\n            int256 y = 1;\\n\\n            while (remainder != 0) {\\n                uint256 quotient = gcd / remainder;\\n\\n                (gcd, remainder) = (\\n                    // The old remainder is the next gcd to try.\\n                    remainder,\\n                    // Compute the next remainder.\\n                    // Can't overflow given that (a % gcd) * (gcd // (a % gcd)) <= gcd\\n                    // where gcd is at most n (capped to type(uint256).max)\\n                    gcd - remainder * quotient\\n                );\\n\\n                (x, y) = (\\n                    // Increment the coefficient of a.\\n                    y,\\n                    // Decrement the coefficient of n.\\n                    // Can overflow, but the result is casted to uint256 so that the\\n                    // next value of y is \\\"wrapped around\\\" to a value between 0 and n - 1.\\n                    x - y * int256(quotient)\\n                );\\n            }\\n\\n            if (gcd != 1) return 0; // No inverse exists.\\n            return ternary(x < 0, n - uint256(-x), uint256(x)); // Wrap the result if it's negative.\\n        }\\n    }\\n\\n    /**\\n     * @dev Variant of {invMod}. More efficient, but only works if `p` is known to be a prime greater than `2`.\\n     *\\n     * From https://en.wikipedia.org/wiki/Fermat%27s_little_theorem[Fermat's little theorem], we know that if p is\\n     * prime, then `a**(p-1) \\u2261 1 mod p`. As a consequence, we have `a * a**(p-2) \\u2261 1 mod p`, which means that\\n     * `a**(p-2)` is the modular multiplicative inverse of a in Fp.\\n     *\\n     * NOTE: this function does NOT check that `p` is a prime greater than `2`.\\n     */\\n    function invModPrime(uint256 a, uint256 p) internal view returns (uint256) {\\n        unchecked {\\n            return Math.modExp(a, p - 2, p);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the modular exponentiation of the specified base, exponent and modulus (b ** e % m)\\n     *\\n     * Requirements:\\n     * - modulus can't be zero\\n     * - underlying staticcall to precompile must succeed\\n     *\\n     * IMPORTANT: The result is only valid if the underlying call succeeds. When using this function, make\\n     * sure the chain you're using it on supports the precompiled contract for modular exponentiation\\n     * at address 0x05 as specified in https://eips.ethereum.org/EIPS/eip-198[EIP-198]. Otherwise,\\n     * the underlying function will succeed given the lack of a revert, but the result may be incorrectly\\n     * interpreted as 0.\\n     */\\n    function modExp(uint256 b, uint256 e, uint256 m) internal view returns (uint256) {\\n        (bool success, uint256 result) = tryModExp(b, e, m);\\n        if (!success) {\\n            Panic.panic(Panic.DIVISION_BY_ZERO);\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the modular exponentiation of the specified base, exponent and modulus (b ** e % m).\\n     * It includes a success flag indicating if the operation succeeded. Operation will be marked as failed if trying\\n     * to operate modulo 0 or if the underlying precompile reverted.\\n     *\\n     * IMPORTANT: The result is only valid if the success flag is true. When using this function, make sure the chain\\n     * you're using it on supports the precompiled contract for modular exponentiation at address 0x05 as specified in\\n     * https://eips.ethereum.org/EIPS/eip-198[EIP-198]. Otherwise, the underlying function will succeed given the lack\\n     * of a revert, but the result may be incorrectly interpreted as 0.\\n     */\\n    function tryModExp(uint256 b, uint256 e, uint256 m) internal view returns (bool success, uint256 result) {\\n        if (m == 0) return (false, 0);\\n        assembly (\\\"memory-safe\\\") {\\n            let ptr := mload(0x40)\\n            // | Offset    | Content    | Content (Hex)                                                      |\\n            // |-----------|------------|--------------------------------------------------------------------|\\n            // | 0x00:0x1f | size of b  | 0x0000000000000000000000000000000000000000000000000000000000000020 |\\n            // | 0x20:0x3f | size of e  | 0x0000000000000000000000000000000000000000000000000000000000000020 |\\n            // | 0x40:0x5f | size of m  | 0x0000000000000000000000000000000000000000000000000000000000000020 |\\n            // | 0x60:0x7f | value of b | 0x<.............................................................b> |\\n            // | 0x80:0x9f | value of e | 0x<.............................................................e> |\\n            // | 0xa0:0xbf | value of m | 0x<.............................................................m> |\\n            mstore(ptr, 0x20)\\n            mstore(add(ptr, 0x20), 0x20)\\n            mstore(add(ptr, 0x40), 0x20)\\n            mstore(add(ptr, 0x60), b)\\n            mstore(add(ptr, 0x80), e)\\n            mstore(add(ptr, 0xa0), m)\\n\\n            // Given the result < m, it's guaranteed to fit in 32 bytes,\\n            // so we can use the memory scratch space located at offset 0.\\n            success := staticcall(gas(), 0x05, ptr, 0xc0, 0x00, 0x20)\\n            result := mload(0x00)\\n        }\\n    }\\n\\n    /**\\n     * @dev Variant of {modExp} that supports inputs of arbitrary length.\\n     */\\n    function modExp(bytes memory b, bytes memory e, bytes memory m) internal view returns (bytes memory) {\\n        (bool success, bytes memory result) = tryModExp(b, e, m);\\n        if (!success) {\\n            Panic.panic(Panic.DIVISION_BY_ZERO);\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Variant of {tryModExp} that supports inputs of arbitrary length.\\n     */\\n    function tryModExp(\\n        bytes memory b,\\n        bytes memory e,\\n        bytes memory m\\n    ) internal view returns (bool success, bytes memory result) {\\n        if (_zeroBytes(m)) return (false, new bytes(0));\\n\\n        uint256 mLen = m.length;\\n\\n        // Encode call args in result and move the free memory pointer\\n        result = abi.encodePacked(b.length, e.length, mLen, b, e, m);\\n\\n        assembly (\\\"memory-safe\\\") {\\n            let dataPtr := add(result, 0x20)\\n            // Write result on top of args to avoid allocating extra memory.\\n            success := staticcall(gas(), 0x05, dataPtr, mload(result), dataPtr, mLen)\\n            // Overwrite the length.\\n            // result.length > returndatasize() is guaranteed because returndatasize() == m.length\\n            mstore(result, mLen)\\n            // Set the memory pointer after the returned data.\\n            mstore(0x40, add(dataPtr, mLen))\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether the provided byte array is zero.\\n     */\\n    function _zeroBytes(bytes memory byteArray) private pure returns (bool) {\\n        for (uint256 i = 0; i < byteArray.length; ++i) {\\n            if (byteArray[i] != 0) {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * This method is based on Newton's method for computing square roots; the algorithm is restricted to only\\n     * using integer operations.\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        unchecked {\\n            // Take care of easy edge cases when a == 0 or a == 1\\n            if (a <= 1) {\\n                return a;\\n            }\\n\\n            // In this function, we use Newton's method to get a root of `f(x) := x\\u00b2 - a`. It involves building a\\n            // sequence x_n that converges toward sqrt(a). For each iteration x_n, we also define the error between\\n            // the current value as `\\u03b5_n = | x_n - sqrt(a) |`.\\n            //\\n            // For our first estimation, we consider `e` the smallest power of 2 which is bigger than the square root\\n            // of the target. (i.e. `2**(e-1) \\u2264 sqrt(a) < 2**e`). We know that `e \\u2264 128` because `(2\\u00b9\\u00b2\\u2078)\\u00b2 = 2\\u00b2\\u2075\\u2076` is\\n            // bigger than any uint256.\\n            //\\n            // By noticing that\\n            // `2**(e-1) \\u2264 sqrt(a) < 2**e \\u2192 (2**(e-1))\\u00b2 \\u2264 a < (2**e)\\u00b2 \\u2192 2**(2*e-2) \\u2264 a < 2**(2*e)`\\n            // we can deduce that `e - 1` is `log2(a) / 2`. We can thus compute `x_n = 2**(e-1)` using a method similar\\n            // to the msb function.\\n            uint256 aa = a;\\n            uint256 xn = 1;\\n\\n            if (aa >= (1 << 128)) {\\n                aa >>= 128;\\n                xn <<= 64;\\n            }\\n            if (aa >= (1 << 64)) {\\n                aa >>= 64;\\n                xn <<= 32;\\n            }\\n            if (aa >= (1 << 32)) {\\n                aa >>= 32;\\n                xn <<= 16;\\n            }\\n            if (aa >= (1 << 16)) {\\n                aa >>= 16;\\n                xn <<= 8;\\n            }\\n            if (aa >= (1 << 8)) {\\n                aa >>= 8;\\n                xn <<= 4;\\n            }\\n            if (aa >= (1 << 4)) {\\n                aa >>= 4;\\n                xn <<= 2;\\n            }\\n            if (aa >= (1 << 2)) {\\n                xn <<= 1;\\n            }\\n\\n            // We now have x_n such that `x_n = 2**(e-1) \\u2264 sqrt(a) < 2**e = 2 * x_n`. This implies \\u03b5_n \\u2264 2**(e-1).\\n            //\\n            // We can refine our estimation by noticing that the middle of that interval minimizes the error.\\n            // If we move x_n to equal 2**(e-1) + 2**(e-2), then we reduce the error to \\u03b5_n \\u2264 2**(e-2).\\n            // This is going to be our x_0 (and \\u03b5_0)\\n            xn = (3 * xn) >> 1; // \\u03b5_0 := | x_0 - sqrt(a) | \\u2264 2**(e-2)\\n\\n            // From here, Newton's method give us:\\n            // x_{n+1} = (x_n + a / x_n) / 2\\n            //\\n            // One should note that:\\n            // x_{n+1}\\u00b2 - a = ((x_n + a / x_n) / 2)\\u00b2 - a\\n            //              = ((x_n\\u00b2 + a) / (2 * x_n))\\u00b2 - a\\n            //              = (x_n\\u2074 + 2 * a * x_n\\u00b2 + a\\u00b2) / (4 * x_n\\u00b2) - a\\n            //              = (x_n\\u2074 + 2 * a * x_n\\u00b2 + a\\u00b2 - 4 * a * x_n\\u00b2) / (4 * x_n\\u00b2)\\n            //              = (x_n\\u2074 - 2 * a * x_n\\u00b2 + a\\u00b2) / (4 * x_n\\u00b2)\\n            //              = (x_n\\u00b2 - a)\\u00b2 / (2 * x_n)\\u00b2\\n            //              = ((x_n\\u00b2 - a) / (2 * x_n))\\u00b2\\n            //              \\u2265 0\\n            // Which proves that for all n \\u2265 1, sqrt(a) \\u2264 x_n\\n            //\\n            // This gives us the proof of quadratic convergence of the sequence:\\n            // \\u03b5_{n+1} = | x_{n+1} - sqrt(a) |\\n            //         = | (x_n + a / x_n) / 2 - sqrt(a) |\\n            //         = | (x_n\\u00b2 + a - 2*x_n*sqrt(a)) / (2 * x_n) |\\n            //         = | (x_n - sqrt(a))\\u00b2 / (2 * x_n) |\\n            //         = | \\u03b5_n\\u00b2 / (2 * x_n) |\\n            //         = \\u03b5_n\\u00b2 / | (2 * x_n) |\\n            //\\n            // For the first iteration, we have a special case where x_0 is known:\\n            // \\u03b5_1 = \\u03b5_0\\u00b2 / | (2 * x_0) |\\n            //     \\u2264 (2**(e-2))\\u00b2 / (2 * (2**(e-1) + 2**(e-2)))\\n            //     \\u2264 2**(2*e-4) / (3 * 2**(e-1))\\n            //     \\u2264 2**(e-3) / 3\\n            //     \\u2264 2**(e-3-log2(3))\\n            //     \\u2264 2**(e-4.5)\\n            //\\n            // For the following iterations, we use the fact that, 2**(e-1) \\u2264 sqrt(a) \\u2264 x_n:\\n            // \\u03b5_{n+1} = \\u03b5_n\\u00b2 / | (2 * x_n) |\\n            //         \\u2264 (2**(e-k))\\u00b2 / (2 * 2**(e-1))\\n            //         \\u2264 2**(2*e-2*k) / 2**e\\n            //         \\u2264 2**(e-2*k)\\n            xn = (xn + a / xn) >> 1; // \\u03b5_1 := | x_1 - sqrt(a) | \\u2264 2**(e-4.5)  -- special case, see above\\n            xn = (xn + a / xn) >> 1; // \\u03b5_2 := | x_2 - sqrt(a) | \\u2264 2**(e-9)    -- general case with k = 4.5\\n            xn = (xn + a / xn) >> 1; // \\u03b5_3 := | x_3 - sqrt(a) | \\u2264 2**(e-18)   -- general case with k = 9\\n            xn = (xn + a / xn) >> 1; // \\u03b5_4 := | x_4 - sqrt(a) | \\u2264 2**(e-36)   -- general case with k = 18\\n            xn = (xn + a / xn) >> 1; // \\u03b5_5 := | x_5 - sqrt(a) | \\u2264 2**(e-72)   -- general case with k = 36\\n            xn = (xn + a / xn) >> 1; // \\u03b5_6 := | x_6 - sqrt(a) | \\u2264 2**(e-144)  -- general case with k = 72\\n\\n            // Because e \\u2264 128 (as discussed during the first estimation phase), we know have reached a precision\\n            // \\u03b5_6 \\u2264 2**(e-144) < 1. Given we're operating on integers, then we can ensure that xn is now either\\n            // sqrt(a) or sqrt(a) + 1.\\n            return xn - SafeCast.toUint(xn > a / xn);\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && result * result < a);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        uint256 exp;\\n        unchecked {\\n            exp = 128 * SafeCast.toUint(value > (1 << 128) - 1);\\n            value >>= exp;\\n            result += exp;\\n\\n            exp = 64 * SafeCast.toUint(value > (1 << 64) - 1);\\n            value >>= exp;\\n            result += exp;\\n\\n            exp = 32 * SafeCast.toUint(value > (1 << 32) - 1);\\n            value >>= exp;\\n            result += exp;\\n\\n            exp = 16 * SafeCast.toUint(value > (1 << 16) - 1);\\n            value >>= exp;\\n            result += exp;\\n\\n            exp = 8 * SafeCast.toUint(value > (1 << 8) - 1);\\n            value >>= exp;\\n            result += exp;\\n\\n            exp = 4 * SafeCast.toUint(value > (1 << 4) - 1);\\n            value >>= exp;\\n            result += exp;\\n\\n            exp = 2 * SafeCast.toUint(value > (1 << 2) - 1);\\n            value >>= exp;\\n            result += exp;\\n\\n            result += SafeCast.toUint(value > 1);\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && 1 << result < value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && 10 ** result < value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        uint256 isGt;\\n        unchecked {\\n            isGt = SafeCast.toUint(value > (1 << 128) - 1);\\n            value >>= isGt * 128;\\n            result += isGt * 16;\\n\\n            isGt = SafeCast.toUint(value > (1 << 64) - 1);\\n            value >>= isGt * 64;\\n            result += isGt * 8;\\n\\n            isGt = SafeCast.toUint(value > (1 << 32) - 1);\\n            value >>= isGt * 32;\\n            result += isGt * 4;\\n\\n            isGt = SafeCast.toUint(value > (1 << 16) - 1);\\n            value >>= isGt * 16;\\n            result += isGt * 2;\\n\\n            result += SafeCast.toUint(value > (1 << 8) - 1);\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && 1 << (result << 3) < value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0xa00be322d7db5786750ce0ac7e2f5b633ac30a5ed5fa1ced1e74acfc19acecea\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/math/SafeCast.sol)\\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX/bool casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Value doesn't fit in an uint of `bits` size.\\n     */\\n    error SafeCastOverflowedUintDowncast(uint8 bits, uint256 value);\\n\\n    /**\\n     * @dev An int value doesn't fit in an uint of `bits` size.\\n     */\\n    error SafeCastOverflowedIntToUint(int256 value);\\n\\n    /**\\n     * @dev Value doesn't fit in an int of `bits` size.\\n     */\\n    error SafeCastOverflowedIntDowncast(uint8 bits, int256 value);\\n\\n    /**\\n     * @dev An uint value doesn't fit in an int of `bits` size.\\n     */\\n    error SafeCastOverflowedUintToInt(uint256 value);\\n\\n    /**\\n     * @dev Returns the downcasted uint248 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint248).\\n     *\\n     * Counterpart to Solidity's `uint248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     */\\n    function toUint248(uint256 value) internal pure returns (uint248) {\\n        if (value > type(uint248).max) {\\n            revert SafeCastOverflowedUintDowncast(248, value);\\n        }\\n        return uint248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint240 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint240).\\n     *\\n     * Counterpart to Solidity's `uint240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     */\\n    function toUint240(uint256 value) internal pure returns (uint240) {\\n        if (value > type(uint240).max) {\\n            revert SafeCastOverflowedUintDowncast(240, value);\\n        }\\n        return uint240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint232 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint232).\\n     *\\n     * Counterpart to Solidity's `uint232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     */\\n    function toUint232(uint256 value) internal pure returns (uint232) {\\n        if (value > type(uint232).max) {\\n            revert SafeCastOverflowedUintDowncast(232, value);\\n        }\\n        return uint232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        if (value > type(uint224).max) {\\n            revert SafeCastOverflowedUintDowncast(224, value);\\n        }\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint216 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint216).\\n     *\\n     * Counterpart to Solidity's `uint216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     */\\n    function toUint216(uint256 value) internal pure returns (uint216) {\\n        if (value > type(uint216).max) {\\n            revert SafeCastOverflowedUintDowncast(216, value);\\n        }\\n        return uint216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint208 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint208).\\n     *\\n     * Counterpart to Solidity's `uint208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     */\\n    function toUint208(uint256 value) internal pure returns (uint208) {\\n        if (value > type(uint208).max) {\\n            revert SafeCastOverflowedUintDowncast(208, value);\\n        }\\n        return uint208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint200 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint200).\\n     *\\n     * Counterpart to Solidity's `uint200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     */\\n    function toUint200(uint256 value) internal pure returns (uint200) {\\n        if (value > type(uint200).max) {\\n            revert SafeCastOverflowedUintDowncast(200, value);\\n        }\\n        return uint200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint192 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint192).\\n     *\\n     * Counterpart to Solidity's `uint192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     */\\n    function toUint192(uint256 value) internal pure returns (uint192) {\\n        if (value > type(uint192).max) {\\n            revert SafeCastOverflowedUintDowncast(192, value);\\n        }\\n        return uint192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint184 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint184).\\n     *\\n     * Counterpart to Solidity's `uint184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     */\\n    function toUint184(uint256 value) internal pure returns (uint184) {\\n        if (value > type(uint184).max) {\\n            revert SafeCastOverflowedUintDowncast(184, value);\\n        }\\n        return uint184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint176 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint176).\\n     *\\n     * Counterpart to Solidity's `uint176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     */\\n    function toUint176(uint256 value) internal pure returns (uint176) {\\n        if (value > type(uint176).max) {\\n            revert SafeCastOverflowedUintDowncast(176, value);\\n        }\\n        return uint176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint168 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint168).\\n     *\\n     * Counterpart to Solidity's `uint168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     */\\n    function toUint168(uint256 value) internal pure returns (uint168) {\\n        if (value > type(uint168).max) {\\n            revert SafeCastOverflowedUintDowncast(168, value);\\n        }\\n        return uint168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint160 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint160).\\n     *\\n     * Counterpart to Solidity's `uint160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     */\\n    function toUint160(uint256 value) internal pure returns (uint160) {\\n        if (value > type(uint160).max) {\\n            revert SafeCastOverflowedUintDowncast(160, value);\\n        }\\n        return uint160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint152 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint152).\\n     *\\n     * Counterpart to Solidity's `uint152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     */\\n    function toUint152(uint256 value) internal pure returns (uint152) {\\n        if (value > type(uint152).max) {\\n            revert SafeCastOverflowedUintDowncast(152, value);\\n        }\\n        return uint152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint144 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint144).\\n     *\\n     * Counterpart to Solidity's `uint144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     */\\n    function toUint144(uint256 value) internal pure returns (uint144) {\\n        if (value > type(uint144).max) {\\n            revert SafeCastOverflowedUintDowncast(144, value);\\n        }\\n        return uint144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint136 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint136).\\n     *\\n     * Counterpart to Solidity's `uint136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     */\\n    function toUint136(uint256 value) internal pure returns (uint136) {\\n        if (value > type(uint136).max) {\\n            revert SafeCastOverflowedUintDowncast(136, value);\\n        }\\n        return uint136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        if (value > type(uint128).max) {\\n            revert SafeCastOverflowedUintDowncast(128, value);\\n        }\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint120 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint120).\\n     *\\n     * Counterpart to Solidity's `uint120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     */\\n    function toUint120(uint256 value) internal pure returns (uint120) {\\n        if (value > type(uint120).max) {\\n            revert SafeCastOverflowedUintDowncast(120, value);\\n        }\\n        return uint120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint112 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint112).\\n     *\\n     * Counterpart to Solidity's `uint112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     */\\n    function toUint112(uint256 value) internal pure returns (uint112) {\\n        if (value > type(uint112).max) {\\n            revert SafeCastOverflowedUintDowncast(112, value);\\n        }\\n        return uint112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint104 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint104).\\n     *\\n     * Counterpart to Solidity's `uint104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     */\\n    function toUint104(uint256 value) internal pure returns (uint104) {\\n        if (value > type(uint104).max) {\\n            revert SafeCastOverflowedUintDowncast(104, value);\\n        }\\n        return uint104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        if (value > type(uint96).max) {\\n            revert SafeCastOverflowedUintDowncast(96, value);\\n        }\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint88 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint88).\\n     *\\n     * Counterpart to Solidity's `uint88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     */\\n    function toUint88(uint256 value) internal pure returns (uint88) {\\n        if (value > type(uint88).max) {\\n            revert SafeCastOverflowedUintDowncast(88, value);\\n        }\\n        return uint88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint80 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint80).\\n     *\\n     * Counterpart to Solidity's `uint80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     */\\n    function toUint80(uint256 value) internal pure returns (uint80) {\\n        if (value > type(uint80).max) {\\n            revert SafeCastOverflowedUintDowncast(80, value);\\n        }\\n        return uint80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint72 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint72).\\n     *\\n     * Counterpart to Solidity's `uint72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     */\\n    function toUint72(uint256 value) internal pure returns (uint72) {\\n        if (value > type(uint72).max) {\\n            revert SafeCastOverflowedUintDowncast(72, value);\\n        }\\n        return uint72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        if (value > type(uint64).max) {\\n            revert SafeCastOverflowedUintDowncast(64, value);\\n        }\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint56 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint56).\\n     *\\n     * Counterpart to Solidity's `uint56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     */\\n    function toUint56(uint256 value) internal pure returns (uint56) {\\n        if (value > type(uint56).max) {\\n            revert SafeCastOverflowedUintDowncast(56, value);\\n        }\\n        return uint56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint48 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint48).\\n     *\\n     * Counterpart to Solidity's `uint48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     */\\n    function toUint48(uint256 value) internal pure returns (uint48) {\\n        if (value > type(uint48).max) {\\n            revert SafeCastOverflowedUintDowncast(48, value);\\n        }\\n        return uint48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint40 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint40).\\n     *\\n     * Counterpart to Solidity's `uint40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     */\\n    function toUint40(uint256 value) internal pure returns (uint40) {\\n        if (value > type(uint40).max) {\\n            revert SafeCastOverflowedUintDowncast(40, value);\\n        }\\n        return uint40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        if (value > type(uint32).max) {\\n            revert SafeCastOverflowedUintDowncast(32, value);\\n        }\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint24 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint24).\\n     *\\n     * Counterpart to Solidity's `uint24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     */\\n    function toUint24(uint256 value) internal pure returns (uint24) {\\n        if (value > type(uint24).max) {\\n            revert SafeCastOverflowedUintDowncast(24, value);\\n        }\\n        return uint24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        if (value > type(uint16).max) {\\n            revert SafeCastOverflowedUintDowncast(16, value);\\n        }\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        if (value > type(uint8).max) {\\n            revert SafeCastOverflowedUintDowncast(8, value);\\n        }\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        if (value < 0) {\\n            revert SafeCastOverflowedIntToUint(value);\\n        }\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int248 from int256, reverting on\\n     * overflow (when the input is less than smallest int248 or\\n     * greater than largest int248).\\n     *\\n     * Counterpart to Solidity's `int248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     */\\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\\n        downcasted = int248(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(248, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int240 from int256, reverting on\\n     * overflow (when the input is less than smallest int240 or\\n     * greater than largest int240).\\n     *\\n     * Counterpart to Solidity's `int240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     */\\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\\n        downcasted = int240(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(240, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int232 from int256, reverting on\\n     * overflow (when the input is less than smallest int232 or\\n     * greater than largest int232).\\n     *\\n     * Counterpart to Solidity's `int232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     */\\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\\n        downcasted = int232(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(232, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int224 from int256, reverting on\\n     * overflow (when the input is less than smallest int224 or\\n     * greater than largest int224).\\n     *\\n     * Counterpart to Solidity's `int224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\\n        downcasted = int224(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(224, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int216 from int256, reverting on\\n     * overflow (when the input is less than smallest int216 or\\n     * greater than largest int216).\\n     *\\n     * Counterpart to Solidity's `int216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     */\\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\\n        downcasted = int216(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(216, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int208 from int256, reverting on\\n     * overflow (when the input is less than smallest int208 or\\n     * greater than largest int208).\\n     *\\n     * Counterpart to Solidity's `int208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     */\\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\\n        downcasted = int208(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(208, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int200 from int256, reverting on\\n     * overflow (when the input is less than smallest int200 or\\n     * greater than largest int200).\\n     *\\n     * Counterpart to Solidity's `int200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     */\\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\\n        downcasted = int200(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(200, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int192 from int256, reverting on\\n     * overflow (when the input is less than smallest int192 or\\n     * greater than largest int192).\\n     *\\n     * Counterpart to Solidity's `int192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     */\\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\\n        downcasted = int192(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(192, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int184 from int256, reverting on\\n     * overflow (when the input is less than smallest int184 or\\n     * greater than largest int184).\\n     *\\n     * Counterpart to Solidity's `int184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     */\\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\\n        downcasted = int184(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(184, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int176 from int256, reverting on\\n     * overflow (when the input is less than smallest int176 or\\n     * greater than largest int176).\\n     *\\n     * Counterpart to Solidity's `int176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     */\\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\\n        downcasted = int176(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(176, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int168 from int256, reverting on\\n     * overflow (when the input is less than smallest int168 or\\n     * greater than largest int168).\\n     *\\n     * Counterpart to Solidity's `int168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     */\\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\\n        downcasted = int168(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(168, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int160 from int256, reverting on\\n     * overflow (when the input is less than smallest int160 or\\n     * greater than largest int160).\\n     *\\n     * Counterpart to Solidity's `int160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     */\\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\\n        downcasted = int160(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(160, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int152 from int256, reverting on\\n     * overflow (when the input is less than smallest int152 or\\n     * greater than largest int152).\\n     *\\n     * Counterpart to Solidity's `int152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     */\\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\\n        downcasted = int152(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(152, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int144 from int256, reverting on\\n     * overflow (when the input is less than smallest int144 or\\n     * greater than largest int144).\\n     *\\n     * Counterpart to Solidity's `int144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     */\\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\\n        downcasted = int144(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(144, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int136 from int256, reverting on\\n     * overflow (when the input is less than smallest int136 or\\n     * greater than largest int136).\\n     *\\n     * Counterpart to Solidity's `int136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     */\\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\\n        downcasted = int136(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(136, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\\n        downcasted = int128(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(128, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int120 from int256, reverting on\\n     * overflow (when the input is less than smallest int120 or\\n     * greater than largest int120).\\n     *\\n     * Counterpart to Solidity's `int120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     */\\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\\n        downcasted = int120(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(120, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int112 from int256, reverting on\\n     * overflow (when the input is less than smallest int112 or\\n     * greater than largest int112).\\n     *\\n     * Counterpart to Solidity's `int112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     */\\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\\n        downcasted = int112(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(112, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int104 from int256, reverting on\\n     * overflow (when the input is less than smallest int104 or\\n     * greater than largest int104).\\n     *\\n     * Counterpart to Solidity's `int104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     */\\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\\n        downcasted = int104(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(104, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int96 from int256, reverting on\\n     * overflow (when the input is less than smallest int96 or\\n     * greater than largest int96).\\n     *\\n     * Counterpart to Solidity's `int96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\\n        downcasted = int96(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(96, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int88 from int256, reverting on\\n     * overflow (when the input is less than smallest int88 or\\n     * greater than largest int88).\\n     *\\n     * Counterpart to Solidity's `int88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     */\\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\\n        downcasted = int88(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(88, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int80 from int256, reverting on\\n     * overflow (when the input is less than smallest int80 or\\n     * greater than largest int80).\\n     *\\n     * Counterpart to Solidity's `int80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     */\\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\\n        downcasted = int80(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(80, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int72 from int256, reverting on\\n     * overflow (when the input is less than smallest int72 or\\n     * greater than largest int72).\\n     *\\n     * Counterpart to Solidity's `int72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     */\\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\\n        downcasted = int72(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(72, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\\n        downcasted = int64(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(64, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int56 from int256, reverting on\\n     * overflow (when the input is less than smallest int56 or\\n     * greater than largest int56).\\n     *\\n     * Counterpart to Solidity's `int56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     */\\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\\n        downcasted = int56(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(56, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int48 from int256, reverting on\\n     * overflow (when the input is less than smallest int48 or\\n     * greater than largest int48).\\n     *\\n     * Counterpart to Solidity's `int48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     */\\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\\n        downcasted = int48(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(48, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int40 from int256, reverting on\\n     * overflow (when the input is less than smallest int40 or\\n     * greater than largest int40).\\n     *\\n     * Counterpart to Solidity's `int40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     */\\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\\n        downcasted = int40(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(40, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\\n        downcasted = int32(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(32, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int24 from int256, reverting on\\n     * overflow (when the input is less than smallest int24 or\\n     * greater than largest int24).\\n     *\\n     * Counterpart to Solidity's `int24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     */\\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\\n        downcasted = int24(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(24, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\\n        downcasted = int16(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(16, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     */\\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\\n        downcasted = int8(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(8, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        if (value > uint256(type(int256).max)) {\\n            revert SafeCastOverflowedUintToInt(value);\\n        }\\n        return int256(value);\\n    }\\n\\n    /**\\n     * @dev Cast a boolean (false or true) to a uint256 (0 or 1) with no jump.\\n     */\\n    function toUint(bool b) internal pure returns (uint256 u) {\\n        assembly (\\\"memory-safe\\\") {\\n            u := iszero(iszero(b))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x195533c86d0ef72bcc06456a4f66a9b941f38eb403739b00f21fd7c1abd1ae54\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {SafeCast} from \\\"./SafeCast.sol\\\";\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Branchless ternary evaluation for `a ? b : c`. Gas costs are constant.\\n     *\\n     * IMPORTANT: This function may reduce bytecode size and consume less gas when used standalone.\\n     * However, the compiler may optimize Solidity ternary operations (i.e. `a ? b : c`) to only compute\\n     * one branch when needed, making this function more expensive.\\n     */\\n    function ternary(bool condition, int256 a, int256 b) internal pure returns (int256) {\\n        unchecked {\\n            // branchless ternary works because:\\n            // b ^ (a ^ b) == a\\n            // b ^ 0 == b\\n            return b ^ ((a ^ b) * int256(SafeCast.toUint(condition)));\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return ternary(a > b, a, b);\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return ternary(a < b, a, b);\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // Formula from the \\\"Bit Twiddling Hacks\\\" by Sean Eron Anderson.\\n            // Since `n` is a signed integer, the generated bytecode will use the SAR opcode to perform the right shift,\\n            // taking advantage of the most significant (or \\\"sign\\\" bit) in two's complement representation.\\n            // This opcode adds new most significant bits set to the value of the previous most significant bit. As a result,\\n            // the mask will either be `bytes32(0)` (if n is positive) or `~bytes32(0)` (if n is negative).\\n            int256 mask = n >> 255;\\n\\n            // A `bytes32(0)` mask leaves the input unchanged, while a `~bytes32(0)` mask complements it.\\n            return uint256((n + mask) ^ mask);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb1970fac7b64e6c09611e6691791e848d5e3fe410fa5899e7df2e0afd77a99e3\",\"license\":\"MIT\"},\"contracts/MyToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// Compatible with OpenZeppelin Contracts ^5.0.0\\r\\npragma solidity ^0.8.22;\\r\\n\\r\\nimport {ERC721} from \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\r\\nimport {ERC721Burnable} from \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Burnable.sol\\\";\\r\\nimport {ERC721Enumerable} from \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\\\";\\r\\nimport {ERC721URIStorage} from \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\\\";\\r\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\n//\\u8fd9\\u662f\\u4e00\\u4e2acopy\\u7684\\u5408\\u7ea6\\uff0c\\u4ece\\u5b83\\u7684\\u4e3b\\u7f51\\u4e0a\\r\\ncontract MyToken is ERC721, ERC721Enumerable, ERC721URIStorage, ERC721Burnable, Ownable {\\r\\n    uint256 private _nextTokenId;\\r\\n    //metadata \\u5143\\u6570\\u636e\\u7684\\u94fe\\u63a5\\r\\n    //https://obvious-fuchsia-lizard.myfilebase.com/ipfs/xxx == ipfs://xxx\\r\\n    string constant META_DATA = \\\"ipfs://QmbFK1Y2ic2H2UXvyxGmQiybAqyAkPPegCbLodJGW3bqMf\\\";\\r\\n\\r\\n    constructor(string memory tokenName, string memory tokenSymbol)\\r\\n        ERC721(tokenName, tokenSymbol)\\r\\n        Ownable(msg.sender)\\r\\n    {}\\r\\n    //safeMint\\u51fd\\u6570\\uff0c\\u7528\\u4e8e\\u94f8\\u9020NFT\\r\\n    function safeMint(address to)\\r\\n        public\\r\\n        onlyOwner\\r\\n        returns (uint256)\\r\\n    {\\r\\n        uint256 tokenId = _nextTokenId++;\\r\\n        _safeMint(to, tokenId);\\r\\n        _setTokenURI(tokenId, META_DATA);\\r\\n        return tokenId;\\r\\n    }\\r\\n\\r\\n    // The following functions are overrides required by Solidity.\\r\\n\\r\\n    function _update(address to, uint256 tokenId, address auth)\\r\\n        internal\\r\\n        override(ERC721, ERC721Enumerable)\\r\\n        returns (address)\\r\\n    {\\r\\n        return super._update(to, tokenId, auth);\\r\\n    }\\r\\n\\r\\n    function _increaseBalance(address account, uint128 value)\\r\\n        internal\\r\\n        override(ERC721, ERC721Enumerable)\\r\\n    {\\r\\n        super._increaseBalance(account, value);\\r\\n    }\\r\\n\\r\\n    function tokenURI(uint256 tokenId)\\r\\n        public\\r\\n        view\\r\\n        override(ERC721, ERC721URIStorage)\\r\\n        returns (string memory)\\r\\n    {\\r\\n        return super.tokenURI(tokenId);\\r\\n    }\\r\\n\\r\\n    function supportsInterface(bytes4 interfaceId)\\r\\n        public\\r\\n        view\\r\\n        override(ERC721, ERC721Enumerable, ERC721URIStorage)\\r\\n        returns (bool)\\r\\n    {\\r\\n        return super.supportsInterface(interfaceId);\\r\\n    }\\r\\n}\",\"keccak256\":\"0x65aca1d771a66b5347982ae70f45f93366595ba24a1109c43b32e9c4314cd9de\",\"license\":\"MIT\"},\"contracts/WrappedMyToken.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.20;\\r\\n\\r\\nimport {MyToken} from \\\"./MyToken.sol\\\";\\r\\n//\\u5c01\\u88c5MyToken\\u5408\\u7ea6\\r\\ncontract WrappedMyToken is MyToken {\\r\\n    constructor(string memory tokenName, string memory tokenSymbol) \\r\\n    MyToken(tokenName, tokenSymbol) {}//\\u7ed9\\u7236\\u5408\\u7ea6\\u4f20\\u9012\\u53c2\\u6570\\u8fdb\\u884c\\u521d\\u59cb\\u5316\\r\\n    //\\u6b63\\u5e38\\u9879\\u76ee \\u662f\\u9700\\u8981\\u6743\\u9650\\u63a7\\u5236\\u7684\\uff01\\r\\n    function mintWithSpecificTokenId(address to, uint256 _tokenId) public {\\r\\n        _safeMint(to, _tokenId);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x195d1654fb916750aeafa3da255e163282af4361a90584484200ca566f28d5a9\",\"license\":\"MIT\"}},\"version\":1}",
      "storageLayout": {
        "storage": [
          {
            "astId": 6267,
            "contract": "contracts/WrappedMyToken.sol:WrappedMyToken",
            "label": "_name",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 6269,
            "contract": "contracts/WrappedMyToken.sol:WrappedMyToken",
            "label": "_symbol",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 6273,
            "contract": "contracts/WrappedMyToken.sol:WrappedMyToken",
            "label": "_owners",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_uint256,t_address)"
          },
          {
            "astId": 6277,
            "contract": "contracts/WrappedMyToken.sol:WrappedMyToken",
            "label": "_balances",
            "offset": 0,
            "slot": "3",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 6281,
            "contract": "contracts/WrappedMyToken.sol:WrappedMyToken",
            "label": "_tokenApprovals",
            "offset": 0,
            "slot": "4",
            "type": "t_mapping(t_uint256,t_address)"
          },
          {
            "astId": 6287,
            "contract": "contracts/WrappedMyToken.sol:WrappedMyToken",
            "label": "_operatorApprovals",
            "offset": 0,
            "slot": "5",
            "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
          },
          {
            "astId": 7374,
            "contract": "contracts/WrappedMyToken.sol:WrappedMyToken",
            "label": "_ownedTokens",
            "offset": 0,
            "slot": "6",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
          },
          {
            "astId": 7378,
            "contract": "contracts/WrappedMyToken.sol:WrappedMyToken",
            "label": "_ownedTokensIndex",
            "offset": 0,
            "slot": "7",
            "type": "t_mapping(t_uint256,t_uint256)"
          },
          {
            "astId": 7381,
            "contract": "contracts/WrappedMyToken.sol:WrappedMyToken",
            "label": "_allTokens",
            "offset": 0,
            "slot": "8",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 7385,
            "contract": "contracts/WrappedMyToken.sol:WrappedMyToken",
            "label": "_allTokensIndex",
            "offset": 0,
            "slot": "9",
            "type": "t_mapping(t_uint256,t_uint256)"
          },
          {
            "astId": 7769,
            "contract": "contracts/WrappedMyToken.sol:WrappedMyToken",
            "label": "_tokenURIs",
            "offset": 0,
            "slot": "10",
            "type": "t_mapping(t_uint256,t_string_storage)"
          },
          {
            "astId": 5926,
            "contract": "contracts/WrappedMyToken.sol:WrappedMyToken",
            "label": "_owner",
            "offset": 0,
            "slot": "11",
            "type": "t_address"
          },
          {
            "astId": 12865,
            "contract": "contracts/WrappedMyToken.sol:WrappedMyToken",
            "label": "_nextTokenId",
            "offset": 0,
            "slot": "12",
            "type": "t_uint256"
          }
        ],
        "types": {
          "t_address": {
            "encoding": "inplace",
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_uint256)dyn_storage": {
            "base": "t_uint256",
            "encoding": "dynamic_array",
            "label": "uint256[]",
            "numberOfBytes": "32"
          },
          "t_bool": {
            "encoding": "inplace",
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_mapping(t_address,t_bool)": {
            "encoding": "mapping",
            "key": "t_address",
            "label": "mapping(address => bool)",
            "numberOfBytes": "32",
            "value": "t_bool"
          },
          "t_mapping(t_address,t_mapping(t_address,t_bool))": {
            "encoding": "mapping",
            "key": "t_address",
            "label": "mapping(address => mapping(address => bool))",
            "numberOfBytes": "32",
            "value": "t_mapping(t_address,t_bool)"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
            "encoding": "mapping",
            "key": "t_address",
            "label": "mapping(address => mapping(uint256 => uint256))",
            "numberOfBytes": "32",
            "value": "t_mapping(t_uint256,t_uint256)"
          },
          "t_mapping(t_address,t_uint256)": {
            "encoding": "mapping",
            "key": "t_address",
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32",
            "value": "t_uint256"
          },
          "t_mapping(t_uint256,t_address)": {
            "encoding": "mapping",
            "key": "t_uint256",
            "label": "mapping(uint256 => address)",
            "numberOfBytes": "32",
            "value": "t_address"
          },
          "t_mapping(t_uint256,t_string_storage)": {
            "encoding": "mapping",
            "key": "t_uint256",
            "label": "mapping(uint256 => string)",
            "numberOfBytes": "32",
            "value": "t_string_storage"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "encoding": "mapping",
            "key": "t_uint256",
            "label": "mapping(uint256 => uint256)",
            "numberOfBytes": "32",
            "value": "t_uint256"
          },
          "t_string_storage": {
            "encoding": "bytes",
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_uint256": {
            "encoding": "inplace",
            "label": "uint256",
            "numberOfBytes": "32"
          }
        }
      },
      "userdoc": {
        "kind": "user",
        "methods": {},
        "version": 1
      },
      "solcInput": "{\n  \"language\": \"Solidity\",\n  \"sources\": {\n    \"@chainlink/contracts-ccip/src/v0.8/ccip/applications/CCIPReceiver.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport {IAny2EVMMessageReceiver} from \\\"../interfaces/IAny2EVMMessageReceiver.sol\\\";\\n\\nimport {Client} from \\\"../libraries/Client.sol\\\";\\n\\nimport {IERC165} from \\\"../../vendor/openzeppelin-solidity/v5.0.2/contracts/utils/introspection/IERC165.sol\\\";\\n\\n/// @title CCIPReceiver - Base contract for CCIP applications that can receive messages.\\nabstract contract CCIPReceiver is IAny2EVMMessageReceiver, IERC165 {\\n  address internal immutable i_ccipRouter;\\n\\n  constructor(address router) {\\n    if (router == address(0)) revert InvalidRouter(address(0));\\n    i_ccipRouter = router;\\n  }\\n\\n  /// @notice IERC165 supports an interfaceId\\n  /// @param interfaceId The interfaceId to check\\n  /// @return true if the interfaceId is supported\\n  /// @dev Should indicate whether the contract implements IAny2EVMMessageReceiver\\n  /// e.g. return interfaceId == type(IAny2EVMMessageReceiver).interfaceId || interfaceId == type(IERC165).interfaceId\\n  /// This allows CCIP to check if ccipReceive is available before calling it.\\n  /// If this returns false or reverts, only tokens are transferred to the receiver.\\n  /// If this returns true, tokens are transferred and ccipReceive is called atomically.\\n  /// Additionally, if the receiver address does not have code associated with\\n  /// it at the time of execution (EXTCODESIZE returns 0), only tokens will be transferred.\\n  function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n    return interfaceId == type(IAny2EVMMessageReceiver).interfaceId || interfaceId == type(IERC165).interfaceId;\\n  }\\n\\n  /// @inheritdoc IAny2EVMMessageReceiver\\n  function ccipReceive(Client.Any2EVMMessage calldata message) external virtual override onlyRouter {\\n    _ccipReceive(message);\\n  }\\n\\n  /// @notice Override this function in your implementation.\\n  /// @param message Any2EVMMessage\\n  function _ccipReceive(Client.Any2EVMMessage memory message) internal virtual;\\n\\n  /////////////////////////////////////////////////////////////////////\\n  // Plumbing\\n  /////////////////////////////////////////////////////////////////////\\n\\n  /// @notice Return the current router\\n  /// @return CCIP router address\\n  function getRouter() public view virtual returns (address) {\\n    return address(i_ccipRouter);\\n  }\\n\\n  error InvalidRouter(address router);\\n\\n  /// @dev only calls from the set router are accepted.\\n  modifier onlyRouter() {\\n    if (msg.sender != getRouter()) revert InvalidRouter(msg.sender);\\n    _;\\n  }\\n}\\n\"\n    },\n    \"@chainlink/contracts-ccip/src/v0.8/ccip/interfaces/IAny2EVMMessageReceiver.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {Client} from \\\"../libraries/Client.sol\\\";\\n\\n/// @notice Application contracts that intend to receive messages from\\n/// the router should implement this interface.\\ninterface IAny2EVMMessageReceiver {\\n  /// @notice Called by the Router to deliver a message.\\n  /// If this reverts, any token transfers also revert. The message\\n  /// will move to a FAILED state and become available for manual execution.\\n  /// @param message CCIP Message\\n  /// @dev Note ensure you check the msg.sender is the OffRampRouter\\n  function ccipReceive(Client.Any2EVMMessage calldata message) external;\\n}\\n\"\n    },\n    \"@chainlink/contracts-ccip/src/v0.8/ccip/interfaces/IGetCCIPAdmin.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IGetCCIPAdmin {\\n  /// @notice Returns the admin of the token.\\n  /// @dev This method is named to never conflict with existing methods.\\n  function getCCIPAdmin() external view returns (address);\\n}\\n\"\n    },\n    \"@chainlink/contracts-ccip/src/v0.8/ccip/interfaces/IOwner.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IOwner {\\n  /// @notice Returns the owner of the contract.\\n  /// @dev This method is named to match with the OpenZeppelin Ownable contract.\\n  function owner() external view returns (address);\\n}\\n\"\n    },\n    \"@chainlink/contracts-ccip/src/v0.8/ccip/interfaces/IRouter.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {Client} from \\\"../libraries/Client.sol\\\";\\n\\ninterface IRouter {\\n  error OnlyOffRamp();\\n\\n  /// @notice Route the message to its intended receiver contract.\\n  /// @param message Client.Any2EVMMessage struct.\\n  /// @param gasForCallExactCheck of params for exec\\n  /// @param gasLimit set of params for exec\\n  /// @param receiver set of params for exec\\n  /// @dev if the receiver is a contracts that signals support for CCIP execution through EIP-165.\\n  /// the contract is called. If not, only tokens are transferred.\\n  /// @return success A boolean value indicating whether the ccip message was received without errors.\\n  /// @return retBytes A bytes array containing return data form CCIP receiver.\\n  /// @return gasUsed the gas used by the external customer call. Does not include any overhead.\\n  function routeMessage(\\n    Client.Any2EVMMessage calldata message,\\n    uint16 gasForCallExactCheck,\\n    uint256 gasLimit,\\n    address receiver\\n  ) external returns (bool success, bytes memory retBytes, uint256 gasUsed);\\n\\n  /// @notice Returns the configured onramp for a specific destination chain.\\n  /// @param destChainSelector The destination chain Id to get the onRamp for.\\n  /// @return onRampAddress The address of the onRamp.\\n  function getOnRamp(uint64 destChainSelector) external view returns (address onRampAddress);\\n\\n  /// @notice Return true if the given offRamp is a configured offRamp for the given source chain.\\n  /// @param sourceChainSelector The source chain selector to check.\\n  /// @param offRamp The address of the offRamp to check.\\n  function isOffRamp(uint64 sourceChainSelector, address offRamp) external view returns (bool isOffRamp);\\n}\\n\"\n    },\n    \"@chainlink/contracts-ccip/src/v0.8/ccip/interfaces/IRouterClient.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport {Client} from \\\"../libraries/Client.sol\\\";\\n\\ninterface IRouterClient {\\n  error UnsupportedDestinationChain(uint64 destChainSelector);\\n  error InsufficientFeeTokenAmount();\\n  error InvalidMsgValue();\\n\\n  /// @notice Checks if the given chain ID is supported for sending/receiving.\\n  /// @param destChainSelector The chain to check.\\n  /// @return supported is true if it is supported, false if not.\\n  function isChainSupported(uint64 destChainSelector) external view returns (bool supported);\\n\\n  /// @param destinationChainSelector The destination chainSelector\\n  /// @param message The cross-chain CCIP message including data and/or tokens\\n  /// @return fee returns execution fee for the message\\n  /// delivery to destination chain, denominated in the feeToken specified in the message.\\n  /// @dev Reverts with appropriate reason upon invalid message.\\n  function getFee(\\n    uint64 destinationChainSelector,\\n    Client.EVM2AnyMessage memory message\\n  ) external view returns (uint256 fee);\\n\\n  /// @notice Request a message to be sent to the destination chain\\n  /// @param destinationChainSelector The destination chain ID\\n  /// @param message The cross-chain CCIP message including data and/or tokens\\n  /// @return messageId The message ID\\n  /// @dev Note if msg.value is larger than the required fee (from getFee) we accept\\n  /// the overpayment with no refund.\\n  /// @dev Reverts with appropriate reason upon invalid message.\\n  function ccipSend(\\n    uint64 destinationChainSelector,\\n    Client.EVM2AnyMessage calldata message\\n  ) external payable returns (bytes32);\\n}\\n\"\n    },\n    \"@chainlink/contracts-ccip/src/v0.8/ccip/libraries/Client.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// End consumer library.\\nlibrary Client {\\n  /// @dev RMN depends on this struct, if changing, please notify the RMN maintainers.\\n  struct EVMTokenAmount {\\n    address token; // token address on the local chain.\\n    uint256 amount; // Amount of tokens.\\n  }\\n\\n  struct Any2EVMMessage {\\n    bytes32 messageId; // MessageId corresponding to ccipSend on source.\\n    uint64 sourceChainSelector; // Source chain selector.\\n    bytes sender; // abi.decode(sender) if coming from an EVM chain.\\n    bytes data; // payload sent in original message.\\n    EVMTokenAmount[] destTokenAmounts; // Tokens and their amounts in their destination chain representation.\\n  }\\n\\n  // If extraArgs is empty bytes, the default is 200k gas limit.\\n  struct EVM2AnyMessage {\\n    bytes receiver; // abi.encode(receiver address) for dest EVM chains\\n    bytes data; // Data payload\\n    EVMTokenAmount[] tokenAmounts; // Token transfers\\n    address feeToken; // Address of feeToken. address(0) means you will send msg.value.\\n    bytes extraArgs; // Populate this with _argsToBytes(EVMExtraArgsV2)\\n  }\\n\\n  // bytes4(keccak256(\\\"CCIP EVMExtraArgsV1\\\"));\\n  bytes4 public constant EVM_EXTRA_ARGS_V1_TAG = 0x97a657c9;\\n\\n  struct EVMExtraArgsV1 {\\n    uint256 gasLimit;\\n  }\\n\\n  function _argsToBytes(EVMExtraArgsV1 memory extraArgs) internal pure returns (bytes memory bts) {\\n    return abi.encodeWithSelector(EVM_EXTRA_ARGS_V1_TAG, extraArgs);\\n  }\\n\\n  // bytes4(keccak256(\\\"CCIP EVMExtraArgsV2\\\"));\\n  bytes4 public constant EVM_EXTRA_ARGS_V2_TAG = 0x181dcf10;\\n\\n  /// @param gasLimit: gas limit for the callback on the destination chain.\\n  /// @param allowOutOfOrderExecution: if true, it indicates that the message can be executed in any order relative to other messages from the same sender.\\n  /// This value's default varies by chain. On some chains, a particular value is enforced, meaning if the expected value\\n  /// is not set, the message request will revert.\\n  struct EVMExtraArgsV2 {\\n    uint256 gasLimit;\\n    bool allowOutOfOrderExecution;\\n  }\\n\\n  function _argsToBytes(EVMExtraArgsV2 memory extraArgs) internal pure returns (bytes memory bts) {\\n    return abi.encodeWithSelector(EVM_EXTRA_ARGS_V2_TAG, extraArgs);\\n  }\\n}\\n\"\n    },\n    \"@chainlink/contracts-ccip/src/v0.8/ccip/libraries/Internal.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport {MerkleMultiProof} from \\\"../libraries/MerkleMultiProof.sol\\\";\\nimport {Client} from \\\"./Client.sol\\\";\\n\\n// Library for CCIP internal definitions common to multiple contracts.\\nlibrary Internal {\\n  error InvalidEVMAddress(bytes encodedAddress);\\n\\n  /// @dev The minimum amount of gas to perform the call with exact gas.\\n  /// We include this in the offramp so that we can redeploy to adjust it\\n  /// should a hardfork change the gas costs of relevant opcodes in callWithExactGas.\\n  uint16 internal constant GAS_FOR_CALL_EXACT_CHECK = 5_000;\\n  // @dev We limit return data to a selector plus 4 words. This is to avoid\\n  // malicious contracts from returning large amounts of data and causing\\n  // repeated out-of-gas scenarios.\\n  uint16 internal constant MAX_RET_BYTES = 4 + 4 * 32;\\n  /// @dev The expected number of bytes returned by the balanceOf function.\\n  uint256 internal constant MAX_BALANCE_OF_RET_BYTES = 32;\\n\\n  /// @notice A collection of token price and gas price updates.\\n  /// @dev RMN depends on this struct, if changing, please notify the RMN maintainers.\\n  struct PriceUpdates {\\n    TokenPriceUpdate[] tokenPriceUpdates;\\n    GasPriceUpdate[] gasPriceUpdates;\\n  }\\n\\n  /// @notice Token price in USD.\\n  /// @dev RMN depends on this struct, if changing, please notify the RMN maintainers.\\n  struct TokenPriceUpdate {\\n    address sourceToken; // Source token\\n    uint224 usdPerToken; // 1e18 USD per 1e18 of the smallest token denomination.\\n  }\\n\\n  /// @notice Gas price for a given chain in USD, its value may contain tightly packed fields.\\n  /// @dev RMN depends on this struct, if changing, please notify the RMN maintainers.\\n  struct GasPriceUpdate {\\n    uint64 destChainSelector; // Destination chain selector\\n    uint224 usdPerUnitGas; // 1e18 USD per smallest unit (e.g. wei) of destination chain gas\\n  }\\n\\n  /// @notice A timestamped uint224 value that can contain several tightly packed fields.\\n  struct TimestampedPackedUint224 {\\n    uint224 value; // ───────╮ Value in uint224, packed.\\n    uint32 timestamp; // ────╯ Timestamp of the most recent price update.\\n  }\\n\\n  /// @dev Gas price is stored in 112-bit unsigned int. uint224 can pack 2 prices.\\n  /// When packing L1 and L2 gas prices, L1 gas price is left-shifted to the higher-order bits.\\n  /// Using uint8 type, which cannot be higher than other bit shift operands, to avoid shift operand type warning.\\n  uint8 public constant GAS_PRICE_BITS = 112;\\n\\n  struct PoolUpdate {\\n    address token; // The IERC20 token address\\n    address pool; // The token pool address\\n  }\\n\\n  struct SourceTokenData {\\n    // The source pool address, abi encoded. This value is trusted as it was obtained through the onRamp. It can be\\n    // relied upon by the destination pool to validate the source pool.\\n    bytes sourcePoolAddress;\\n    // The address of the destination token, abi encoded in the case of EVM chains\\n    // This value is UNTRUSTED as any pool owner can return whatever value they want.\\n    bytes destTokenAddress;\\n    // Optional pool data to be transferred to the destination chain. Be default this is capped at\\n    // CCIP_LOCK_OR_BURN_V1_RET_BYTES bytes. If more data is required, the TokenTransferFeeConfig.destBytesOverhead\\n    // has to be set for the specific token.\\n    bytes extraData;\\n    uint32 destGasAmount; // The amount of gas available for the releaseOrMint and balanceOf calls on the offRamp\\n  }\\n\\n  /// @notice Report that is submitted by the execution DON at the execution phase. (including chain selector data)\\n  /// @dev RMN depends on this struct, if changing, please notify the RMN maintainers.\\n  struct ExecutionReportSingleChain {\\n    uint64 sourceChainSelector; // Source chain selector for which the report is submitted\\n    Any2EVMRampMessage[] messages;\\n    // Contains a bytes array for each message, each inner bytes array contains bytes per transferred token\\n    bytes[][] offchainTokenData;\\n    bytes32[] proofs;\\n    uint256 proofFlagBits;\\n  }\\n\\n  /// @notice Report that is submitted by the execution DON at the execution phase.\\n  /// @dev RMN depends on this struct, if changing, please notify the RMN maintainers.\\n  struct ExecutionReport {\\n    EVM2EVMMessage[] messages;\\n    // Contains a bytes array for each message, each inner bytes array contains bytes per transferred token\\n    bytes[][] offchainTokenData;\\n    bytes32[] proofs;\\n    uint256 proofFlagBits;\\n  }\\n\\n  /// @notice The cross chain message that gets committed to EVM chains.\\n  /// @dev RMN depends on this struct, if changing, please notify the RMN maintainers.\\n  struct EVM2EVMMessage {\\n    uint64 sourceChainSelector; // ────────╮ the chain selector of the source chain, note: not chainId\\n    address sender; // ────────────────────╯ sender address on the source chain\\n    address receiver; // ──────────────────╮ receiver address on the destination chain\\n    uint64 sequenceNumber; // ─────────────╯ sequence number, not unique across lanes\\n    uint256 gasLimit; //                     user supplied maximum gas amount available for dest chain execution\\n    bool strict; // ───────────────────────╮ DEPRECATED\\n    uint64 nonce; //                       │ nonce for this lane for this sender, not unique across senders/lanes\\n    address feeToken; // ──────────────────╯ fee token\\n    uint256 feeTokenAmount; //               fee token amount\\n    bytes data; //                           arbitrary data payload supplied by the message sender\\n    Client.EVMTokenAmount[] tokenAmounts; // array of tokens and amounts to transfer\\n    bytes[] sourceTokenData; //              array of token data, one per token\\n    bytes32 messageId; //                    a hash of the message data\\n  }\\n\\n  /// @dev EVM2EVMMessage struct has 13 fields, including 3 variable arrays.\\n  /// Each variable array takes 1 more slot to store its length.\\n  /// When abi encoded, excluding array contents,\\n  /// EVM2EVMMessage takes up a fixed number of 16 lots, 32 bytes each.\\n  /// For structs that contain arrays, 1 more slot is added to the front, reaching a total of 17.\\n  uint256 public constant MESSAGE_FIXED_BYTES = 32 * 17;\\n\\n  /// @dev Each token transfer adds 1 EVMTokenAmount and 3 bytes at 3 slots each and one slot for the destGasAmount.\\n  /// When abi encoded, each EVMTokenAmount takes 2 slots, each bytes takes 1 slot for length, one slot of data and one\\n  /// slot for the offset. This results in effectively 3*3 slots per SourceTokenData.\\n  /// 0x20\\n  /// destGasAmount\\n  /// sourcePoolAddress_offset\\n  /// destTokenAddress_offset\\n  /// extraData_offset\\n  /// sourcePoolAddress_length\\n  /// sourcePoolAddress_content // assume 1 slot\\n  /// destTokenAddress_length\\n  /// destTokenAddress_content // assume 1 slot\\n  /// extraData_length // contents billed separately\\n  uint256 public constant MESSAGE_FIXED_BYTES_PER_TOKEN = 32 * ((1 + 3 * 3) + 2);\\n\\n  /// @dev Any2EVMRampMessage struct has 10 fields, including 3 variable unnested arrays (data, receiver and tokenAmounts).\\n  /// Each variable array takes 1 more slot to store its length.\\n  /// When abi encoded, excluding array contents,\\n  /// Any2EVMMessage takes up a fixed number of 13 slots, 32 bytes each.\\n  /// For structs that contain arrays, 1 more slot is added to the front, reaching a total of 14.\\n  /// The fixed bytes does not cover struct data (this is represented by ANY_2_EVM_MESSAGE_FIXED_BYTES_PER_TOKEN)\\n  uint256 public constant ANY_2_EVM_MESSAGE_FIXED_BYTES = 32 * 14;\\n\\n  /// @dev Each token transfer adds 1 RampTokenAmount\\n  /// RampTokenAmount has 5 fields, 2 of which are bytes type, 1 Address, 1 uint256 and 1 uint32.\\n  /// Each bytes type takes 1 slot for length, 1 slot for data and 1 slot for the offset.\\n  /// address\\n  /// uint256 amount takes 1 slot.\\n  /// uint32 destGasAmount takes 1 slot.\\n  uint256 public constant ANY_2_EVM_MESSAGE_FIXED_BYTES_PER_TOKEN = 32 * ((2 * 3) + 3);\\n\\n  bytes32 internal constant EVM_2_EVM_MESSAGE_HASH = keccak256(\\\"EVM2EVMMessageHashV2\\\");\\n\\n  /// @dev Used to hash messages for single-lane ramps.\\n  /// OnRamp hash(EVM2EVMMessage) = OffRamp hash(EVM2EVMMessage)\\n  /// The EVM2EVMMessage's messageId is expected to be the output of this hash function\\n  /// @param original Message to hash\\n  /// @param metadataHash Immutable metadata hash representing a lane with a fixed OnRamp\\n  /// @return hashedMessage hashed message as a keccak256\\n  function _hash(EVM2EVMMessage memory original, bytes32 metadataHash) internal pure returns (bytes32) {\\n    // Fixed-size message fields are included in nested hash to reduce stack pressure.\\n    // This hashing scheme is also used by RMN. If changing it, please notify the RMN maintainers.\\n    return keccak256(\\n      abi.encode(\\n        MerkleMultiProof.LEAF_DOMAIN_SEPARATOR,\\n        metadataHash,\\n        keccak256(\\n          abi.encode(\\n            original.sender,\\n            original.receiver,\\n            original.sequenceNumber,\\n            original.gasLimit,\\n            original.strict,\\n            original.nonce,\\n            original.feeToken,\\n            original.feeTokenAmount\\n          )\\n        ),\\n        keccak256(original.data),\\n        keccak256(abi.encode(original.tokenAmounts)),\\n        keccak256(abi.encode(original.sourceTokenData))\\n      )\\n    );\\n  }\\n\\n  bytes32 internal constant ANY_2_EVM_MESSAGE_HASH = keccak256(\\\"Any2EVMMessageHashV1\\\");\\n  bytes32 internal constant EVM_2_ANY_MESSAGE_HASH = keccak256(\\\"EVM2AnyMessageHashV1\\\");\\n\\n  /// @dev Used to hash messages for multi-lane family-agnostic OffRamps.\\n  /// OnRamp hash(EVM2AnyMessage) != Any2EVMRampMessage.messageId\\n  /// OnRamp hash(EVM2AnyMessage) != OffRamp hash(Any2EVMRampMessage)\\n  /// @param original OffRamp message to hash\\n  /// @param metadataHash Hash preimage to ensure global uniqueness\\n  /// @return hashedMessage hashed message as a keccak256\\n  function _hash(Any2EVMRampMessage memory original, bytes32 metadataHash) internal pure returns (bytes32) {\\n    // Fixed-size message fields are included in nested hash to reduce stack pressure.\\n    // This hashing scheme is also used by RMN. If changing it, please notify the RMN maintainers.\\n    return keccak256(\\n      abi.encode(\\n        MerkleMultiProof.LEAF_DOMAIN_SEPARATOR,\\n        metadataHash,\\n        keccak256(\\n          abi.encode(\\n            original.header.messageId,\\n            original.receiver,\\n            original.header.sequenceNumber,\\n            original.gasLimit,\\n            original.header.nonce\\n          )\\n        ),\\n        keccak256(original.sender),\\n        keccak256(original.data),\\n        keccak256(abi.encode(original.tokenAmounts))\\n      )\\n    );\\n  }\\n\\n  function _hash(EVM2AnyRampMessage memory original, bytes32 metadataHash) internal pure returns (bytes32) {\\n    // Fixed-size message fields are included in nested hash to reduce stack pressure.\\n    // This hashing scheme is also used by RMN. If changing it, please notify the RMN maintainers.\\n    return keccak256(\\n      abi.encode(\\n        MerkleMultiProof.LEAF_DOMAIN_SEPARATOR,\\n        metadataHash,\\n        keccak256(\\n          abi.encode(\\n            original.sender,\\n            original.header.sequenceNumber,\\n            original.header.nonce,\\n            original.feeToken,\\n            original.feeTokenAmount\\n          )\\n        ),\\n        keccak256(original.receiver),\\n        keccak256(original.data),\\n        keccak256(abi.encode(original.tokenAmounts)),\\n        keccak256(original.extraArgs)\\n      )\\n    );\\n  }\\n\\n  /// @dev We disallow the first 1024 addresses to avoid calling into a range known for hosting precompiles. Calling\\n  /// into precompiles probably won't cause any issues, but to be safe we can disallow this range. It is extremely\\n  /// unlikely that anyone would ever be able to generate an address in this range. There is no official range of\\n  /// precompiles, but EIP-7587 proposes to reserve the range 0x100 to 0x1ff. Our range is more conservative, even\\n  /// though it might not be exhaustive for all chains, which is OK. We also disallow the zero address, which is a\\n  /// common practice.\\n  uint256 public constant PRECOMPILE_SPACE = 1024;\\n\\n  /// @notice This methods provides validation for parsing abi encoded addresses by ensuring the\\n  /// address is within the EVM address space. If it isn't it will revert with an InvalidEVMAddress error, which\\n  /// we can catch and handle more gracefully than a revert from abi.decode.\\n  /// @return The address if it is valid, the function will revert otherwise.\\n  function _validateEVMAddress(bytes memory encodedAddress) internal pure returns (address) {\\n    if (encodedAddress.length != 32) revert InvalidEVMAddress(encodedAddress);\\n    uint256 encodedAddressUint = abi.decode(encodedAddress, (uint256));\\n    if (encodedAddressUint > type(uint160).max || encodedAddressUint < PRECOMPILE_SPACE) {\\n      revert InvalidEVMAddress(encodedAddress);\\n    }\\n    return address(uint160(encodedAddressUint));\\n  }\\n\\n  /// @notice Enum listing the possible message execution states within\\n  /// the offRamp contract.\\n  /// UNTOUCHED never executed\\n  /// IN_PROGRESS currently being executed, used a replay protection\\n  /// SUCCESS successfully executed. End state\\n  /// FAILURE unsuccessfully executed, manual execution is now enabled.\\n  /// @dev RMN depends on this enum, if changing, please notify the RMN maintainers.\\n  enum MessageExecutionState {\\n    UNTOUCHED,\\n    IN_PROGRESS,\\n    SUCCESS,\\n    FAILURE\\n  }\\n\\n  /// @notice CCIP OCR plugin type, used to separate execution & commit transmissions and configs\\n  enum OCRPluginType {\\n    Commit,\\n    Execution\\n  }\\n\\n  /// @notice Family-agnostic header for OnRamp & OffRamp messages.\\n  /// The messageId is not expected to match hash(message), since it may originate from another ramp family\\n  struct RampMessageHeader {\\n    bytes32 messageId; // Unique identifier for the message, generated with the source chain's encoding scheme (i.e. not necessarily abi.encoded)\\n    uint64 sourceChainSelector; // ──╮ the chain selector of the source chain, note: not chainId\\n    uint64 destChainSelector; //     | the chain selector of the destination chain, note: not chainId\\n    uint64 sequenceNumber; //        │ sequence number, not unique across lanes\\n    uint64 nonce; // ────────────────╯ nonce for this lane for this sender, not unique across senders/lanes\\n  }\\n\\n  struct EVM2AnyTokenTransfer {\\n    // The source pool EVM address. This value is trusted as it was obtained through the onRamp. It can be\\n    // relied upon by the destination pool to validate the source pool.\\n    address sourcePoolAddress;\\n    // The EVM address of the destination token\\n    // This value is UNTRUSTED as any pool owner can return whatever value they want.\\n    bytes destTokenAddress;\\n    // Optional pool data to be transferred to the destination chain. Be default this is capped at\\n    // CCIP_LOCK_OR_BURN_V1_RET_BYTES bytes. If more data is required, the TokenTransferFeeConfig.destBytesOverhead\\n    // has to be set for the specific token.\\n    bytes extraData;\\n    uint256 amount; // Amount of tokens.\\n    // Destination chain specific execution data encoded in bytes\\n    // for an EVM destination, it consists of the amount of gas available for the releaseOrMint\\n    // and transfer calls made by the offRamp\\n    bytes destExecData;\\n  }\\n\\n  struct Any2EVMTokenTransfer {\\n    // The source pool EVM address encoded to bytes. This value is trusted as it is obtained through the onRamp. It can be\\n    // relied upon by the destination pool to validate the source pool.\\n    bytes sourcePoolAddress;\\n    address destTokenAddress; // ───╮ Address of destination token\\n    uint32 destGasAmount; //────────╯ The amount of gas available for the releaseOrMint and transfer calls on the offRamp.\\n    // Optional pool data to be transferred to the destination chain. Be default this is capped at\\n    // CCIP_LOCK_OR_BURN_V1_RET_BYTES bytes. If more data is required, the TokenTransferFeeConfig.destBytesOverhead\\n    // has to be set for the specific token.\\n    bytes extraData;\\n    uint256 amount; // Amount of tokens.\\n  }\\n\\n  /// @notice Family-agnostic message routed to an OffRamp\\n  /// Note: hash(Any2EVMRampMessage) != hash(EVM2AnyRampMessage), hash(Any2EVMRampMessage) != messageId\\n  /// due to encoding & parameter differences\\n  struct Any2EVMRampMessage {\\n    RampMessageHeader header; // Message header\\n    bytes sender; // sender address on the source chain\\n    bytes data; // arbitrary data payload supplied by the message sender\\n    address receiver; // receiver address on the destination chain\\n    uint256 gasLimit; // user supplied maximum gas amount available for dest chain execution\\n    Any2EVMTokenTransfer[] tokenAmounts; // array of tokens and amounts to transfer\\n  }\\n\\n  /// @notice Family-agnostic message emitted from the OnRamp\\n  /// Note: hash(Any2EVMRampMessage) != hash(EVM2AnyRampMessage) due to encoding & parameter differences\\n  /// messageId = hash(EVM2AnyRampMessage) using the source EVM chain's encoding format\\n  struct EVM2AnyRampMessage {\\n    RampMessageHeader header; // Message header\\n    address sender; // sender address on the source chain\\n    bytes data; // arbitrary data payload supplied by the message sender\\n    bytes receiver; // receiver address on the destination chain\\n    bytes extraArgs; // destination-chain specific extra args, such as the gasLimit for EVM chains\\n    address feeToken; // fee token\\n    uint256 feeTokenAmount; // fee token amount\\n    uint256 feeValueJuels; // fee amount in Juels\\n    EVM2AnyTokenTransfer[] tokenAmounts; // array of tokens and amounts to transfer\\n  }\\n\\n  // bytes4(keccak256(\\\"CCIP ChainFamilySelector EVM\\\"))\\n  bytes4 public constant CHAIN_FAMILY_SELECTOR_EVM = 0x2812d52c;\\n\\n  /// @dev Struct to hold a merkle root and an interval for a source chain so that an array of these can be passed in the CommitReport.\\n  /// @dev RMN depends on this struct, if changing, please notify the RMN maintainers.\\n  /// @dev ineffiecient struct packing intentionally chosen to maintain order of specificity. Not a storage struct so impact is minimal.\\n  // solhint-disable-next-line gas-struct-packing\\n  struct MerkleRoot {\\n    uint64 sourceChainSelector; //     Remote source chain selector that the Merkle Root is scoped to\\n    bytes onRampAddress; //            Generic onramp address, to support arbitrary sources; for EVM, use abi.encode\\n    uint64 minSeqNr; // ─────────────╮ Minimum sequence number, inclusive\\n    uint64 maxSeqNr; // ─────────────╯ Maximum sequence number, inclusive\\n    bytes32 merkleRoot; //             Merkle root covering the interval & source chain messages\\n  }\\n}\\n\"\n    },\n    \"@chainlink/contracts-ccip/src/v0.8/ccip/libraries/MerkleMultiProof.sol\": {\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.4;\\n\\nlibrary MerkleMultiProof {\\n  /// @notice Leaf domain separator, should be used as the first 32 bytes of a leaf's preimage.\\n  bytes32 internal constant LEAF_DOMAIN_SEPARATOR = 0x0000000000000000000000000000000000000000000000000000000000000000;\\n  /// @notice Internal domain separator, should be used as the first 32 bytes of an internal node's preiimage.\\n  bytes32 internal constant INTERNAL_DOMAIN_SEPARATOR =\\n    0x0000000000000000000000000000000000000000000000000000000000000001;\\n\\n  uint256 internal constant MAX_NUM_HASHES = 256;\\n\\n  error InvalidProof();\\n  error LeavesCannotBeEmpty();\\n\\n  /// @notice Computes the root based on provided pre-hashed leaf nodes in\\n  /// leaves, internal nodes in proofs, and using proofFlagBits' i-th bit to\\n  /// determine if an element of proofs or one of the previously computed leafs\\n  /// or internal nodes will be used for the i-th hash.\\n  /// @param leaves Should be pre-hashed and the first 32 bytes of a leaf's\\n  /// preimage should match LEAF_DOMAIN_SEPARATOR.\\n  /// @param proofs The hashes to be used instead of a leaf hash when the proofFlagBits\\n  ///  indicates a proof should be used.\\n  /// @param proofFlagBits A single uint256 of which each bit indicates whether a leaf or\\n  ///  a proof needs to be used in a hash operation.\\n  /// @dev the maximum number of hash operations it set to 256. Any input that would require\\n  ///  more than 256 hashes to get to a root will revert.\\n  /// @dev For given input `leaves` = [a,b,c] `proofs` = [D] and `proofFlagBits` = 5\\n  ///     totalHashes = 3 + 1 - 1 = 3\\n  ///  ** round 1 **\\n  ///    proofFlagBits = (5 >> 0) & 1 = true\\n  ///    hashes[0] = hashPair(a, b)\\n  ///    (leafPos, hashPos, proofPos) = (2, 0, 0);\\n  ///\\n  ///  ** round 2 **\\n  ///    proofFlagBits = (5 >> 1) & 1 = false\\n  ///    hashes[1] = hashPair(D, c)\\n  ///    (leafPos, hashPos, proofPos) = (3, 0, 1);\\n  ///\\n  ///  ** round 3 **\\n  ///    proofFlagBits = (5 >> 2) & 1 = true\\n  ///    hashes[2] = hashPair(hashes[0], hashes[1])\\n  ///    (leafPos, hashPos, proofPos) = (3, 2, 1);\\n  ///\\n  ///    i = 3 and no longer < totalHashes. The algorithm is done\\n  ///    return hashes[totalHashes - 1] = hashes[2]; the last hash we computed.\\n  // We mark this function as internal to force it to be inlined in contracts\\n  // that use it, but semantically it is public.\\n  // solhint-disable-next-line chainlink-solidity/prefix-internal-functions-with-underscore\\n  function merkleRoot(\\n    bytes32[] memory leaves,\\n    bytes32[] memory proofs,\\n    uint256 proofFlagBits\\n  ) internal pure returns (bytes32) {\\n    unchecked {\\n      uint256 leavesLen = leaves.length;\\n      uint256 proofsLen = proofs.length;\\n      if (leavesLen == 0) revert LeavesCannotBeEmpty();\\n      if (!(leavesLen <= MAX_NUM_HASHES + 1 && proofsLen <= MAX_NUM_HASHES + 1)) revert InvalidProof();\\n      uint256 totalHashes = leavesLen + proofsLen - 1;\\n      if (!(totalHashes <= MAX_NUM_HASHES)) revert InvalidProof();\\n      if (totalHashes == 0) {\\n        return leaves[0];\\n      }\\n      bytes32[] memory hashes = new bytes32[](totalHashes);\\n      (uint256 leafPos, uint256 hashPos, uint256 proofPos) = (0, 0, 0);\\n\\n      for (uint256 i = 0; i < totalHashes; ++i) {\\n        // Checks if the bit flag signals the use of a supplied proof or a leaf/previous hash.\\n        bytes32 a;\\n        if (proofFlagBits & (1 << i) == (1 << i)) {\\n          // Use a leaf or a previously computed hash.\\n          if (leafPos < leavesLen) {\\n            a = leaves[leafPos++];\\n          } else {\\n            a = hashes[hashPos++];\\n          }\\n        } else {\\n          // Use a supplied proof.\\n          a = proofs[proofPos++];\\n        }\\n\\n        // The second part of the hashed pair is never a proof as hashing two proofs would result in a\\n        // hash that can already be computed offchain.\\n        bytes32 b;\\n        if (leafPos < leavesLen) {\\n          b = leaves[leafPos++];\\n        } else {\\n          b = hashes[hashPos++];\\n        }\\n\\n        if (!(hashPos <= i)) revert InvalidProof();\\n\\n        hashes[i] = _hashPair(a, b);\\n      }\\n      if (!(hashPos == totalHashes - 1 && leafPos == leavesLen && proofPos == proofsLen)) revert InvalidProof();\\n      // Return the last hash.\\n      return hashes[totalHashes - 1];\\n    }\\n  }\\n\\n  /// @notice Hashes two bytes32 objects in their given order, prepended by the\\n  /// INTERNAL_DOMAIN_SEPARATOR.\\n  function _hashInternalNode(bytes32 left, bytes32 right) private pure returns (bytes32 hash) {\\n    return keccak256(abi.encode(INTERNAL_DOMAIN_SEPARATOR, left, right));\\n  }\\n\\n  /// @notice Hashes two bytes32 objects. The order is taken into account,\\n  /// using the lower value first.\\n  function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {\\n    return a < b ? _hashInternalNode(a, b) : _hashInternalNode(b, a);\\n  }\\n}\\n\"\n    },\n    \"@chainlink/contracts-ccip/src/v0.8/ccip/test/mocks/MockRouter.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport {IAny2EVMMessageReceiver} from \\\"../../interfaces/IAny2EVMMessageReceiver.sol\\\";\\nimport {IRouter} from \\\"../../interfaces/IRouter.sol\\\";\\nimport {IRouterClient} from \\\"../../interfaces/IRouterClient.sol\\\";\\n\\nimport {CallWithExactGas} from \\\"../../../shared/call/CallWithExactGas.sol\\\";\\nimport {Client} from \\\"../../libraries/Client.sol\\\";\\nimport {Internal} from \\\"../../libraries/Internal.sol\\\";\\n\\nimport {IERC20} from \\\"../../../vendor/openzeppelin-solidity/v4.8.3/contracts/token/ERC20/IERC20.sol\\\";\\nimport {SafeERC20} from \\\"../../../vendor/openzeppelin-solidity/v4.8.3/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {ERC165Checker} from\\n  \\\"../../../vendor/openzeppelin-solidity/v5.0.2/contracts/utils/introspection/ERC165Checker.sol\\\";\\n\\ncontract MockCCIPRouter is IRouter, IRouterClient {\\n  using SafeERC20 for IERC20;\\n  using ERC165Checker for address;\\n\\n  error InvalidAddress(bytes encodedAddress);\\n  error InvalidExtraArgsTag();\\n  error ReceiverError(bytes err);\\n\\n  event MessageExecuted(bytes32 messageId, uint64 sourceChainSelector, address offRamp, bytes32 calldataHash);\\n  event MsgExecuted(bool success, bytes retData, uint256 gasUsed);\\n\\n  uint16 public constant GAS_FOR_CALL_EXACT_CHECK = 5_000;\\n  uint32 public constant DEFAULT_GAS_LIMIT = 200_000;\\n\\n  uint256 internal s_mockFeeTokenAmount; //use setFee() to change to non-zero to test fees\\n\\n  function routeMessage(\\n    Client.Any2EVMMessage calldata message,\\n    uint16 gasForCallExactCheck,\\n    uint256 gasLimit,\\n    address receiver\\n  ) external returns (bool success, bytes memory retData, uint256 gasUsed) {\\n    return _routeMessage(message, gasForCallExactCheck, gasLimit, receiver);\\n  }\\n\\n  function _routeMessage(\\n    Client.Any2EVMMessage memory message,\\n    uint16 gasForCallExactCheck,\\n    uint256 gasLimit,\\n    address receiver\\n  ) internal returns (bool success, bytes memory retData, uint256 gasUsed) {\\n    // There are three cases in which we skip calling the receiver:\\n    // 1. If the message data is empty AND the gas limit is 0.\\n    //          This indicates a message that only transfers tokens. It is valid to only send tokens to a contract\\n    //          that supports the IAny2EVMMessageReceiver interface, but without this first check we would call the\\n    //          receiver without any gas, which would revert the transaction.\\n    // 2. If the receiver is not a contract.\\n    // 3. If the receiver is a contract but it does not support the IAny2EVMMessageReceiver interface.\\n    //\\n    // The ordering of these checks is important, as the first check is the cheapest to execute.\\n    if (\\n      (message.data.length == 0 && gasLimit == 0) || receiver.code.length == 0\\n        || !receiver.supportsInterface(type(IAny2EVMMessageReceiver).interfaceId)\\n    ) {\\n      return (true, \\\"\\\", 0);\\n    }\\n\\n    bytes memory data = abi.encodeWithSelector(IAny2EVMMessageReceiver.ccipReceive.selector, message);\\n\\n    (success, retData, gasUsed) = CallWithExactGas._callWithExactGasSafeReturnData(\\n      data, receiver, gasLimit, gasForCallExactCheck, Internal.MAX_RET_BYTES\\n    );\\n\\n    // Event to assist testing, does not exist on real deployments\\n    emit MsgExecuted(success, retData, gasUsed);\\n\\n    // Real router event\\n    emit MessageExecuted(message.messageId, message.sourceChainSelector, msg.sender, keccak256(data));\\n    return (success, retData, gasUsed);\\n  }\\n\\n  /// @notice Sends the tx locally to the receiver instead of on the destination chain.\\n  /// @dev Ignores destinationChainSelector\\n  /// @dev Returns a mock message ID, which is not calculated from the message contents in the\\n  /// same way as the real message ID.\\n  function ccipSend(\\n    uint64 destinationChainSelector,\\n    Client.EVM2AnyMessage calldata message\\n  ) external payable returns (bytes32) {\\n    if (message.receiver.length != 32) revert InvalidAddress(message.receiver);\\n    uint256 decodedReceiver = abi.decode(message.receiver, (uint256));\\n    // We want to disallow sending to address(0) and to precompiles, which exist on address(1) through address(9).\\n    if (decodedReceiver > type(uint160).max || decodedReceiver < 10) revert InvalidAddress(message.receiver);\\n\\n    uint256 feeTokenAmount = getFee(destinationChainSelector, message);\\n    if (message.feeToken == address(0)) {\\n      if (msg.value < feeTokenAmount) revert InsufficientFeeTokenAmount();\\n    } else {\\n      if (msg.value > 0) revert InvalidMsgValue();\\n      IERC20(message.feeToken).safeTransferFrom(msg.sender, address(this), feeTokenAmount);\\n    }\\n\\n    address receiver = address(uint160(decodedReceiver));\\n    uint256 gasLimit = _fromBytes(message.extraArgs).gasLimit;\\n    bytes32 mockMsgId = keccak256(abi.encode(message));\\n\\n    Client.Any2EVMMessage memory executableMsg = Client.Any2EVMMessage({\\n      messageId: mockMsgId,\\n      sourceChainSelector: 16015286601757825753, // Sepolia\\n      sender: abi.encode(msg.sender),\\n      data: message.data,\\n      destTokenAmounts: message.tokenAmounts\\n    });\\n\\n    for (uint256 i = 0; i < message.tokenAmounts.length; ++i) {\\n      IERC20(message.tokenAmounts[i].token).safeTransferFrom(msg.sender, receiver, message.tokenAmounts[i].amount);\\n    }\\n\\n    (bool success, bytes memory retData,) = _routeMessage(executableMsg, GAS_FOR_CALL_EXACT_CHECK, gasLimit, receiver);\\n\\n    if (!success) revert ReceiverError(retData);\\n\\n    return mockMsgId;\\n  }\\n\\n  function _fromBytes(bytes calldata extraArgs) internal pure returns (Client.EVMExtraArgsV1 memory) {\\n    if (extraArgs.length == 0) {\\n      return Client.EVMExtraArgsV1({gasLimit: DEFAULT_GAS_LIMIT});\\n    }\\n    if (bytes4(extraArgs) != Client.EVM_EXTRA_ARGS_V1_TAG) revert InvalidExtraArgsTag();\\n    return abi.decode(extraArgs[4:], (Client.EVMExtraArgsV1));\\n  }\\n\\n  /// @notice Always returns true to make sure this check can be performed on any chain.\\n  function isChainSupported(uint64) external pure returns (bool supported) {\\n    return true;\\n  }\\n\\n  /// @notice Returns an empty array.\\n  function getSupportedTokens(uint64) external pure returns (address[] memory tokens) {\\n    return new address[](0);\\n  }\\n\\n  /// @notice Returns 0 as the fee is not supported in this mock contract.\\n  function getFee(uint64, Client.EVM2AnyMessage memory) public view returns (uint256) {\\n    return s_mockFeeTokenAmount;\\n  }\\n\\n  /// @notice Sets the fees returned by getFee but is only checked when using native fee tokens\\n  function setFee(uint256 feeAmount) external {\\n    s_mockFeeTokenAmount = feeAmount;\\n  }\\n\\n  /// @notice Always returns address(1234567890)\\n  function getOnRamp(uint64 /* destChainSelector */ ) external pure returns (address onRampAddress) {\\n    return address(1234567890);\\n  }\\n\\n  /// @notice Always returns true\\n  function isOffRamp(uint64, /* sourceChainSelector */ address /* offRamp */ ) external pure returns (bool) {\\n    return true;\\n  }\\n}\\n\"\n    },\n    \"@chainlink/contracts-ccip/src/v0.8/shared/access/ConfirmedOwner.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {ConfirmedOwnerWithProposal} from \\\"./ConfirmedOwnerWithProposal.sol\\\";\\n\\n/// @title The ConfirmedOwner contract\\n/// @notice A contract with helpers for basic contract ownership.\\ncontract ConfirmedOwner is ConfirmedOwnerWithProposal {\\n  constructor(address newOwner) ConfirmedOwnerWithProposal(newOwner, address(0)) {}\\n}\\n\"\n    },\n    \"@chainlink/contracts-ccip/src/v0.8/shared/access/ConfirmedOwnerWithProposal.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {IOwnable} from \\\"../interfaces/IOwnable.sol\\\";\\n\\n/// @title The ConfirmedOwner contract\\n/// @notice A contract with helpers for basic contract ownership.\\ncontract ConfirmedOwnerWithProposal is IOwnable {\\n  address private s_owner;\\n  address private s_pendingOwner;\\n\\n  event OwnershipTransferRequested(address indexed from, address indexed to);\\n  event OwnershipTransferred(address indexed from, address indexed to);\\n\\n  constructor(address newOwner, address pendingOwner) {\\n    // solhint-disable-next-line gas-custom-errors\\n    require(newOwner != address(0), \\\"Cannot set owner to zero\\\");\\n\\n    s_owner = newOwner;\\n    if (pendingOwner != address(0)) {\\n      _transferOwnership(pendingOwner);\\n    }\\n  }\\n\\n  /// @notice Allows an owner to begin transferring ownership to a new address.\\n  function transferOwnership(address to) public override onlyOwner {\\n    _transferOwnership(to);\\n  }\\n\\n  /// @notice Allows an ownership transfer to be completed by the recipient.\\n  function acceptOwnership() external override {\\n    // solhint-disable-next-line gas-custom-errors\\n    require(msg.sender == s_pendingOwner, \\\"Must be proposed owner\\\");\\n\\n    address oldOwner = s_owner;\\n    s_owner = msg.sender;\\n    s_pendingOwner = address(0);\\n\\n    emit OwnershipTransferred(oldOwner, msg.sender);\\n  }\\n\\n  /// @notice Get the current owner\\n  function owner() public view override returns (address) {\\n    return s_owner;\\n  }\\n\\n  /// @notice validate, transfer ownership, and emit relevant events\\n  function _transferOwnership(address to) private {\\n    // solhint-disable-next-line gas-custom-errors\\n    require(to != msg.sender, \\\"Cannot transfer to self\\\");\\n\\n    s_pendingOwner = to;\\n\\n    emit OwnershipTransferRequested(s_owner, to);\\n  }\\n\\n  /// @notice validate access\\n  function _validateOwnership() internal view {\\n    // solhint-disable-next-line gas-custom-errors\\n    require(msg.sender == s_owner, \\\"Only callable by owner\\\");\\n  }\\n\\n  /// @notice Reverts if called by anyone other than the contract owner.\\n  modifier onlyOwner() {\\n    _validateOwnership();\\n    _;\\n  }\\n}\\n\"\n    },\n    \"@chainlink/contracts-ccip/src/v0.8/shared/access/OwnerIsCreator.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {ConfirmedOwner} from \\\"./ConfirmedOwner.sol\\\";\\n\\n/// @title The OwnerIsCreator contract\\n/// @notice A contract with helpers for basic contract ownership.\\ncontract OwnerIsCreator is ConfirmedOwner {\\n  constructor() ConfirmedOwner(msg.sender) {}\\n}\\n\"\n    },\n    \"@chainlink/contracts-ccip/src/v0.8/shared/call/CallWithExactGas.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/// @notice This library contains various callWithExactGas functions. All of them are\\n/// safe from gas bomb attacks.\\n/// @dev There is code duplication in this library. This is done to not leave the assembly\\n/// the blocks.\\nlibrary CallWithExactGas {\\n  error NoContract();\\n  error NoGasForCallExactCheck();\\n  error NotEnoughGasForCall();\\n\\n  bytes4 internal constant NO_CONTRACT_SIG = 0x0c3b563c;\\n  bytes4 internal constant NO_GAS_FOR_CALL_EXACT_CHECK_SIG = 0xafa32a2c;\\n  bytes4 internal constant NOT_ENOUGH_GAS_FOR_CALL_SIG = 0x37c3be29;\\n\\n  /// @notice calls target address with exactly gasAmount gas and payload as calldata.\\n  /// Accounts for gasForCallExactCheck gas that will be used by this function. Will revert\\n  /// if the target is not a contact. Will revert when there is not enough gas to call the\\n  /// target with gasAmount gas.\\n  /// @dev Ignores the return data, which makes it immune to gas bomb attacks.\\n  /// @return success whether the call succeeded\\n  function _callWithExactGas(\\n    bytes memory payload,\\n    address target,\\n    uint256 gasLimit,\\n    uint16 gasForCallExactCheck\\n  ) internal returns (bool success) {\\n    assembly {\\n      // solidity calls check that a contract actually exists at the destination, so we do the same\\n      // Note we do this check prior to measuring gas so gasForCallExactCheck (our \\\"cushion\\\")\\n      // doesn't need to account for it.\\n      if iszero(extcodesize(target)) {\\n        mstore(0x0, NO_CONTRACT_SIG)\\n        revert(0x0, 0x4)\\n      }\\n\\n      let g := gas()\\n      // Compute g -= gasForCallExactCheck and check for underflow\\n      // The gas actually passed to the callee is _min(gasAmount, 63//64*gas available).\\n      // We want to ensure that we revert if gasAmount >  63//64*gas available\\n      // as we do not want to provide them with less, however that check itself costs\\n      // gas. gasForCallExactCheck ensures we have at least enough gas to be able\\n      // to revert if gasAmount >  63//64*gas available.\\n      if lt(g, gasForCallExactCheck) {\\n        mstore(0x0, NO_GAS_FOR_CALL_EXACT_CHECK_SIG)\\n        revert(0x0, 0x4)\\n      }\\n      g := sub(g, gasForCallExactCheck)\\n      // if g - g//64 <= gasAmount, revert. We subtract g//64 because of EIP-150\\n      if iszero(gt(sub(g, div(g, 64)), gasLimit)) {\\n        mstore(0x0, NOT_ENOUGH_GAS_FOR_CALL_SIG)\\n        revert(0x0, 0x4)\\n      }\\n\\n      // call and return whether we succeeded. ignore return data\\n      // call(gas,addr,value,argsOffset,argsLength,retOffset,retLength)\\n      success := call(gasLimit, target, 0, add(payload, 0x20), mload(payload), 0x0, 0x0)\\n    }\\n    return success;\\n  }\\n\\n  /// @notice calls target address with exactly gasAmount gas and payload as calldata.\\n  /// Account for gasForCallExactCheck gas that will be used by this function. Will revert\\n  /// if the target is not a contact. Will revert when there is not enough gas to call the\\n  /// target with gasAmount gas.\\n  /// @dev Caps the return data length, which makes it immune to gas bomb attacks.\\n  /// @dev Return data cap logic borrowed from\\n  /// https://github.com/nomad-xyz/ExcessivelySafeCall/blob/main/src/ExcessivelySafeCall.sol.\\n  /// @return success whether the call succeeded\\n  /// @return retData the return data from the call, capped at maxReturnBytes bytes\\n  /// @return gasUsed the gas used by the external call. Does not include the overhead of this function.\\n  function _callWithExactGasSafeReturnData(\\n    bytes memory payload,\\n    address target,\\n    uint256 gasLimit,\\n    uint16 gasForCallExactCheck,\\n    uint16 maxReturnBytes\\n  ) internal returns (bool success, bytes memory retData, uint256 gasUsed) {\\n    // allocate retData memory ahead of time\\n    retData = new bytes(maxReturnBytes);\\n\\n    assembly {\\n      // solidity calls check that a contract actually exists at the destination, so we do the same\\n      // Note we do this check prior to measuring gas so gasForCallExactCheck (our \\\"cushion\\\")\\n      // doesn't need to account for it.\\n      if iszero(extcodesize(target)) {\\n        mstore(0x0, NO_CONTRACT_SIG)\\n        revert(0x0, 0x4)\\n      }\\n\\n      let g := gas()\\n      // Compute g -= gasForCallExactCheck and check for underflow\\n      // The gas actually passed to the callee is _min(gasAmount, 63//64*gas available).\\n      // We want to ensure that we revert if gasAmount >  63//64*gas available\\n      // as we do not want to provide them with less, however that check itself costs\\n      // gas. gasForCallExactCheck ensures we have at least enough gas to be able\\n      // to revert if gasAmount >  63//64*gas available.\\n      if lt(g, gasForCallExactCheck) {\\n        mstore(0x0, NO_GAS_FOR_CALL_EXACT_CHECK_SIG)\\n        revert(0x0, 0x4)\\n      }\\n      g := sub(g, gasForCallExactCheck)\\n      // if g - g//64 <= gasAmount, revert. We subtract g//64 because of EIP-150\\n      if iszero(gt(sub(g, div(g, 64)), gasLimit)) {\\n        mstore(0x0, NOT_ENOUGH_GAS_FOR_CALL_SIG)\\n        revert(0x0, 0x4)\\n      }\\n\\n      // We save the gas before the call so we can calculate how much gas the call used\\n      let gasBeforeCall := gas()\\n      // call and return whether we succeeded. ignore return data\\n      // call(gas,addr,value,argsOffset,argsLength,retOffset,retLength)\\n      success := call(gasLimit, target, 0, add(payload, 0x20), mload(payload), 0x0, 0x0)\\n      gasUsed := sub(gasBeforeCall, gas())\\n\\n      // limit our copy to maxReturnBytes bytes\\n      let toCopy := returndatasize()\\n      if gt(toCopy, maxReturnBytes) {\\n        toCopy := maxReturnBytes\\n      }\\n      // Store the length of the copied bytes\\n      mstore(retData, toCopy)\\n      // copy the bytes from retData[0:_toCopy]\\n      returndatacopy(add(retData, 0x20), 0x0, toCopy)\\n    }\\n    return (success, retData, gasUsed);\\n  }\\n\\n  /// @notice Calls target address with exactly gasAmount gas and payload as calldata\\n  /// or reverts if at least gasLimit gas is not available.\\n  /// @dev Does not check if target is a contract. If it is not a contract, the low-level\\n  /// call will still be made and it will succeed.\\n  /// @dev Ignores the return data, which makes it immune to gas bomb attacks.\\n  /// @return success whether the call succeeded\\n  /// @return sufficientGas Whether there was enough gas to make the call\\n  function _callWithExactGasEvenIfTargetIsNoContract(\\n    bytes memory payload,\\n    address target,\\n    uint256 gasLimit,\\n    uint16 gasForCallExactCheck\\n  ) internal returns (bool success, bool sufficientGas) {\\n    assembly {\\n      let g := gas()\\n      // Compute g -= CALL_WITH_EXACT_GAS_CUSHION and check for underflow. We\\n      // need the cushion since the logic following the above call to gas also\\n      // costs gas which we cannot account for exactly. So cushion is a\\n      // conservative upper bound for the cost of this logic.\\n      if iszero(lt(g, gasForCallExactCheck)) {\\n        g := sub(g, gasForCallExactCheck)\\n        // If g - g//64 <= gasAmount, we don't have enough gas. We subtract g//64 because of EIP-150.\\n        if gt(sub(g, div(g, 64)), gasLimit) {\\n          // Call and ignore success/return data. Note that we did not check\\n          // whether a contract actually exists at the target address.\\n          success := call(gasLimit, target, 0, add(payload, 0x20), mload(payload), 0x0, 0x0)\\n          sufficientGas := true\\n        }\\n      }\\n    }\\n    return (success, sufficientGas);\\n  }\\n}\\n\"\n    },\n    \"@chainlink/contracts-ccip/src/v0.8/shared/interfaces/IERC677Receiver.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.6;\\n\\ninterface IERC677Receiver {\\n  function onTokenTransfer(address sender, uint256 amount, bytes calldata data) external;\\n}\\n\"\n    },\n    \"@chainlink/contracts-ccip/src/v0.8/shared/interfaces/IOwnable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IOwnable {\\n  function owner() external returns (address);\\n\\n  function transferOwnership(address recipient) external;\\n\\n  function acceptOwnership() external;\\n}\\n\"\n    },\n    \"@chainlink/contracts-ccip/src/v0.8/shared/token/ERC20/IBurnMintERC20.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {IERC20} from \\\"../../../vendor/openzeppelin-solidity/v4.8.3/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IBurnMintERC20 is IERC20 {\\n  /// @notice Mints new tokens for a given address.\\n  /// @param account The address to mint the new tokens to.\\n  /// @param amount The number of tokens to be minted.\\n  /// @dev this function increases the total supply.\\n  function mint(address account, uint256 amount) external;\\n\\n  /// @notice Burns tokens from the sender.\\n  /// @param amount The number of tokens to be burned.\\n  /// @dev this function decreases the total supply.\\n  function burn(uint256 amount) external;\\n\\n  /// @notice Burns tokens from a given address..\\n  /// @param account The address to burn tokens from.\\n  /// @param amount The number of tokens to be burned.\\n  /// @dev this function decreases the total supply.\\n  function burn(address account, uint256 amount) external;\\n\\n  /// @notice Burns tokens from a given address..\\n  /// @param account The address to burn tokens from.\\n  /// @param amount The number of tokens to be burned.\\n  /// @dev this function decreases the total supply.\\n  function burnFrom(address account, uint256 amount) external;\\n}\\n\"\n    },\n    \"@chainlink/contracts-ccip/src/v0.8/shared/token/ERC677/BurnMintERC677.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {IBurnMintERC20} from \\\"../ERC20/IBurnMintERC20.sol\\\";\\nimport {IERC677} from \\\"./IERC677.sol\\\";\\n\\nimport {ERC677} from \\\"./ERC677.sol\\\";\\nimport {OwnerIsCreator} from \\\"../../access/OwnerIsCreator.sol\\\";\\n\\nimport {ERC20Burnable} from \\\"../../../vendor/openzeppelin-solidity/v4.8.3/contracts/token/ERC20/extensions/ERC20Burnable.sol\\\";\\nimport {EnumerableSet} from \\\"../../../vendor/openzeppelin-solidity/v4.8.3/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport {IERC165} from \\\"../../../vendor/openzeppelin-solidity/v4.8.3/contracts/utils/introspection/IERC165.sol\\\";\\nimport {IERC20} from \\\"../../../vendor/openzeppelin-solidity/v4.8.3/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/// @notice A basic ERC677 compatible token contract with burn and minting roles.\\n/// @dev The total supply can be limited during deployment.\\ncontract BurnMintERC677 is IBurnMintERC20, ERC677, IERC165, ERC20Burnable, OwnerIsCreator {\\n  using EnumerableSet for EnumerableSet.AddressSet;\\n\\n  error SenderNotMinter(address sender);\\n  error SenderNotBurner(address sender);\\n  error MaxSupplyExceeded(uint256 supplyAfterMint);\\n\\n  event MintAccessGranted(address indexed minter);\\n  event BurnAccessGranted(address indexed burner);\\n  event MintAccessRevoked(address indexed minter);\\n  event BurnAccessRevoked(address indexed burner);\\n\\n  // @dev the allowed minter addresses\\n  EnumerableSet.AddressSet internal s_minters;\\n  // @dev the allowed burner addresses\\n  EnumerableSet.AddressSet internal s_burners;\\n\\n  /// @dev The number of decimals for the token\\n  uint8 internal immutable i_decimals;\\n\\n  /// @dev The maximum supply of the token, 0 if unlimited\\n  uint256 internal immutable i_maxSupply;\\n\\n  constructor(string memory name, string memory symbol, uint8 decimals_, uint256 maxSupply_) ERC677(name, symbol) {\\n    i_decimals = decimals_;\\n    i_maxSupply = maxSupply_;\\n  }\\n\\n  function supportsInterface(bytes4 interfaceId) public pure virtual override returns (bool) {\\n    return\\n      interfaceId == type(IERC20).interfaceId ||\\n      interfaceId == type(IERC677).interfaceId ||\\n      interfaceId == type(IBurnMintERC20).interfaceId ||\\n      interfaceId == type(IERC165).interfaceId;\\n  }\\n\\n  // ================================================================\\n  // |                            ERC20                             |\\n  // ================================================================\\n\\n  /// @dev Returns the number of decimals used in its user representation.\\n  function decimals() public view virtual override returns (uint8) {\\n    return i_decimals;\\n  }\\n\\n  /// @dev Returns the max supply of the token, 0 if unlimited.\\n  function maxSupply() public view virtual returns (uint256) {\\n    return i_maxSupply;\\n  }\\n\\n  /// @dev Uses OZ ERC20 _transfer to disallow sending to address(0).\\n  /// @dev Disallows sending to address(this)\\n  function _transfer(address from, address to, uint256 amount) internal virtual override validAddress(to) {\\n    super._transfer(from, to, amount);\\n  }\\n\\n  /// @dev Uses OZ ERC20 _approve to disallow approving for address(0).\\n  /// @dev Disallows approving for address(this)\\n  function _approve(address owner, address spender, uint256 amount) internal virtual override validAddress(spender) {\\n    super._approve(owner, spender, amount);\\n  }\\n\\n  /// @dev Exists to be backwards compatible with the older naming convention.\\n  function decreaseApproval(address spender, uint256 subtractedValue) external returns (bool success) {\\n    return decreaseAllowance(spender, subtractedValue);\\n  }\\n\\n  /// @dev Exists to be backwards compatible with the older naming convention.\\n  function increaseApproval(address spender, uint256 addedValue) external {\\n    increaseAllowance(spender, addedValue);\\n  }\\n\\n  /// @notice Check if recipient is valid (not this contract address).\\n  /// @param recipient the account we transfer/approve to.\\n  /// @dev Reverts with an empty revert to be compatible with the existing link token when\\n  /// the recipient is this contract address.\\n  modifier validAddress(address recipient) virtual {\\n    // solhint-disable-next-line reason-string, gas-custom-errors\\n    if (recipient == address(this)) revert();\\n    _;\\n  }\\n\\n  // ================================================================\\n  // |                      Burning & minting                       |\\n  // ================================================================\\n\\n  /// @inheritdoc ERC20Burnable\\n  /// @dev Uses OZ ERC20 _burn to disallow burning from address(0).\\n  /// @dev Decreases the total supply.\\n  function burn(uint256 amount) public override(IBurnMintERC20, ERC20Burnable) onlyBurner {\\n    super.burn(amount);\\n  }\\n\\n  /// @inheritdoc IBurnMintERC20\\n  /// @dev Alias for BurnFrom for compatibility with the older naming convention.\\n  /// @dev Uses burnFrom for all validation & logic.\\n  function burn(address account, uint256 amount) public virtual override {\\n    burnFrom(account, amount);\\n  }\\n\\n  /// @inheritdoc ERC20Burnable\\n  /// @dev Uses OZ ERC20 _burn to disallow burning from address(0).\\n  /// @dev Decreases the total supply.\\n  function burnFrom(address account, uint256 amount) public override(IBurnMintERC20, ERC20Burnable) onlyBurner {\\n    super.burnFrom(account, amount);\\n  }\\n\\n  /// @inheritdoc IBurnMintERC20\\n  /// @dev Uses OZ ERC20 _mint to disallow minting to address(0).\\n  /// @dev Disallows minting to address(this)\\n  /// @dev Increases the total supply.\\n  function mint(address account, uint256 amount) external override onlyMinter validAddress(account) {\\n    if (i_maxSupply != 0 && totalSupply() + amount > i_maxSupply) revert MaxSupplyExceeded(totalSupply() + amount);\\n\\n    _mint(account, amount);\\n  }\\n\\n  // ================================================================\\n  // |                            Roles                             |\\n  // ================================================================\\n\\n  /// @notice grants both mint and burn roles to `burnAndMinter`.\\n  /// @dev calls public functions so this function does not require\\n  /// access controls. This is handled in the inner functions.\\n  function grantMintAndBurnRoles(address burnAndMinter) external {\\n    grantMintRole(burnAndMinter);\\n    grantBurnRole(burnAndMinter);\\n  }\\n\\n  /// @notice Grants mint role to the given address.\\n  /// @dev only the owner can call this function.\\n  function grantMintRole(address minter) public onlyOwner {\\n    if (s_minters.add(minter)) {\\n      emit MintAccessGranted(minter);\\n    }\\n  }\\n\\n  /// @notice Grants burn role to the given address.\\n  /// @dev only the owner can call this function.\\n  function grantBurnRole(address burner) public onlyOwner {\\n    if (s_burners.add(burner)) {\\n      emit BurnAccessGranted(burner);\\n    }\\n  }\\n\\n  /// @notice Revokes mint role for the given address.\\n  /// @dev only the owner can call this function.\\n  function revokeMintRole(address minter) public onlyOwner {\\n    if (s_minters.remove(minter)) {\\n      emit MintAccessRevoked(minter);\\n    }\\n  }\\n\\n  /// @notice Revokes burn role from the given address.\\n  /// @dev only the owner can call this function\\n  function revokeBurnRole(address burner) public onlyOwner {\\n    if (s_burners.remove(burner)) {\\n      emit BurnAccessRevoked(burner);\\n    }\\n  }\\n\\n  /// @notice Returns all permissioned minters\\n  function getMinters() public view returns (address[] memory) {\\n    return s_minters.values();\\n  }\\n\\n  /// @notice Returns all permissioned burners\\n  function getBurners() public view returns (address[] memory) {\\n    return s_burners.values();\\n  }\\n\\n  // ================================================================\\n  // |                            Access                            |\\n  // ================================================================\\n\\n  /// @notice Checks whether a given address is a minter for this token.\\n  /// @return true if the address is allowed to mint.\\n  function isMinter(address minter) public view returns (bool) {\\n    return s_minters.contains(minter);\\n  }\\n\\n  /// @notice Checks whether a given address is a burner for this token.\\n  /// @return true if the address is allowed to burn.\\n  function isBurner(address burner) public view returns (bool) {\\n    return s_burners.contains(burner);\\n  }\\n\\n  /// @notice Checks whether the msg.sender is a permissioned minter for this token\\n  /// @dev Reverts with a SenderNotMinter if the check fails\\n  modifier onlyMinter() {\\n    if (!isMinter(msg.sender)) revert SenderNotMinter(msg.sender);\\n    _;\\n  }\\n\\n  /// @notice Checks whether the msg.sender is a permissioned burner for this token\\n  /// @dev Reverts with a SenderNotBurner if the check fails\\n  modifier onlyBurner() {\\n    if (!isBurner(msg.sender)) revert SenderNotBurner(msg.sender);\\n    _;\\n  }\\n}\\n\"\n    },\n    \"@chainlink/contracts-ccip/src/v0.8/shared/token/ERC677/ERC677.sol\": {\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.0;\\n\\nimport {IERC677} from \\\"./IERC677.sol\\\";\\nimport {IERC677Receiver} from \\\"../../interfaces/IERC677Receiver.sol\\\";\\n\\nimport {ERC20} from \\\"../../../vendor/openzeppelin-solidity/v4.8.3/contracts/token/ERC20/ERC20.sol\\\";\\n\\ncontract ERC677 is IERC677, ERC20 {\\n  constructor(string memory name, string memory symbol) ERC20(name, symbol) {}\\n\\n  /// @inheritdoc IERC677\\n  function transferAndCall(address to, uint256 amount, bytes memory data) public returns (bool success) {\\n    super.transfer(to, amount);\\n    emit Transfer(msg.sender, to, amount, data);\\n    if (to.code.length > 0) {\\n      IERC677Receiver(to).onTokenTransfer(msg.sender, amount, data);\\n    }\\n    return true;\\n  }\\n}\\n\"\n    },\n    \"@chainlink/contracts-ccip/src/v0.8/shared/token/ERC677/IERC677.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IERC677 {\\n  event Transfer(address indexed from, address indexed to, uint256 value, bytes data);\\n\\n  /// @notice Transfer tokens from `msg.sender` to another address and then call `onTransferReceived` on receiver\\n  /// @param to The address which you want to transfer to\\n  /// @param amount The amount of tokens to be transferred\\n  /// @param data bytes Additional data with no specified format, sent in call to `to`\\n  /// @return true unless throwing\\n  function transferAndCall(address to, uint256 amount, bytes memory data) external returns (bool);\\n}\\n\"\n    },\n    \"@chainlink/contracts-ccip/src/v0.8/vendor/openzeppelin-solidity/v4.8.3/contracts/token/ERC20/ERC20.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n  mapping(address => uint256) private _balances;\\n\\n  mapping(address => mapping(address => uint256)) private _allowances;\\n\\n  uint256 private _totalSupply;\\n\\n  string private _name;\\n  string private _symbol;\\n\\n  /**\\n   * @dev Sets the values for {name} and {symbol}.\\n   *\\n   * The default value of {decimals} is 18. To select a different value for\\n   * {decimals} you should overload it.\\n   *\\n   * All two of these values are immutable: they can only be set once during\\n   * construction.\\n   */\\n  constructor(string memory name_, string memory symbol_) {\\n    _name = name_;\\n    _symbol = symbol_;\\n  }\\n\\n  /**\\n   * @dev Returns the name of the token.\\n   */\\n  function name() public view virtual override returns (string memory) {\\n    return _name;\\n  }\\n\\n  /**\\n   * @dev Returns the symbol of the token, usually a shorter version of the\\n   * name.\\n   */\\n  function symbol() public view virtual override returns (string memory) {\\n    return _symbol;\\n  }\\n\\n  /**\\n   * @dev Returns the number of decimals used to get its user representation.\\n   * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n   * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n   *\\n   * Tokens usually opt for a value of 18, imitating the relationship between\\n   * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n   * overridden;\\n   *\\n   * NOTE: This information is only used for _display_ purposes: it in\\n   * no way affects any of the arithmetic of the contract, including\\n   * {IERC20-balanceOf} and {IERC20-transfer}.\\n   */\\n  function decimals() public view virtual override returns (uint8) {\\n    return 18;\\n  }\\n\\n  /**\\n   * @dev See {IERC20-totalSupply}.\\n   */\\n  function totalSupply() public view virtual override returns (uint256) {\\n    return _totalSupply;\\n  }\\n\\n  /**\\n   * @dev See {IERC20-balanceOf}.\\n   */\\n  function balanceOf(address account) public view virtual override returns (uint256) {\\n    return _balances[account];\\n  }\\n\\n  /**\\n   * @dev See {IERC20-transfer}.\\n   *\\n   * Requirements:\\n   *\\n   * - `to` cannot be the zero address.\\n   * - the caller must have a balance of at least `amount`.\\n   */\\n  function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n    address owner = _msgSender();\\n    _transfer(owner, to, amount);\\n    return true;\\n  }\\n\\n  /**\\n   * @dev See {IERC20-allowance}.\\n   */\\n  function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n    return _allowances[owner][spender];\\n  }\\n\\n  /**\\n   * @dev See {IERC20-approve}.\\n   *\\n   * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n   * `transferFrom`. This is semantically equivalent to an infinite approval.\\n   *\\n   * Requirements:\\n   *\\n   * - `spender` cannot be the zero address.\\n   */\\n  function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n    address owner = _msgSender();\\n    _approve(owner, spender, amount);\\n    return true;\\n  }\\n\\n  /**\\n   * @dev See {IERC20-transferFrom}.\\n   *\\n   * Emits an {Approval} event indicating the updated allowance. This is not\\n   * required by the EIP. See the note at the beginning of {ERC20}.\\n   *\\n   * NOTE: Does not update the allowance if the current allowance\\n   * is the maximum `uint256`.\\n   *\\n   * Requirements:\\n   *\\n   * - `from` and `to` cannot be the zero address.\\n   * - `from` must have a balance of at least `amount`.\\n   * - the caller must have allowance for ``from``'s tokens of at least\\n   * `amount`.\\n   */\\n  function transferFrom(address from, address to, uint256 amount) public virtual override returns (bool) {\\n    address spender = _msgSender();\\n    _spendAllowance(from, spender, amount);\\n    _transfer(from, to, amount);\\n    return true;\\n  }\\n\\n  /**\\n   * @dev Atomically increases the allowance granted to `spender` by the caller.\\n   *\\n   * This is an alternative to {approve} that can be used as a mitigation for\\n   * problems described in {IERC20-approve}.\\n   *\\n   * Emits an {Approval} event indicating the updated allowance.\\n   *\\n   * Requirements:\\n   *\\n   * - `spender` cannot be the zero address.\\n   */\\n  function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n    address owner = _msgSender();\\n    _approve(owner, spender, allowance(owner, spender) + addedValue);\\n    return true;\\n  }\\n\\n  /**\\n   * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n   *\\n   * This is an alternative to {approve} that can be used as a mitigation for\\n   * problems described in {IERC20-approve}.\\n   *\\n   * Emits an {Approval} event indicating the updated allowance.\\n   *\\n   * Requirements:\\n   *\\n   * - `spender` cannot be the zero address.\\n   * - `spender` must have allowance for the caller of at least\\n   * `subtractedValue`.\\n   */\\n  function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n    address owner = _msgSender();\\n    uint256 currentAllowance = allowance(owner, spender);\\n    require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n    unchecked {\\n      _approve(owner, spender, currentAllowance - subtractedValue);\\n    }\\n\\n    return true;\\n  }\\n\\n  /**\\n   * @dev Moves `amount` of tokens from `from` to `to`.\\n   *\\n   * This internal function is equivalent to {transfer}, and can be used to\\n   * e.g. implement automatic token fees, slashing mechanisms, etc.\\n   *\\n   * Emits a {Transfer} event.\\n   *\\n   * Requirements:\\n   *\\n   * - `from` cannot be the zero address.\\n   * - `to` cannot be the zero address.\\n   * - `from` must have a balance of at least `amount`.\\n   */\\n  function _transfer(address from, address to, uint256 amount) internal virtual {\\n    require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n    require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n    _beforeTokenTransfer(from, to, amount);\\n\\n    uint256 fromBalance = _balances[from];\\n    require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n    unchecked {\\n      _balances[from] = fromBalance - amount;\\n      // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n      // decrementing then incrementing.\\n      _balances[to] += amount;\\n    }\\n\\n    emit Transfer(from, to, amount);\\n\\n    _afterTokenTransfer(from, to, amount);\\n  }\\n\\n  /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n   * the total supply.\\n   *\\n   * Emits a {Transfer} event with `from` set to the zero address.\\n   *\\n   * Requirements:\\n   *\\n   * - `account` cannot be the zero address.\\n   */\\n  function _mint(address account, uint256 amount) internal virtual {\\n    require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n    _beforeTokenTransfer(address(0), account, amount);\\n\\n    _totalSupply += amount;\\n    unchecked {\\n      // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n      _balances[account] += amount;\\n    }\\n    emit Transfer(address(0), account, amount);\\n\\n    _afterTokenTransfer(address(0), account, amount);\\n  }\\n\\n  /**\\n   * @dev Destroys `amount` tokens from `account`, reducing the\\n   * total supply.\\n   *\\n   * Emits a {Transfer} event with `to` set to the zero address.\\n   *\\n   * Requirements:\\n   *\\n   * - `account` cannot be the zero address.\\n   * - `account` must have at least `amount` tokens.\\n   */\\n  function _burn(address account, uint256 amount) internal virtual {\\n    require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n    _beforeTokenTransfer(account, address(0), amount);\\n\\n    uint256 accountBalance = _balances[account];\\n    require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n    unchecked {\\n      _balances[account] = accountBalance - amount;\\n      // Overflow not possible: amount <= accountBalance <= totalSupply.\\n      _totalSupply -= amount;\\n    }\\n\\n    emit Transfer(account, address(0), amount);\\n\\n    _afterTokenTransfer(account, address(0), amount);\\n  }\\n\\n  /**\\n   * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n   *\\n   * This internal function is equivalent to `approve`, and can be used to\\n   * e.g. set automatic allowances for certain subsystems, etc.\\n   *\\n   * Emits an {Approval} event.\\n   *\\n   * Requirements:\\n   *\\n   * - `owner` cannot be the zero address.\\n   * - `spender` cannot be the zero address.\\n   */\\n  function _approve(address owner, address spender, uint256 amount) internal virtual {\\n    require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n    require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n    _allowances[owner][spender] = amount;\\n    emit Approval(owner, spender, amount);\\n  }\\n\\n  /**\\n   * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n   *\\n   * Does not update the allowance amount in case of infinite allowance.\\n   * Revert if not enough allowance is available.\\n   *\\n   * Might emit an {Approval} event.\\n   */\\n  function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\\n    uint256 currentAllowance = allowance(owner, spender);\\n    if (currentAllowance != type(uint256).max) {\\n      require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n      unchecked {\\n        _approve(owner, spender, currentAllowance - amount);\\n      }\\n    }\\n  }\\n\\n  /**\\n   * @dev Hook that is called before any transfer of tokens. This includes\\n   * minting and burning.\\n   *\\n   * Calling conditions:\\n   *\\n   * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n   * will be transferred to `to`.\\n   * - when `from` is zero, `amount` tokens will be minted for `to`.\\n   * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n   * - `from` and `to` are never both zero.\\n   *\\n   * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n   */\\n  function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n\\n  /**\\n   * @dev Hook that is called after any transfer of tokens. This includes\\n   * minting and burning.\\n   *\\n   * Calling conditions:\\n   *\\n   * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n   * has been transferred to `to`.\\n   * - when `from` is zero, `amount` tokens have been minted for `to`.\\n   * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n   * - `from` and `to` are never both zero.\\n   *\\n   * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n   */\\n  function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\\n}\\n\"\n    },\n    \"@chainlink/contracts-ccip/src/v0.8/vendor/openzeppelin-solidity/v4.8.3/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n  /**\\n   * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n   * given ``owner``'s signed approval.\\n   *\\n   * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n   * ordering also apply here.\\n   *\\n   * Emits an {Approval} event.\\n   *\\n   * Requirements:\\n   *\\n   * - `spender` cannot be the zero address.\\n   * - `deadline` must be a timestamp in the future.\\n   * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n   * over the EIP712-formatted function arguments.\\n   * - the signature must use ``owner``'s current nonce (see {nonces}).\\n   *\\n   * For more information on the signature format, see the\\n   * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n   * section].\\n   */\\n  function permit(\\n    address owner,\\n    address spender,\\n    uint256 value,\\n    uint256 deadline,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) external;\\n\\n  /**\\n   * @dev Returns the current nonce for `owner`. This value must be\\n   * included whenever a signature is generated for {permit}.\\n   *\\n   * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n   * prevents a signature from being used multiple times.\\n   */\\n  function nonces(address owner) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n   */\\n  // solhint-disable-next-line func-name-mixedcase\\n  function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\"\n    },\n    \"@chainlink/contracts-ccip/src/v0.8/vendor/openzeppelin-solidity/v4.8.3/contracts/token/ERC20/extensions/ERC20Burnable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/extensions/ERC20Burnable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC20.sol\\\";\\nimport \\\"../../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\\n * tokens and those that they have an allowance for, in a way that can be\\n * recognized off-chain (via event analysis).\\n */\\nabstract contract ERC20Burnable is Context, ERC20 {\\n  /**\\n   * @dev Destroys `amount` tokens from the caller.\\n   *\\n   * See {ERC20-_burn}.\\n   */\\n  function burn(uint256 amount) public virtual {\\n    _burn(_msgSender(), amount);\\n  }\\n\\n  /**\\n   * @dev Destroys `amount` tokens from `account`, deducting from the caller's\\n   * allowance.\\n   *\\n   * See {ERC20-_burn} and {ERC20-allowance}.\\n   *\\n   * Requirements:\\n   *\\n   * - the caller must have allowance for ``accounts``'s tokens of at least\\n   * `amount`.\\n   */\\n  function burnFrom(address account, uint256 amount) public virtual {\\n    _spendAllowance(account, _msgSender(), amount);\\n    _burn(account, amount);\\n  }\\n}\"\n    },\n    \"@chainlink/contracts-ccip/src/v0.8/vendor/openzeppelin-solidity/v4.8.3/contracts/token/ERC20/extensions/IERC20Metadata.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n  /**\\n   * @dev Returns the name of the token.\\n   */\\n  function name() external view returns (string memory);\\n\\n  /**\\n   * @dev Returns the symbol of the token.\\n   */\\n  function symbol() external view returns (string memory);\\n\\n  /**\\n   * @dev Returns the decimals places of the token.\\n   */\\n  function decimals() external view returns (uint8);\\n}\\n\"\n    },\n    \"@chainlink/contracts-ccip/src/v0.8/vendor/openzeppelin-solidity/v4.8.3/contracts/token/ERC20/IERC20.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n  /**\\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n   * another (`to`).\\n   *\\n   * Note that `value` may be zero.\\n   */\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n  /**\\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n   * a call to {approve}. `value` is the new allowance.\\n   */\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n  /**\\n   * @dev Returns the amount of tokens in existence.\\n   */\\n  function totalSupply() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the amount of tokens owned by `account`.\\n   */\\n  function balanceOf(address account) external view returns (uint256);\\n\\n  /**\\n   * @dev Moves `amount` tokens from the caller's account to `to`.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transfer(address to, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Returns the remaining number of tokens that `spender` will be\\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n   * zero by default.\\n   *\\n   * This value changes when {approve} or {transferFrom} are called.\\n   */\\n  function allowance(address owner, address spender) external view returns (uint256);\\n\\n  /**\\n   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n   * that someone may use both the old and the new allowance by unfortunate\\n   * transaction ordering. One possible solution to mitigate this race\\n   * condition is to first reduce the spender's allowance to 0 and set the\\n   * desired value afterwards:\\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n   *\\n   * Emits an {Approval} event.\\n   */\\n  function approve(address spender, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Moves `amount` tokens from `from` to `to` using the\\n   * allowance mechanism. `amount` is then deducted from the caller's\\n   * allowance.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\"\n    },\n    \"@chainlink/contracts-ccip/src/v0.8/vendor/openzeppelin-solidity/v4.8.3/contracts/token/ERC20/utils/SafeERC20.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n  using Address for address;\\n\\n  function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n    _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n  }\\n\\n  function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n    _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n  }\\n\\n  /**\\n   * @dev Deprecated. This function has issues similar to the ones found in\\n   * {IERC20-approve}, and its usage is discouraged.\\n   *\\n   * Whenever possible, use {safeIncreaseAllowance} and\\n   * {safeDecreaseAllowance} instead.\\n   */\\n  function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n    // safeApprove should only be called when setting an initial allowance,\\n    // or when resetting it to zero. To increase and decrease it, use\\n    // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n    require(\\n      (value == 0) || (token.allowance(address(this), spender) == 0),\\n      \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n    );\\n    _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n  }\\n\\n  function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n    uint256 newAllowance = token.allowance(address(this), spender) + value;\\n    _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n  }\\n\\n  function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n    unchecked {\\n      uint256 oldAllowance = token.allowance(address(this), spender);\\n      require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n      uint256 newAllowance = oldAllowance - value;\\n      _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n  }\\n\\n  function safePermit(\\n    IERC20Permit token,\\n    address owner,\\n    address spender,\\n    uint256 value,\\n    uint256 deadline,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) internal {\\n    uint256 nonceBefore = token.nonces(owner);\\n    token.permit(owner, spender, value, deadline, v, r, s);\\n    uint256 nonceAfter = token.nonces(owner);\\n    require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n  }\\n\\n  /**\\n   * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n   * on the return value: the return value is optional (but if data is returned, it must not be false).\\n   * @param token The token targeted by the call.\\n   * @param data The call data (encoded using abi.encode or one of its variants).\\n   */\\n  function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n    // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n    // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n    // the target address contains contract code and also asserts for success in the low-level call.\\n\\n    bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n    if (returndata.length > 0) {\\n      // Return data is optional\\n      require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n  }\\n}\\n\"\n    },\n    \"@chainlink/contracts-ccip/src/v0.8/vendor/openzeppelin-solidity/v4.8.3/contracts/utils/Address.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n  /**\\n   * @dev Returns true if `account` is a contract.\\n   *\\n   * [IMPORTANT]\\n   * ====\\n   * It is unsafe to assume that an address for which this function returns\\n   * false is an externally-owned account (EOA) and not a contract.\\n   *\\n   * Among others, `isContract` will return false for the following\\n   * types of addresses:\\n   *\\n   *  - an externally-owned account\\n   *  - a contract in construction\\n   *  - an address where a contract will be created\\n   *  - an address where a contract lived, but was destroyed\\n   * ====\\n   *\\n   * [IMPORTANT]\\n   * ====\\n   * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n   *\\n   * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n   * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n   * constructor.\\n   * ====\\n   */\\n  function isContract(address account) internal view returns (bool) {\\n    // This method relies on extcodesize/address.code.length, which returns 0\\n    // for contracts in construction, since the code is only stored at the end\\n    // of the constructor execution.\\n\\n    return account.code.length > 0;\\n  }\\n\\n  /**\\n   * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n   * `recipient`, forwarding all available gas and reverting on errors.\\n   *\\n   * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n   * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n   * imposed by `transfer`, making them unable to receive funds via\\n   * `transfer`. {sendValue} removes this limitation.\\n   *\\n   * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n   *\\n   * IMPORTANT: because control is transferred to `recipient`, care must be\\n   * taken to not create reentrancy vulnerabilities. Consider using\\n   * {ReentrancyGuard} or the\\n   * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n   */\\n  function sendValue(address payable recipient, uint256 amount) internal {\\n    require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n    (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n    require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n  }\\n\\n  /**\\n   * @dev Performs a Solidity function call using a low level `call`. A\\n   * plain `call` is an unsafe replacement for a function call: use this\\n   * function instead.\\n   *\\n   * If `target` reverts with a revert reason, it is bubbled up by this\\n   * function (like regular Solidity function calls).\\n   *\\n   * Returns the raw returned data. To convert to the expected return value,\\n   * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n   *\\n   * Requirements:\\n   *\\n   * - `target` must be a contract.\\n   * - calling `target` with `data` must not revert.\\n   *\\n   * _Available since v3.1._\\n   */\\n  function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n    return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n   * `errorMessage` as a fallback revert reason when `target` reverts.\\n   *\\n   * _Available since v3.1._\\n   */\\n  function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n    return functionCallWithValue(target, data, 0, errorMessage);\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n   * but also transferring `value` wei to `target`.\\n   *\\n   * Requirements:\\n   *\\n   * - the calling contract must have an ETH balance of at least `value`.\\n   * - the called Solidity function must be `payable`.\\n   *\\n   * _Available since v3.1._\\n   */\\n  function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n    return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n   * with `errorMessage` as a fallback revert reason when `target` reverts.\\n   *\\n   * _Available since v3.1._\\n   */\\n  function functionCallWithValue(\\n    address target,\\n    bytes memory data,\\n    uint256 value,\\n    string memory errorMessage\\n  ) internal returns (bytes memory) {\\n    require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n    (bool success, bytes memory returndata) = target.call{value: value}(data);\\n    return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n   * but performing a static call.\\n   *\\n   * _Available since v3.3._\\n   */\\n  function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n    return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n   * but performing a static call.\\n   *\\n   * _Available since v3.3._\\n   */\\n  function functionStaticCall(\\n    address target,\\n    bytes memory data,\\n    string memory errorMessage\\n  ) internal view returns (bytes memory) {\\n    (bool success, bytes memory returndata) = target.staticcall(data);\\n    return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n   * but performing a delegate call.\\n   *\\n   * _Available since v3.4._\\n   */\\n  function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n    return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n   * but performing a delegate call.\\n   *\\n   * _Available since v3.4._\\n   */\\n  function functionDelegateCall(\\n    address target,\\n    bytes memory data,\\n    string memory errorMessage\\n  ) internal returns (bytes memory) {\\n    (bool success, bytes memory returndata) = target.delegatecall(data);\\n    return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n  }\\n\\n  /**\\n   * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n   * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n   *\\n   * _Available since v4.8._\\n   */\\n  function verifyCallResultFromTarget(\\n    address target,\\n    bool success,\\n    bytes memory returndata,\\n    string memory errorMessage\\n  ) internal view returns (bytes memory) {\\n    if (success) {\\n      if (returndata.length == 0) {\\n        // only check isContract if the call was successful and the return data is empty\\n        // otherwise we already know that it was a contract\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n      }\\n      return returndata;\\n    } else {\\n      _revert(returndata, errorMessage);\\n    }\\n  }\\n\\n  /**\\n   * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n   * revert reason or using the provided one.\\n   *\\n   * _Available since v4.3._\\n   */\\n  function verifyCallResult(\\n    bool success,\\n    bytes memory returndata,\\n    string memory errorMessage\\n  ) internal pure returns (bytes memory) {\\n    if (success) {\\n      return returndata;\\n    } else {\\n      _revert(returndata, errorMessage);\\n    }\\n  }\\n\\n  function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n    // Look for revert reason and bubble it up if present\\n    if (returndata.length > 0) {\\n      // The easiest way to bubble the revert reason is using memory via assembly\\n      /// @solidity memory-safe-assembly\\n      assembly {\\n        let returndata_size := mload(returndata)\\n        revert(add(32, returndata), returndata_size)\\n      }\\n    } else {\\n      revert(errorMessage);\\n    }\\n  }\\n}\\n\"\n    },\n    \"@chainlink/contracts-ccip/src/v0.8/vendor/openzeppelin-solidity/v4.8.3/contracts/utils/Context.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n  function _msgSender() internal view virtual returns (address) {\\n    return msg.sender;\\n  }\\n\\n  function _msgData() internal view virtual returns (bytes calldata) {\\n    return msg.data;\\n  }\\n}\\n\"\n    },\n    \"@chainlink/contracts-ccip/src/v0.8/vendor/openzeppelin-solidity/v4.8.3/contracts/utils/introspection/IERC165.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\"\n    },\n    \"@chainlink/contracts-ccip/src/v0.8/vendor/openzeppelin-solidity/v4.8.3/contracts/utils/structs/EnumerableSet.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n  // To implement this library for multiple types with as little code\\n  // repetition as possible, we write it in terms of a generic Set type with\\n  // bytes32 values.\\n  // The Set implementation uses private functions, and user-facing\\n  // implementations (such as AddressSet) are just wrappers around the\\n  // underlying Set.\\n  // This means that we can only create new EnumerableSets for types that fit\\n  // in bytes32.\\n\\n  struct Set {\\n    // Storage of set values\\n    bytes32[] _values;\\n    // Position of the value in the `values` array, plus 1 because index 0\\n    // means a value is not in the set.\\n    mapping(bytes32 => uint256) _indexes;\\n  }\\n\\n  /**\\n   * @dev Add a value to a set. O(1).\\n   *\\n   * Returns true if the value was added to the set, that is if it was not\\n   * already present.\\n   */\\n  function _add(Set storage set, bytes32 value) private returns (bool) {\\n    if (!_contains(set, value)) {\\n      set._values.push(value);\\n      // The value is stored at length-1, but we add 1 to all indexes\\n      // and use 0 as a sentinel value\\n      set._indexes[value] = set._values.length;\\n      return true;\\n    } else {\\n      return false;\\n    }\\n  }\\n\\n  /**\\n   * @dev Removes a value from a set. O(1).\\n   *\\n   * Returns true if the value was removed from the set, that is if it was\\n   * present.\\n   */\\n  function _remove(Set storage set, bytes32 value) private returns (bool) {\\n    // We read and store the value's index to prevent multiple reads from the same storage slot\\n    uint256 valueIndex = set._indexes[value];\\n\\n    if (valueIndex != 0) {\\n      // Equivalent to contains(set, value)\\n      // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n      // the array, and then remove the last element (sometimes called as 'swap and pop').\\n      // This modifies the order of the array, as noted in {at}.\\n\\n      uint256 toDeleteIndex = valueIndex - 1;\\n      uint256 lastIndex = set._values.length - 1;\\n\\n      if (lastIndex != toDeleteIndex) {\\n        bytes32 lastValue = set._values[lastIndex];\\n\\n        // Move the last value to the index where the value to delete is\\n        set._values[toDeleteIndex] = lastValue;\\n        // Update the index for the moved value\\n        set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n      }\\n\\n      // Delete the slot where the moved value was stored\\n      set._values.pop();\\n\\n      // Delete the index for the deleted slot\\n      delete set._indexes[value];\\n\\n      return true;\\n    } else {\\n      return false;\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns true if the value is in the set. O(1).\\n   */\\n  function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n    return set._indexes[value] != 0;\\n  }\\n\\n  /**\\n   * @dev Returns the number of values on the set. O(1).\\n   */\\n  function _length(Set storage set) private view returns (uint256) {\\n    return set._values.length;\\n  }\\n\\n  /**\\n   * @dev Returns the value stored at position `index` in the set. O(1).\\n   *\\n   * Note that there are no guarantees on the ordering of values inside the\\n   * array, and it may change when more values are added or removed.\\n   *\\n   * Requirements:\\n   *\\n   * - `index` must be strictly less than {length}.\\n   */\\n  function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n    return set._values[index];\\n  }\\n\\n  /**\\n   * @dev Return the entire set in an array\\n   *\\n   * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n   * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n   * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n   * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n   */\\n  function _values(Set storage set) private view returns (bytes32[] memory) {\\n    return set._values;\\n  }\\n\\n  // Bytes32Set\\n\\n  struct Bytes32Set {\\n    Set _inner;\\n  }\\n\\n  /**\\n   * @dev Add a value to a set. O(1).\\n   *\\n   * Returns true if the value was added to the set, that is if it was not\\n   * already present.\\n   */\\n  function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n    return _add(set._inner, value);\\n  }\\n\\n  /**\\n   * @dev Removes a value from a set. O(1).\\n   *\\n   * Returns true if the value was removed from the set, that is if it was\\n   * present.\\n   */\\n  function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n    return _remove(set._inner, value);\\n  }\\n\\n  /**\\n   * @dev Returns true if the value is in the set. O(1).\\n   */\\n  function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n    return _contains(set._inner, value);\\n  }\\n\\n  /**\\n   * @dev Returns the number of values in the set. O(1).\\n   */\\n  function length(Bytes32Set storage set) internal view returns (uint256) {\\n    return _length(set._inner);\\n  }\\n\\n  /**\\n   * @dev Returns the value stored at position `index` in the set. O(1).\\n   *\\n   * Note that there are no guarantees on the ordering of values inside the\\n   * array, and it may change when more values are added or removed.\\n   *\\n   * Requirements:\\n   *\\n   * - `index` must be strictly less than {length}.\\n   */\\n  function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n    return _at(set._inner, index);\\n  }\\n\\n  /**\\n   * @dev Return the entire set in an array\\n   *\\n   * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n   * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n   * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n   * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n   */\\n  function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n    bytes32[] memory store = _values(set._inner);\\n    bytes32[] memory result;\\n\\n    /// @solidity memory-safe-assembly\\n    assembly {\\n      result := store\\n    }\\n\\n    return result;\\n  }\\n\\n  // AddressSet\\n\\n  struct AddressSet {\\n    Set _inner;\\n  }\\n\\n  /**\\n   * @dev Add a value to a set. O(1).\\n   *\\n   * Returns true if the value was added to the set, that is if it was not\\n   * already present.\\n   */\\n  function add(AddressSet storage set, address value) internal returns (bool) {\\n    return _add(set._inner, bytes32(uint256(uint160(value))));\\n  }\\n\\n  /**\\n   * @dev Removes a value from a set. O(1).\\n   *\\n   * Returns true if the value was removed from the set, that is if it was\\n   * present.\\n   */\\n  function remove(AddressSet storage set, address value) internal returns (bool) {\\n    return _remove(set._inner, bytes32(uint256(uint160(value))));\\n  }\\n\\n  /**\\n   * @dev Returns true if the value is in the set. O(1).\\n   */\\n  function contains(AddressSet storage set, address value) internal view returns (bool) {\\n    return _contains(set._inner, bytes32(uint256(uint160(value))));\\n  }\\n\\n  /**\\n   * @dev Returns the number of values in the set. O(1).\\n   */\\n  function length(AddressSet storage set) internal view returns (uint256) {\\n    return _length(set._inner);\\n  }\\n\\n  /**\\n   * @dev Returns the value stored at position `index` in the set. O(1).\\n   *\\n   * Note that there are no guarantees on the ordering of values inside the\\n   * array, and it may change when more values are added or removed.\\n   *\\n   * Requirements:\\n   *\\n   * - `index` must be strictly less than {length}.\\n   */\\n  function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n    return address(uint160(uint256(_at(set._inner, index))));\\n  }\\n\\n  /**\\n   * @dev Return the entire set in an array\\n   *\\n   * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n   * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n   * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n   * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n   */\\n  function values(AddressSet storage set) internal view returns (address[] memory) {\\n    bytes32[] memory store = _values(set._inner);\\n    address[] memory result;\\n\\n    /// @solidity memory-safe-assembly\\n    assembly {\\n      result := store\\n    }\\n\\n    return result;\\n  }\\n\\n  // UintSet\\n\\n  struct UintSet {\\n    Set _inner;\\n  }\\n\\n  /**\\n   * @dev Add a value to a set. O(1).\\n   *\\n   * Returns true if the value was added to the set, that is if it was not\\n   * already present.\\n   */\\n  function add(UintSet storage set, uint256 value) internal returns (bool) {\\n    return _add(set._inner, bytes32(value));\\n  }\\n\\n  /**\\n   * @dev Removes a value from a set. O(1).\\n   *\\n   * Returns true if the value was removed from the set, that is if it was\\n   * present.\\n   */\\n  function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n    return _remove(set._inner, bytes32(value));\\n  }\\n\\n  /**\\n   * @dev Returns true if the value is in the set. O(1).\\n   */\\n  function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n    return _contains(set._inner, bytes32(value));\\n  }\\n\\n  /**\\n   * @dev Returns the number of values in the set. O(1).\\n   */\\n  function length(UintSet storage set) internal view returns (uint256) {\\n    return _length(set._inner);\\n  }\\n\\n  /**\\n   * @dev Returns the value stored at position `index` in the set. O(1).\\n   *\\n   * Note that there are no guarantees on the ordering of values inside the\\n   * array, and it may change when more values are added or removed.\\n   *\\n   * Requirements:\\n   *\\n   * - `index` must be strictly less than {length}.\\n   */\\n  function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n    return uint256(_at(set._inner, index));\\n  }\\n\\n  /**\\n   * @dev Return the entire set in an array\\n   *\\n   * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n   * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n   * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n   * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n   */\\n  function values(UintSet storage set) internal view returns (uint256[] memory) {\\n    bytes32[] memory store = _values(set._inner);\\n    uint256[] memory result;\\n\\n    /// @solidity memory-safe-assembly\\n    assembly {\\n      result := store\\n    }\\n\\n    return result;\\n  }\\n}\\n\"\n    },\n    \"@chainlink/contracts-ccip/src/v0.8/vendor/openzeppelin-solidity/v5.0.2/contracts/access/AccessControl.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IAccessControl} from \\\"./IAccessControl.sol\\\";\\nimport {Context} from \\\"../utils/Context.sol\\\";\\nimport {ERC165} from \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address account => bool) hasRole;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 role => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with an {AccessControlUnauthorizedAccount} error including the required role.\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\\n        return _roles[role].hasRole[account];\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\\n     * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\\n     * is missing `role`.\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert AccessControlUnauthorizedAccount(account, role);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) public virtual {\\n        if (callerConfirmation != _msgSender()) {\\n            revert AccessControlBadConfirmation();\\n        }\\n\\n        _revokeRole(role, callerConfirmation);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual returns (bool) {\\n        if (!hasRole(role, account)) {\\n            _roles[role].hasRole[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Attempts to revoke `role` to `account` and returns a boolean indicating if `role` was revoked.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {\\n        if (hasRole(role, account)) {\\n            _roles[role].hasRole[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n}\\n\"\n    },\n    \"@chainlink/contracts-ccip/src/v0.8/vendor/openzeppelin-solidity/v5.0.2/contracts/access/IAccessControl.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev The `account` is missing a role.\\n     */\\n    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\\n\\n    /**\\n     * @dev The caller of a function is not the expected one.\\n     *\\n     * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\\n     */\\n    error AccessControlBadConfirmation();\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) external;\\n}\\n\"\n    },\n    \"@chainlink/contracts-ccip/src/v0.8/vendor/openzeppelin-solidity/v5.0.2/contracts/utils/Context.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\"\n    },\n    \"@chainlink/contracts-ccip/src/v0.8/vendor/openzeppelin-solidity/v5.0.2/contracts/utils/introspection/ERC165.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\n    },\n    \"@chainlink/contracts-ccip/src/v0.8/vendor/openzeppelin-solidity/v5.0.2/contracts/utils/introspection/ERC165Checker.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165Checker.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Library used to query support of an interface declared via {IERC165}.\\n *\\n * Note that these functions return the actual result of the query: they do not\\n * `revert` if an interface is not supported. It is up to the caller to decide\\n * what to do in these cases.\\n */\\nlibrary ERC165Checker {\\n    // As per the EIP-165 spec, no interface should ever match 0xffffffff\\n    bytes4 private constant INTERFACE_ID_INVALID = 0xffffffff;\\n\\n    /**\\n     * @dev Returns true if `account` supports the {IERC165} interface.\\n     */\\n    function supportsERC165(address account) internal view returns (bool) {\\n        // Any contract that implements ERC165 must explicitly indicate support of\\n        // InterfaceId_ERC165 and explicitly indicate non-support of InterfaceId_Invalid\\n        return\\n            supportsERC165InterfaceUnchecked(account, type(IERC165).interfaceId) &&\\n            !supportsERC165InterfaceUnchecked(account, INTERFACE_ID_INVALID);\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports the interface defined by\\n     * `interfaceId`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(address account, bytes4 interfaceId) internal view returns (bool) {\\n        // query support of both ERC165 as per the spec and support of _interfaceId\\n        return supportsERC165(account) && supportsERC165InterfaceUnchecked(account, interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns a boolean array where each value corresponds to the\\n     * interfaces passed in and whether they're supported or not. This allows\\n     * you to batch check interfaces for a contract where your expectation\\n     * is that some interfaces may not be supported.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function getSupportedInterfaces(\\n        address account,\\n        bytes4[] memory interfaceIds\\n    ) internal view returns (bool[] memory) {\\n        // an array of booleans corresponding to interfaceIds and whether they're supported or not\\n        bool[] memory interfaceIdsSupported = new bool[](interfaceIds.length);\\n\\n        // query support of ERC165 itself\\n        if (supportsERC165(account)) {\\n            // query support of each interface in interfaceIds\\n            for (uint256 i = 0; i < interfaceIds.length; i++) {\\n                interfaceIdsSupported[i] = supportsERC165InterfaceUnchecked(account, interfaceIds[i]);\\n            }\\n        }\\n\\n        return interfaceIdsSupported;\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports all the interfaces defined in\\n     * `interfaceIds`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * Batch-querying can lead to gas savings by skipping repeated checks for\\n     * {IERC165} support.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsAllInterfaces(address account, bytes4[] memory interfaceIds) internal view returns (bool) {\\n        // query support of ERC165 itself\\n        if (!supportsERC165(account)) {\\n            return false;\\n        }\\n\\n        // query support of each interface in interfaceIds\\n        for (uint256 i = 0; i < interfaceIds.length; i++) {\\n            if (!supportsERC165InterfaceUnchecked(account, interfaceIds[i])) {\\n                return false;\\n            }\\n        }\\n\\n        // all interfaces supported\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Query if a contract implements an interface, does not check ERC165 support\\n     * @param account The address of the contract to query for support of an interface\\n     * @param interfaceId The interface identifier, as specified in ERC-165\\n     * @return true if the contract at account indicates support of the interface with\\n     * identifier interfaceId, false otherwise\\n     * @dev Assumes that account contains a contract that supports ERC165, otherwise\\n     * the behavior of this method is undefined. This precondition can be checked\\n     * with {supportsERC165}.\\n     *\\n     * Some precompiled contracts will falsely indicate support for a given interface, so caution\\n     * should be exercised when using this function.\\n     *\\n     * Interface identification is specified in ERC-165.\\n     */\\n    function supportsERC165InterfaceUnchecked(address account, bytes4 interfaceId) internal view returns (bool) {\\n        // prepare call\\n        bytes memory encodedParams = abi.encodeCall(IERC165.supportsInterface, (interfaceId));\\n\\n        // perform static call\\n        bool success;\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly {\\n            success := staticcall(30000, account, add(encodedParams, 0x20), mload(encodedParams), 0x00, 0x20)\\n            returnSize := returndatasize()\\n            returnValue := mload(0x00)\\n        }\\n\\n        return success && returnSize >= 0x20 && returnValue > 0;\\n    }\\n}\\n\"\n    },\n    \"@chainlink/contracts-ccip/src/v0.8/vendor/openzeppelin-solidity/v5.0.2/contracts/utils/introspection/IERC165.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\n    },\n    \"@chainlink/local/src/ccip/BurnMintERC677Helper.sol\": {\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.19;\\n\\nimport {BurnMintERC677} from \\\"@chainlink/contracts-ccip/src/v0.8/shared/token/ERC677/BurnMintERC677.sol\\\";\\n\\n/// @title BurnMintERC677Helper\\n/// @notice This contract extends the functionality of the BurnMintERC677 token contract to include a `drip` function that mints one full token to a specified address.\\n/// @dev Inherits from the BurnMintERC677 contract and sets the token name, symbol, decimals, and initial supply in the constructor.\\ncontract BurnMintERC677Helper is BurnMintERC677 {\\n    /**\\n     * @notice Constructor to initialize the BurnMintERC677Helper contract with a name and symbol.\\n     * @dev Calls the parent constructor of BurnMintERC677 with fixed decimals (18) and initial supply (0).\\n     * @param name - The name of the token.\\n     * @param symbol - The symbol of the token.\\n     */\\n    constructor(\\n        string memory name,\\n        string memory symbol\\n    ) BurnMintERC677(name, symbol, 18, 0) {}\\n\\n    /**\\n     * @notice Mints one full token (1e18) to the specified address.\\n     * @dev Calls the internal `_mint` function from the BurnMintERC677 contract.\\n     * @param to - The address to receive the minted token.\\n     */\\n    function drip(address to) external {\\n        _mint(to, 1e18);\\n    }\\n}\\n\"\n    },\n    \"@chainlink/local/src/ccip/CCIPLocalSimulator.sol\": {\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.19;\\n\\nimport {WETH9} from \\\"../shared/WETH9.sol\\\";\\nimport {LinkToken} from \\\"../shared/LinkToken.sol\\\";\\nimport {BurnMintERC677Helper} from \\\"./BurnMintERC677Helper.sol\\\";\\nimport {MockCCIPRouter} from \\\"@chainlink/contracts-ccip/src/v0.8/ccip/test/mocks/MockRouter.sol\\\";\\nimport {IRouterClient} from \\\"@chainlink/contracts-ccip/src/v0.8/ccip/interfaces/IRouterClient.sol\\\";\\nimport {IERC20} from\\n    \\\"@chainlink/contracts-ccip/src/v0.8/vendor/openzeppelin-solidity/v4.8.3/contracts/token/ERC20/IERC20.sol\\\";\\nimport {SafeERC20} from\\n    \\\"@chainlink/contracts-ccip/src/v0.8/vendor/openzeppelin-solidity/v4.8.3/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {IOwner} from \\\"@chainlink/contracts-ccip/src/v0.8/ccip/interfaces/IOwner.sol\\\";\\nimport {IGetCCIPAdmin} from \\\"@chainlink/contracts-ccip/src/v0.8/ccip/interfaces/IGetCCIPAdmin.sol\\\";\\nimport {AccessControl} from\\n    \\\"@chainlink/contracts-ccip/src/v0.8/vendor/openzeppelin-solidity/v5.0.2/contracts/access/AccessControl.sol\\\";\\n\\n/// @title CCIPLocalSimulator\\n/// @notice This contract simulates local CCIP (Cross-Chain Interoperability Protocol) operations for testing and development purposes.\\n/// @dev This contract includes methods to manage supported tokens and configurations for local simulations.\\ncontract CCIPLocalSimulator {\\n    using SafeERC20 for IERC20;\\n\\n    /// @notice The unique CCIP Chain Selector constant\\n    uint64 constant CHAIN_SELECTOR = 16015286601757825753;\\n\\n    /// @notice The wrapped native token instance\\n    WETH9 internal immutable i_wrappedNative;\\n\\n    /// @notice The LINK token instance\\n    LinkToken internal immutable i_linkToken;\\n\\n    /// @notice The BurnMintERC677Helper instance for CCIP-BnM token\\n    BurnMintERC677Helper internal immutable i_ccipBnM;\\n\\n    /// @notice The BurnMintERC677Helper instance for CCIP-LnM token\\n    BurnMintERC677Helper internal immutable i_ccipLnM;\\n\\n    /// @notice The mock CCIP router instance\\n    MockCCIPRouter internal immutable i_mockRouter;\\n\\n    /// @notice The list of supported token addresses\\n    address[] internal s_supportedTokens;\\n\\n    error CCIPLocalSimulator__MsgSenderIsNotTokenOwner();\\n    error CCIPLocalSimulator__RequiredRoleNotFound(address account, bytes32 role, address token);\\n\\n    /**\\n     * @notice Constructor to initialize the contract and pre-deployed token instances\\n     */\\n    constructor() {\\n        i_wrappedNative = new WETH9();\\n        i_linkToken = new LinkToken();\\n        i_ccipBnM = new BurnMintERC677Helper(\\\"CCIP-BnM\\\", \\\"CCIP-BnM\\\");\\n        i_ccipLnM = new BurnMintERC677Helper(\\\"CCIP-LnM\\\", \\\"CCIP-LnM\\\");\\n        i_mockRouter = new MockCCIPRouter();\\n\\n        s_supportedTokens.push(address(i_ccipBnM));\\n        s_supportedTokens.push(address(i_ccipLnM));\\n    }\\n\\n    /**\\n     * @notice Allows user to support any new token, besides CCIP BnM and CCIP LnM, for cross-chain transfers.\\n     *         Reverts if token does not implement owner() function.\\n     *         Reverts if the caller is not the token owner.\\n     *\\n     * @param tokenAddress - The address of the token to add to the list of supported tokens.\\n     */\\n    function supportNewTokenViaOwner(address tokenAddress) external {\\n        if (msg.sender != IOwner(tokenAddress).owner()) {\\n            revert CCIPLocalSimulator__MsgSenderIsNotTokenOwner();\\n        }\\n        s_supportedTokens.push(tokenAddress);\\n    }\\n\\n    /**\\n     * @notice Allows user to support any new token, besides CCIP BnM and CCIP LnM, for cross-chain transfers.\\n     *         Reverts if token does not implement getCCIPAdmin() function.\\n     *         Reverts if the caller is not the token CCIPAdmin.\\n     *\\n     * @param tokenAddress - The address of the token to add to the list of supported tokens.\\n     */\\n    function supportNewTokenViaGetCCIPAdmin(address tokenAddress) external {\\n        if (msg.sender != IGetCCIPAdmin(tokenAddress).getCCIPAdmin()) {\\n            revert CCIPLocalSimulator__MsgSenderIsNotTokenOwner();\\n        }\\n        s_supportedTokens.push(tokenAddress);\\n    }\\n\\n    /**\\n     * @notice Allows user to support any new token, besides CCIP BnM and CCIP LnM, for cross-chain transfers.\\n     *         The caller must have the DEFAULT_ADMIN_ROLE as defined by the contract itself.\\n     *         Reverts if the caller is not the admin of the token using OZ's AccessControl DEFAULT_ADMIN_ROLE.\\n     *\\n     * @param tokenAddress - The address of the token to add to the list of supported tokens.\\n     */\\n    function supportNewTokenViaAccessControlDefaultAdmin(address tokenAddress) external {\\n        bytes32 defaultAdminRole = AccessControl(tokenAddress).DEFAULT_ADMIN_ROLE();\\n        if (!AccessControl(tokenAddress).hasRole(defaultAdminRole, msg.sender)) {\\n            revert CCIPLocalSimulator__RequiredRoleNotFound(msg.sender, defaultAdminRole, tokenAddress);\\n        }\\n        s_supportedTokens.push(tokenAddress);\\n    }\\n\\n    /**\\n     * @notice Checks whether the provided `chainSelector` is supported by the simulator.\\n     *\\n     * @param chainSelector - The unique CCIP Chain Selector.\\n     *\\n     * @return supported - Returns true if `chainSelector` is supported by the simulator.\\n     */\\n    function isChainSupported(uint64 chainSelector) public pure returns (bool supported) {\\n        supported = chainSelector == CHAIN_SELECTOR;\\n    }\\n\\n    /**\\n     * @notice Gets a list of token addresses that are supported for cross-chain transfers by the simulator.\\n     *\\n     * @param chainSelector - The unique CCIP Chain Selector.\\n     *\\n     * @return tokens - Returns a list of token addresses that are supported for cross-chain transfers by the simulator.\\n     */\\n    function getSupportedTokens(uint64 chainSelector) external view returns (address[] memory tokens) {\\n        if (!isChainSupported(chainSelector)) {\\n            return new address[](0);\\n        }\\n\\n        tokens = s_supportedTokens;\\n    }\\n\\n    /**\\n     * @notice Requests LINK tokens from the faucet. The provided amount of tokens are transferred to provided destination address.\\n     *\\n     * @param to - The address to which LINK tokens are to be sent.\\n     * @param amount - The amount of LINK tokens to send.\\n     *\\n     * @return success - Returns `true` if the transfer of tokens was successful, otherwise `false`.\\n     */\\n    function requestLinkFromFaucet(address to, uint256 amount) external returns (bool success) {\\n        success = i_linkToken.transfer(to, amount);\\n    }\\n\\n    /**\\n     * @notice Returns configuration details for pre-deployed contracts and services needed for local CCIP simulations.\\n     *\\n     * @return chainSelector_ - The unique CCIP Chain Selector.\\n     * @return sourceRouter_  - The source chain Router contract.\\n     * @return destinationRouter_ - The destination chain Router contract.\\n     * @return wrappedNative_ - The wrapped native token which can be used for CCIP fees.\\n     * @return linkToken_ - The LINK token.\\n     * @return ccipBnM_ - The ccipBnM token.\\n     * @return ccipLnM_ - The ccipLnM token.\\n     */\\n    function configuration()\\n        public\\n        view\\n        returns (\\n            uint64 chainSelector_,\\n            IRouterClient sourceRouter_,\\n            IRouterClient destinationRouter_,\\n            WETH9 wrappedNative_,\\n            LinkToken linkToken_,\\n            BurnMintERC677Helper ccipBnM_,\\n            BurnMintERC677Helper ccipLnM_\\n        )\\n    {\\n        return (\\n            CHAIN_SELECTOR,\\n            IRouterClient(address(i_mockRouter)),\\n            IRouterClient(address(i_mockRouter)),\\n            i_wrappedNative,\\n            i_linkToken,\\n            i_ccipBnM,\\n            i_ccipLnM\\n        );\\n    }\\n}\\n\"\n    },\n    \"@chainlink/local/src/shared/LinkToken.sol\": {\n      \"content\": \"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.8.19;\\n\\nimport {ERC677} from \\\"@chainlink/contracts-ccip/src/v0.8/shared/token/ERC677/ERC677.sol\\\";\\n\\n/// @title LinkToken\\n/// @notice This contract implements the ChainLink Token (LINK) using the ERC677 standard.\\n/// @dev Inherits from the ERC677 token contract and initializes with a fixed total supply and standard token details.\\ncontract LinkToken is ERC677 {\\n    /// @notice The total supply of LINK tokens.\\n    uint private constant TOTAL_SUPPLY = 10 ** 27;\\n\\n    /// @notice The name of the LINK token.\\n    string private constant NAME = \\\"ChainLink Token\\\";\\n\\n    /// @notice The symbol of the LINK token.\\n    string private constant SYMBOL = \\\"LINK\\\";\\n\\n    /**\\n     * @notice Constructor to initialize the LinkToken contract with a fixed total supply, name, and symbol.\\n     * @dev Calls the ERC677 constructor with the name and symbol, and then mints the total supply to the contract deployer.\\n     */\\n    constructor() ERC677(NAME, SYMBOL) {\\n        _onCreate();\\n    }\\n\\n    /**\\n     * @notice Hook that is called when this contract is created.\\n     * @dev Useful to override constructor behaviour in child contracts (e.g., LINK bridge tokens).\\n     *      The default implementation mints 10**27 tokens to the contract deployer.\\n     */\\n    function _onCreate() internal virtual {\\n        _mint(msg.sender, TOTAL_SUPPLY);\\n    }\\n}\\n\"\n    },\n    \"@chainlink/local/src/shared/WETH9.sol\": {\n      \"content\": \"// Submitted for verification at Etherscan.io on 2017-12-12\\n\\n// Copyright (C) 2015, 2016, 2017 Dapphub\\n\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\npragma solidity ^0.8.19;\\n\\ncontract WETH9 {\\n    string public name = \\\"Wrapped Ether\\\";\\n    string public symbol = \\\"WETH\\\";\\n    uint8 public decimals = 18;\\n\\n    event Approval(address indexed src, address indexed guy, uint256 wad);\\n    event Transfer(address indexed src, address indexed dst, uint256 wad);\\n    event Deposit(address indexed dst, uint256 wad);\\n    event Withdrawal(address indexed src, uint256 wad);\\n\\n    mapping(address => uint256) public balanceOf;\\n    mapping(address => mapping(address => uint256)) public allowance;\\n\\n    receive() external payable {\\n        _deposit();\\n    }\\n\\n    function _deposit() internal {\\n        balanceOf[msg.sender] += msg.value;\\n        emit Deposit(msg.sender, msg.value);\\n    }\\n\\n    function deposit() external payable {\\n        _deposit();\\n    }\\n\\n    function withdraw(uint256 wad) external {\\n        require(balanceOf[msg.sender] >= wad);\\n        balanceOf[msg.sender] -= wad;\\n        payable(msg.sender).transfer(wad);\\n        emit Withdrawal(msg.sender, wad);\\n    }\\n\\n    function totalSupply() public view returns (uint256) {\\n        return address(this).balance;\\n    }\\n\\n    function approve(address guy, uint256 wad) public returns (bool) {\\n        allowance[msg.sender][guy] = wad;\\n        emit Approval(msg.sender, guy, wad);\\n        return true;\\n    }\\n\\n    function transfer(address dst, uint256 wad) public returns (bool) {\\n        return transferFrom(msg.sender, dst, wad);\\n    }\\n\\n    function transferFrom(\\n        address src,\\n        address dst,\\n        uint256 wad\\n    ) public returns (bool) {\\n        require(balanceOf[src] >= wad);\\n\\n        if (\\n            src != msg.sender && allowance[src][msg.sender] != type(uint128).max\\n        ) {\\n            require(allowance[src][msg.sender] >= wad);\\n            allowance[src][msg.sender] -= wad;\\n        }\\n\\n        balanceOf[src] -= wad;\\n        balanceOf[dst] += wad;\\n\\n        emit Transfer(src, dst, wad);\\n\\n        return true;\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC-20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`’s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC-721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in ERC-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC-1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC-1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/interfaces/IERC165.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../utils/introspection/IERC165.sol\\\";\\n\"\n    },\n    \"@openzeppelin/contracts/interfaces/IERC4906.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (interfaces/IERC4906.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\nimport {IERC721} from \\\"./IERC721.sol\\\";\\n\\n/// @title ERC-721 Metadata Update Extension\\ninterface IERC4906 is IERC165, IERC721 {\\n    /// @dev This event emits when the metadata of a token is changed.\\n    /// So that the third-party platforms such as NFT market could\\n    /// timely update the images and related attributes of the NFT.\\n    event MetadataUpdate(uint256 _tokenId);\\n\\n    /// @dev This event emits when the metadata of a range of tokens is changed.\\n    /// So that the third-party platforms such as NFT market could\\n    /// timely update the images and related attributes of the NFTs.\\n    event BatchMetadataUpdate(uint256 _fromTokenId, uint256 _toTokenId);\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/interfaces/IERC721.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"../token/ERC721/IERC721.sol\\\";\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC721/ERC721.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"./IERC721.sol\\\";\\nimport {IERC721Metadata} from \\\"./extensions/IERC721Metadata.sol\\\";\\nimport {ERC721Utils} from \\\"./utils/ERC721Utils.sol\\\";\\nimport {Context} from \\\"../../utils/Context.sol\\\";\\nimport {Strings} from \\\"../../utils/Strings.sol\\\";\\nimport {IERC165, ERC165} from \\\"../../utils/introspection/ERC165.sol\\\";\\nimport {IERC721Errors} from \\\"../../interfaces/draft-IERC6093.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC-721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\nabstract contract ERC721 is Context, ERC165, IERC721, IERC721Metadata, IERC721Errors {\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    mapping(uint256 tokenId => address) private _owners;\\n\\n    mapping(address owner => uint256) private _balances;\\n\\n    mapping(uint256 tokenId => address) private _tokenApprovals;\\n\\n    mapping(address owner => mapping(address operator => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual returns (uint256) {\\n        if (owner == address(0)) {\\n            revert ERC721InvalidOwner(address(0));\\n        }\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual returns (address) {\\n        return _requireOwned(tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual returns (string memory) {\\n        _requireOwned(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string.concat(baseURI, tokenId.toString()) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual {\\n        _approve(to, tokenId, _msgSender());\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual returns (address) {\\n        _requireOwned(tokenId);\\n\\n        return _getApproved(tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) public virtual {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        // Setting an \\\"auth\\\" arguments enables the `_isAuthorized` check which verifies that the token exists\\n        // (from != 0). Therefore, it is not needed to verify that the return value is not 0 here.\\n        address previousOwner = _update(to, tokenId, _msgSender());\\n        if (previousOwner != from) {\\n            revert ERC721IncorrectOwner(from, tokenId, previousOwner);\\n        }\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual {\\n        transferFrom(from, to, tokenId);\\n        ERC721Utils.checkOnERC721Received(_msgSender(), from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     *\\n     * IMPORTANT: Any overrides to this function that add ownership of tokens not tracked by the\\n     * core ERC-721 logic MUST be matched with the use of {_increaseBalance} to keep balances\\n     * consistent with ownership. The invariant to preserve is that for any address `a` the value returned by\\n     * `balanceOf(a)` must be equal to the number of tokens such that `_ownerOf(tokenId)` is `a`.\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns the approved address for `tokenId`. Returns 0 if `tokenId` is not minted.\\n     */\\n    function _getApproved(uint256 tokenId) internal view virtual returns (address) {\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `owner`'s tokens, or `tokenId` in\\n     * particular (ignoring whether it is owned by `owner`).\\n     *\\n     * WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\\n     * assumption.\\n     */\\n    function _isAuthorized(address owner, address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        return\\n            spender != address(0) &&\\n            (owner == spender || isApprovedForAll(owner, spender) || _getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Checks if `spender` can operate on `tokenId`, assuming the provided `owner` is the actual owner.\\n     * Reverts if:\\n     * - `spender` does not have approval from `owner` for `tokenId`.\\n     * - `spender` does not have approval to manage all of `owner`'s assets.\\n     *\\n     * WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\\n     * assumption.\\n     */\\n    function _checkAuthorized(address owner, address spender, uint256 tokenId) internal view virtual {\\n        if (!_isAuthorized(owner, spender, tokenId)) {\\n            if (owner == address(0)) {\\n                revert ERC721NonexistentToken(tokenId);\\n            } else {\\n                revert ERC721InsufficientApproval(spender, tokenId);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Unsafe write access to the balances, used by extensions that \\\"mint\\\" tokens using an {ownerOf} override.\\n     *\\n     * NOTE: the value is limited to type(uint128).max. This protect against _balance overflow. It is unrealistic that\\n     * a uint256 would ever overflow from increments when these increments are bounded to uint128 values.\\n     *\\n     * WARNING: Increasing an account's balance using this function tends to be paired with an override of the\\n     * {_ownerOf} function to resolve the ownership of the corresponding tokens so that balances and ownership\\n     * remain consistent with one another.\\n     */\\n    function _increaseBalance(address account, uint128 value) internal virtual {\\n        unchecked {\\n            _balances[account] += value;\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from its current owner to `to`, or alternatively mints (or burns) if the current owner\\n     * (or `to`) is the zero address. Returns the owner of the `tokenId` before the update.\\n     *\\n     * The `auth` argument is optional. If the value passed is non 0, then this function will check that\\n     * `auth` is either the owner of the token, or approved to operate on the token (by the owner).\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * NOTE: If overriding this function in a way that tracks balances, see also {_increaseBalance}.\\n     */\\n    function _update(address to, uint256 tokenId, address auth) internal virtual returns (address) {\\n        address from = _ownerOf(tokenId);\\n\\n        // Perform (optional) operator check\\n        if (auth != address(0)) {\\n            _checkAuthorized(from, auth, tokenId);\\n        }\\n\\n        // Execute the update\\n        if (from != address(0)) {\\n            // Clear approval. No need to re-authorize or emit the Approval event\\n            _approve(address(0), tokenId, address(0), false);\\n\\n            unchecked {\\n                _balances[from] -= 1;\\n            }\\n        }\\n\\n        if (to != address(0)) {\\n            unchecked {\\n                _balances[to] += 1;\\n            }\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        return from;\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        address previousOwner = _update(to, tokenId, address(0));\\n        if (previousOwner != address(0)) {\\n            revert ERC721InvalidSender(address(0));\\n        }\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId`, transfers it to `to` and checks for `to` acceptance.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _mint(to, tokenId);\\n        ERC721Utils.checkOnERC721Received(_msgSender(), address(0), to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal {\\n        address previousOwner = _update(address(0), tokenId, address(0));\\n        if (previousOwner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(address from, address to, uint256 tokenId) internal {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        address previousOwner = _update(to, tokenId, address(0));\\n        if (previousOwner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        } else if (previousOwner != from) {\\n            revert ERC721IncorrectOwner(from, tokenId, previousOwner);\\n        }\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking that contract recipients\\n     * are aware of the ERC-721 standard to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is like {safeTransferFrom} in the sense that it invokes\\n     * {IERC721Receiver-onERC721Received} on the receiver, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - `to` cannot be the zero address.\\n     * - `from` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId) internal {\\n        _safeTransfer(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeTransfer-address-address-uint256-}[`_safeTransfer`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _transfer(from, to, tokenId);\\n        ERC721Utils.checkOnERC721Received(_msgSender(), from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * The `auth` argument is optional. If the value passed is non 0, then this function will check that `auth` is\\n     * either the owner of the token, or approved to operate on all tokens held by this owner.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\\n     */\\n    function _approve(address to, uint256 tokenId, address auth) internal {\\n        _approve(to, tokenId, auth, true);\\n    }\\n\\n    /**\\n     * @dev Variant of `_approve` with an optional flag to enable or disable the {Approval} event. The event is not\\n     * emitted in the context of transfers.\\n     */\\n    function _approve(address to, uint256 tokenId, address auth, bool emitEvent) internal virtual {\\n        // Avoid reading the owner unless necessary\\n        if (emitEvent || auth != address(0)) {\\n            address owner = _requireOwned(tokenId);\\n\\n            // We do not use _isAuthorized because single-token approvals should not be able to call approve\\n            if (auth != address(0) && owner != auth && !isApprovedForAll(owner, auth)) {\\n                revert ERC721InvalidApprover(auth);\\n            }\\n\\n            if (emitEvent) {\\n                emit Approval(owner, to, tokenId);\\n            }\\n        }\\n\\n        _tokenApprovals[tokenId] = to;\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Requirements:\\n     * - operator can't be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\\n        if (operator == address(0)) {\\n            revert ERC721InvalidOperator(operator);\\n        }\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` doesn't have a current owner (it hasn't been minted, or it has been burned).\\n     * Returns the owner.\\n     *\\n     * Overrides to ownership logic should be done to {_ownerOf}.\\n     */\\n    function _requireOwned(uint256 tokenId) internal view returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        if (owner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        }\\n        return owner;\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC721/extensions/ERC721Burnable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC721/extensions/ERC721Burnable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ERC721} from \\\"../ERC721.sol\\\";\\nimport {Context} from \\\"../../../utils/Context.sol\\\";\\n\\n/**\\n * @title ERC-721 Burnable Token\\n * @dev ERC-721 Token that can be burned (destroyed).\\n */\\nabstract contract ERC721Burnable is Context, ERC721 {\\n    /**\\n     * @dev Burns `tokenId`. See {ERC721-_burn}.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own `tokenId` or be an approved operator.\\n     */\\n    function burn(uint256 tokenId) public virtual {\\n        // Setting an \\\"auth\\\" arguments enables the `_isAuthorized` check which verifies that the token exists\\n        // (from != 0). Therefore, it is not needed to verify that the return value is not 0 here.\\n        _update(address(0), tokenId, _msgSender());\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC721/extensions/ERC721Enumerable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ERC721} from \\\"../ERC721.sol\\\";\\nimport {IERC721Enumerable} from \\\"./IERC721Enumerable.sol\\\";\\nimport {IERC165} from \\\"../../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the ERC that adds enumerability\\n * of all the token ids in the contract as well as all token ids owned by each account.\\n *\\n * CAUTION: {ERC721} extensions that implement custom `balanceOf` logic, such as {ERC721Consecutive},\\n * interfere with enumerability and should not be used together with {ERC721Enumerable}.\\n */\\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\\n    mapping(address owner => mapping(uint256 index => uint256)) private _ownedTokens;\\n    mapping(uint256 tokenId => uint256) private _ownedTokensIndex;\\n\\n    uint256[] private _allTokens;\\n    mapping(uint256 tokenId => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev An `owner`'s token query was out of bounds for `index`.\\n     *\\n     * NOTE: The owner being `address(0)` indicates a global out of bounds index.\\n     */\\n    error ERC721OutOfBoundsIndex(address owner, uint256 index);\\n\\n    /**\\n     * @dev Batch mint is not allowed.\\n     */\\n    error ERC721EnumerableForbiddenBatchMint();\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual returns (uint256) {\\n        if (index >= balanceOf(owner)) {\\n            revert ERC721OutOfBoundsIndex(owner, index);\\n        }\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual returns (uint256) {\\n        if (index >= totalSupply()) {\\n            revert ERC721OutOfBoundsIndex(address(0), index);\\n        }\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev See {ERC721-_update}.\\n     */\\n    function _update(address to, uint256 tokenId, address auth) internal virtual override returns (address) {\\n        address previousOwner = super._update(to, tokenId, auth);\\n\\n        if (previousOwner == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (previousOwner != to) {\\n            _removeTokenFromOwnerEnumeration(previousOwner, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (previousOwner != to) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n\\n        return previousOwner;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = balanceOf(to) - 1;\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = balanceOf(from);\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        mapping(uint256 index => uint256) storage _ownedTokensByOwner = _ownedTokens[from];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokensByOwner[lastTokenIndex];\\n\\n            _ownedTokensByOwner[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokensByOwner[lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n\\n    /**\\n     * See {ERC721-_increaseBalance}. We need that to account tokens that were minted in batch\\n     */\\n    function _increaseBalance(address account, uint128 amount) internal virtual override {\\n        if (amount > 0) {\\n            revert ERC721EnumerableForbiddenBatchMint();\\n        }\\n        super._increaseBalance(account, amount);\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC721/extensions/ERC721URIStorage.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ERC721} from \\\"../ERC721.sol\\\";\\nimport {Strings} from \\\"../../../utils/Strings.sol\\\";\\nimport {IERC4906} from \\\"../../../interfaces/IERC4906.sol\\\";\\nimport {IERC165} from \\\"../../../interfaces/IERC165.sol\\\";\\n\\n/**\\n * @dev ERC-721 token with storage based token URI management.\\n */\\nabstract contract ERC721URIStorage is IERC4906, ERC721 {\\n    using Strings for uint256;\\n\\n    // Interface ID as defined in ERC-4906. This does not correspond to a traditional interface ID as ERC-4906 only\\n    // defines events and does not include any external function.\\n    bytes4 private constant ERC4906_INTERFACE_ID = bytes4(0x49064906);\\n\\n    // Optional mapping for token URIs\\n    mapping(uint256 tokenId => string) private _tokenURIs;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC721, IERC165) returns (bool) {\\n        return interfaceId == ERC4906_INTERFACE_ID || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireOwned(tokenId);\\n\\n        string memory _tokenURI = _tokenURIs[tokenId];\\n        string memory base = _baseURI();\\n\\n        // If there is no base URI, return the token URI.\\n        if (bytes(base).length == 0) {\\n            return _tokenURI;\\n        }\\n        // If both are set, concatenate the baseURI and tokenURI (via string.concat).\\n        if (bytes(_tokenURI).length > 0) {\\n            return string.concat(base, _tokenURI);\\n        }\\n\\n        return super.tokenURI(tokenId);\\n    }\\n\\n    /**\\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\\n     *\\n     * Emits {MetadataUpdate}.\\n     */\\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\\n        _tokenURIs[tokenId] = _tokenURI;\\n        emit MetadataUpdate(tokenId);\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC721/IERC721.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC-721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC-721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\\n     *   {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC-721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @title ERC-721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC-721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be\\n     * reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC721/utils/ERC721Utils.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC721/utils/ERC721Utils.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721Receiver} from \\\"../IERC721Receiver.sol\\\";\\nimport {IERC721Errors} from \\\"../../../interfaces/draft-IERC6093.sol\\\";\\n\\n/**\\n * @dev Library that provide common ERC-721 utility functions.\\n *\\n * See https://eips.ethereum.org/EIPS/eip-721[ERC-721].\\n *\\n * _Available since v5.1._\\n */\\nlibrary ERC721Utils {\\n    /**\\n     * @dev Performs an acceptance check for the provided `operator` by calling {IERC721-onERC721Received}\\n     * on the `to` address. The `operator` is generally the address that initiated the token transfer (i.e. `msg.sender`).\\n     *\\n     * The acceptance call is not executed and treated as a no-op if the target address doesn't contain code (i.e. an EOA).\\n     * Otherwise, the recipient must implement {IERC721Receiver-onERC721Received} and return the acceptance magic value to accept\\n     * the transfer.\\n     */\\n    function checkOnERC721Received(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal {\\n        if (to.code.length > 0) {\\n            try IERC721Receiver(to).onERC721Received(operator, from, tokenId, data) returns (bytes4 retval) {\\n                if (retval != IERC721Receiver.onERC721Received.selector) {\\n                    // Token rejected\\n                    revert IERC721Errors.ERC721InvalidReceiver(to);\\n                }\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    // non-IERC721Receiver implementer\\n                    revert IERC721Errors.ERC721InvalidReceiver(to);\\n                } else {\\n                    assembly (\\\"memory-safe\\\") {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        }\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/Context.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/introspection/ERC165.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC-165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/introspection/IERC165.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/math/Math.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Panic} from \\\"../Panic.sol\\\";\\nimport {SafeCast} from \\\"./SafeCast.sol\\\";\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an success flag (no overflow).\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an success flag (no overflow).\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an success flag (no overflow).\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a success flag (no division by zero).\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a success flag (no division by zero).\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool success, uint256 result) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Branchless ternary evaluation for `a ? b : c`. Gas costs are constant.\\n     *\\n     * IMPORTANT: This function may reduce bytecode size and consume less gas when used standalone.\\n     * However, the compiler may optimize Solidity ternary operations (i.e. `a ? b : c`) to only compute\\n     * one branch when needed, making this function more expensive.\\n     */\\n    function ternary(bool condition, uint256 a, uint256 b) internal pure returns (uint256) {\\n        unchecked {\\n            // branchless ternary works because:\\n            // b ^ (a ^ b) == a\\n            // b ^ 0 == b\\n            return b ^ ((a ^ b) * SafeCast.toUint(condition));\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return ternary(a > b, a, b);\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return ternary(a < b, a, b);\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            Panic.panic(Panic.DIVISION_BY_ZERO);\\n        }\\n\\n        // The following calculation ensures accurate ceiling division without overflow.\\n        // Since a is non-zero, (a - 1) / b will not overflow.\\n        // The largest possible result occurs when (a - 1) / b is type(uint256).max,\\n        // but the largest value we can obtain is type(uint256).max - 1, which happens\\n        // when a = type(uint256).max and b = 1.\\n        unchecked {\\n            return SafeCast.toUint(a > 0) * ((a - 1) / b + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     *\\n     * Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2²⁵⁶ and mod 2²⁵⁶ - 1, then use\\n            // the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2²⁵⁶ + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2²⁵⁶. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                Panic.panic(ternary(denominator == 0, Panic.DIVISION_BY_ZERO, Panic.UNDER_OVERFLOW));\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2²⁵⁶ / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2²⁵⁶. Now that denominator is an odd number, it has an inverse modulo 2²⁵⁶ such\\n            // that denominator * inv ≡ 1 mod 2²⁵⁶. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv ≡ 1 mod 2⁴.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2⁸\\n            inverse *= 2 - denominator * inverse; // inverse mod 2¹⁶\\n            inverse *= 2 - denominator * inverse; // inverse mod 2³²\\n            inverse *= 2 - denominator * inverse; // inverse mod 2⁶⁴\\n            inverse *= 2 - denominator * inverse; // inverse mod 2¹²⁸\\n            inverse *= 2 - denominator * inverse; // inverse mod 2²⁵⁶\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2²⁵⁶. Since the preconditions guarantee that the outcome is\\n            // less than 2²⁵⁶, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        return mulDiv(x, y, denominator) + SafeCast.toUint(unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0);\\n    }\\n\\n    /**\\n     * @dev Calculate the modular multiplicative inverse of a number in Z/nZ.\\n     *\\n     * If n is a prime, then Z/nZ is a field. In that case all elements are inversible, except 0.\\n     * If n is not a prime, then Z/nZ is not a field, and some elements might not be inversible.\\n     *\\n     * If the input value is not inversible, 0 is returned.\\n     *\\n     * NOTE: If you know for sure that n is (big) a prime, it may be cheaper to use Fermat's little theorem and get the\\n     * inverse using `Math.modExp(a, n - 2, n)`. See {invModPrime}.\\n     */\\n    function invMod(uint256 a, uint256 n) internal pure returns (uint256) {\\n        unchecked {\\n            if (n == 0) return 0;\\n\\n            // The inverse modulo is calculated using the Extended Euclidean Algorithm (iterative version)\\n            // Used to compute integers x and y such that: ax + ny = gcd(a, n).\\n            // When the gcd is 1, then the inverse of a modulo n exists and it's x.\\n            // ax + ny = 1\\n            // ax = 1 + (-y)n\\n            // ax ≡ 1 (mod n) # x is the inverse of a modulo n\\n\\n            // If the remainder is 0 the gcd is n right away.\\n            uint256 remainder = a % n;\\n            uint256 gcd = n;\\n\\n            // Therefore the initial coefficients are:\\n            // ax + ny = gcd(a, n) = n\\n            // 0a + 1n = n\\n            int256 x = 0;\\n            int256 y = 1;\\n\\n            while (remainder != 0) {\\n                uint256 quotient = gcd / remainder;\\n\\n                (gcd, remainder) = (\\n                    // The old remainder is the next gcd to try.\\n                    remainder,\\n                    // Compute the next remainder.\\n                    // Can't overflow given that (a % gcd) * (gcd // (a % gcd)) <= gcd\\n                    // where gcd is at most n (capped to type(uint256).max)\\n                    gcd - remainder * quotient\\n                );\\n\\n                (x, y) = (\\n                    // Increment the coefficient of a.\\n                    y,\\n                    // Decrement the coefficient of n.\\n                    // Can overflow, but the result is casted to uint256 so that the\\n                    // next value of y is \\\"wrapped around\\\" to a value between 0 and n - 1.\\n                    x - y * int256(quotient)\\n                );\\n            }\\n\\n            if (gcd != 1) return 0; // No inverse exists.\\n            return ternary(x < 0, n - uint256(-x), uint256(x)); // Wrap the result if it's negative.\\n        }\\n    }\\n\\n    /**\\n     * @dev Variant of {invMod}. More efficient, but only works if `p` is known to be a prime greater than `2`.\\n     *\\n     * From https://en.wikipedia.org/wiki/Fermat%27s_little_theorem[Fermat's little theorem], we know that if p is\\n     * prime, then `a**(p-1) ≡ 1 mod p`. As a consequence, we have `a * a**(p-2) ≡ 1 mod p`, which means that\\n     * `a**(p-2)` is the modular multiplicative inverse of a in Fp.\\n     *\\n     * NOTE: this function does NOT check that `p` is a prime greater than `2`.\\n     */\\n    function invModPrime(uint256 a, uint256 p) internal view returns (uint256) {\\n        unchecked {\\n            return Math.modExp(a, p - 2, p);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the modular exponentiation of the specified base, exponent and modulus (b ** e % m)\\n     *\\n     * Requirements:\\n     * - modulus can't be zero\\n     * - underlying staticcall to precompile must succeed\\n     *\\n     * IMPORTANT: The result is only valid if the underlying call succeeds. When using this function, make\\n     * sure the chain you're using it on supports the precompiled contract for modular exponentiation\\n     * at address 0x05 as specified in https://eips.ethereum.org/EIPS/eip-198[EIP-198]. Otherwise,\\n     * the underlying function will succeed given the lack of a revert, but the result may be incorrectly\\n     * interpreted as 0.\\n     */\\n    function modExp(uint256 b, uint256 e, uint256 m) internal view returns (uint256) {\\n        (bool success, uint256 result) = tryModExp(b, e, m);\\n        if (!success) {\\n            Panic.panic(Panic.DIVISION_BY_ZERO);\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the modular exponentiation of the specified base, exponent and modulus (b ** e % m).\\n     * It includes a success flag indicating if the operation succeeded. Operation will be marked as failed if trying\\n     * to operate modulo 0 or if the underlying precompile reverted.\\n     *\\n     * IMPORTANT: The result is only valid if the success flag is true. When using this function, make sure the chain\\n     * you're using it on supports the precompiled contract for modular exponentiation at address 0x05 as specified in\\n     * https://eips.ethereum.org/EIPS/eip-198[EIP-198]. Otherwise, the underlying function will succeed given the lack\\n     * of a revert, but the result may be incorrectly interpreted as 0.\\n     */\\n    function tryModExp(uint256 b, uint256 e, uint256 m) internal view returns (bool success, uint256 result) {\\n        if (m == 0) return (false, 0);\\n        assembly (\\\"memory-safe\\\") {\\n            let ptr := mload(0x40)\\n            // | Offset    | Content    | Content (Hex)                                                      |\\n            // |-----------|------------|--------------------------------------------------------------------|\\n            // | 0x00:0x1f | size of b  | 0x0000000000000000000000000000000000000000000000000000000000000020 |\\n            // | 0x20:0x3f | size of e  | 0x0000000000000000000000000000000000000000000000000000000000000020 |\\n            // | 0x40:0x5f | size of m  | 0x0000000000000000000000000000000000000000000000000000000000000020 |\\n            // | 0x60:0x7f | value of b | 0x<.............................................................b> |\\n            // | 0x80:0x9f | value of e | 0x<.............................................................e> |\\n            // | 0xa0:0xbf | value of m | 0x<.............................................................m> |\\n            mstore(ptr, 0x20)\\n            mstore(add(ptr, 0x20), 0x20)\\n            mstore(add(ptr, 0x40), 0x20)\\n            mstore(add(ptr, 0x60), b)\\n            mstore(add(ptr, 0x80), e)\\n            mstore(add(ptr, 0xa0), m)\\n\\n            // Given the result < m, it's guaranteed to fit in 32 bytes,\\n            // so we can use the memory scratch space located at offset 0.\\n            success := staticcall(gas(), 0x05, ptr, 0xc0, 0x00, 0x20)\\n            result := mload(0x00)\\n        }\\n    }\\n\\n    /**\\n     * @dev Variant of {modExp} that supports inputs of arbitrary length.\\n     */\\n    function modExp(bytes memory b, bytes memory e, bytes memory m) internal view returns (bytes memory) {\\n        (bool success, bytes memory result) = tryModExp(b, e, m);\\n        if (!success) {\\n            Panic.panic(Panic.DIVISION_BY_ZERO);\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Variant of {tryModExp} that supports inputs of arbitrary length.\\n     */\\n    function tryModExp(\\n        bytes memory b,\\n        bytes memory e,\\n        bytes memory m\\n    ) internal view returns (bool success, bytes memory result) {\\n        if (_zeroBytes(m)) return (false, new bytes(0));\\n\\n        uint256 mLen = m.length;\\n\\n        // Encode call args in result and move the free memory pointer\\n        result = abi.encodePacked(b.length, e.length, mLen, b, e, m);\\n\\n        assembly (\\\"memory-safe\\\") {\\n            let dataPtr := add(result, 0x20)\\n            // Write result on top of args to avoid allocating extra memory.\\n            success := staticcall(gas(), 0x05, dataPtr, mload(result), dataPtr, mLen)\\n            // Overwrite the length.\\n            // result.length > returndatasize() is guaranteed because returndatasize() == m.length\\n            mstore(result, mLen)\\n            // Set the memory pointer after the returned data.\\n            mstore(0x40, add(dataPtr, mLen))\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether the provided byte array is zero.\\n     */\\n    function _zeroBytes(bytes memory byteArray) private pure returns (bool) {\\n        for (uint256 i = 0; i < byteArray.length; ++i) {\\n            if (byteArray[i] != 0) {\\n                return false;\\n            }\\n        }\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * This method is based on Newton's method for computing square roots; the algorithm is restricted to only\\n     * using integer operations.\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        unchecked {\\n            // Take care of easy edge cases when a == 0 or a == 1\\n            if (a <= 1) {\\n                return a;\\n            }\\n\\n            // In this function, we use Newton's method to get a root of `f(x) := x² - a`. It involves building a\\n            // sequence x_n that converges toward sqrt(a). For each iteration x_n, we also define the error between\\n            // the current value as `ε_n = | x_n - sqrt(a) |`.\\n            //\\n            // For our first estimation, we consider `e` the smallest power of 2 which is bigger than the square root\\n            // of the target. (i.e. `2**(e-1) ≤ sqrt(a) < 2**e`). We know that `e ≤ 128` because `(2¹²⁸)² = 2²⁵⁶` is\\n            // bigger than any uint256.\\n            //\\n            // By noticing that\\n            // `2**(e-1) ≤ sqrt(a) < 2**e → (2**(e-1))² ≤ a < (2**e)² → 2**(2*e-2) ≤ a < 2**(2*e)`\\n            // we can deduce that `e - 1` is `log2(a) / 2`. We can thus compute `x_n = 2**(e-1)` using a method similar\\n            // to the msb function.\\n            uint256 aa = a;\\n            uint256 xn = 1;\\n\\n            if (aa >= (1 << 128)) {\\n                aa >>= 128;\\n                xn <<= 64;\\n            }\\n            if (aa >= (1 << 64)) {\\n                aa >>= 64;\\n                xn <<= 32;\\n            }\\n            if (aa >= (1 << 32)) {\\n                aa >>= 32;\\n                xn <<= 16;\\n            }\\n            if (aa >= (1 << 16)) {\\n                aa >>= 16;\\n                xn <<= 8;\\n            }\\n            if (aa >= (1 << 8)) {\\n                aa >>= 8;\\n                xn <<= 4;\\n            }\\n            if (aa >= (1 << 4)) {\\n                aa >>= 4;\\n                xn <<= 2;\\n            }\\n            if (aa >= (1 << 2)) {\\n                xn <<= 1;\\n            }\\n\\n            // We now have x_n such that `x_n = 2**(e-1) ≤ sqrt(a) < 2**e = 2 * x_n`. This implies ε_n ≤ 2**(e-1).\\n            //\\n            // We can refine our estimation by noticing that the middle of that interval minimizes the error.\\n            // If we move x_n to equal 2**(e-1) + 2**(e-2), then we reduce the error to ε_n ≤ 2**(e-2).\\n            // This is going to be our x_0 (and ε_0)\\n            xn = (3 * xn) >> 1; // ε_0 := | x_0 - sqrt(a) | ≤ 2**(e-2)\\n\\n            // From here, Newton's method give us:\\n            // x_{n+1} = (x_n + a / x_n) / 2\\n            //\\n            // One should note that:\\n            // x_{n+1}² - a = ((x_n + a / x_n) / 2)² - a\\n            //              = ((x_n² + a) / (2 * x_n))² - a\\n            //              = (x_n⁴ + 2 * a * x_n² + a²) / (4 * x_n²) - a\\n            //              = (x_n⁴ + 2 * a * x_n² + a² - 4 * a * x_n²) / (4 * x_n²)\\n            //              = (x_n⁴ - 2 * a * x_n² + a²) / (4 * x_n²)\\n            //              = (x_n² - a)² / (2 * x_n)²\\n            //              = ((x_n² - a) / (2 * x_n))²\\n            //              ≥ 0\\n            // Which proves that for all n ≥ 1, sqrt(a) ≤ x_n\\n            //\\n            // This gives us the proof of quadratic convergence of the sequence:\\n            // ε_{n+1} = | x_{n+1} - sqrt(a) |\\n            //         = | (x_n + a / x_n) / 2 - sqrt(a) |\\n            //         = | (x_n² + a - 2*x_n*sqrt(a)) / (2 * x_n) |\\n            //         = | (x_n - sqrt(a))² / (2 * x_n) |\\n            //         = | ε_n² / (2 * x_n) |\\n            //         = ε_n² / | (2 * x_n) |\\n            //\\n            // For the first iteration, we have a special case where x_0 is known:\\n            // ε_1 = ε_0² / | (2 * x_0) |\\n            //     ≤ (2**(e-2))² / (2 * (2**(e-1) + 2**(e-2)))\\n            //     ≤ 2**(2*e-4) / (3 * 2**(e-1))\\n            //     ≤ 2**(e-3) / 3\\n            //     ≤ 2**(e-3-log2(3))\\n            //     ≤ 2**(e-4.5)\\n            //\\n            // For the following iterations, we use the fact that, 2**(e-1) ≤ sqrt(a) ≤ x_n:\\n            // ε_{n+1} = ε_n² / | (2 * x_n) |\\n            //         ≤ (2**(e-k))² / (2 * 2**(e-1))\\n            //         ≤ 2**(2*e-2*k) / 2**e\\n            //         ≤ 2**(e-2*k)\\n            xn = (xn + a / xn) >> 1; // ε_1 := | x_1 - sqrt(a) | ≤ 2**(e-4.5)  -- special case, see above\\n            xn = (xn + a / xn) >> 1; // ε_2 := | x_2 - sqrt(a) | ≤ 2**(e-9)    -- general case with k = 4.5\\n            xn = (xn + a / xn) >> 1; // ε_3 := | x_3 - sqrt(a) | ≤ 2**(e-18)   -- general case with k = 9\\n            xn = (xn + a / xn) >> 1; // ε_4 := | x_4 - sqrt(a) | ≤ 2**(e-36)   -- general case with k = 18\\n            xn = (xn + a / xn) >> 1; // ε_5 := | x_5 - sqrt(a) | ≤ 2**(e-72)   -- general case with k = 36\\n            xn = (xn + a / xn) >> 1; // ε_6 := | x_6 - sqrt(a) | ≤ 2**(e-144)  -- general case with k = 72\\n\\n            // Because e ≤ 128 (as discussed during the first estimation phase), we know have reached a precision\\n            // ε_6 ≤ 2**(e-144) < 1. Given we're operating on integers, then we can ensure that xn is now either\\n            // sqrt(a) or sqrt(a) + 1.\\n            return xn - SafeCast.toUint(xn > a / xn);\\n        }\\n    }\\n\\n    /**\\n     * @dev Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && result * result < a);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        uint256 exp;\\n        unchecked {\\n            exp = 128 * SafeCast.toUint(value > (1 << 128) - 1);\\n            value >>= exp;\\n            result += exp;\\n\\n            exp = 64 * SafeCast.toUint(value > (1 << 64) - 1);\\n            value >>= exp;\\n            result += exp;\\n\\n            exp = 32 * SafeCast.toUint(value > (1 << 32) - 1);\\n            value >>= exp;\\n            result += exp;\\n\\n            exp = 16 * SafeCast.toUint(value > (1 << 16) - 1);\\n            value >>= exp;\\n            result += exp;\\n\\n            exp = 8 * SafeCast.toUint(value > (1 << 8) - 1);\\n            value >>= exp;\\n            result += exp;\\n\\n            exp = 4 * SafeCast.toUint(value > (1 << 4) - 1);\\n            value >>= exp;\\n            result += exp;\\n\\n            exp = 2 * SafeCast.toUint(value > (1 << 2) - 1);\\n            value >>= exp;\\n            result += exp;\\n\\n            result += SafeCast.toUint(value > 1);\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && 1 << result < value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && 10 ** result < value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        uint256 isGt;\\n        unchecked {\\n            isGt = SafeCast.toUint(value > (1 << 128) - 1);\\n            value >>= isGt * 128;\\n            result += isGt * 16;\\n\\n            isGt = SafeCast.toUint(value > (1 << 64) - 1);\\n            value >>= isGt * 64;\\n            result += isGt * 8;\\n\\n            isGt = SafeCast.toUint(value > (1 << 32) - 1);\\n            value >>= isGt * 32;\\n            result += isGt * 4;\\n\\n            isGt = SafeCast.toUint(value > (1 << 16) - 1);\\n            value >>= isGt * 16;\\n            result += isGt * 2;\\n\\n            result += SafeCast.toUint(value > (1 << 8) - 1);\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + SafeCast.toUint(unsignedRoundsUp(rounding) && 1 << (result << 3) < value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/math/SafeCast.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/math/SafeCast.sol)\\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX/bool casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Value doesn't fit in an uint of `bits` size.\\n     */\\n    error SafeCastOverflowedUintDowncast(uint8 bits, uint256 value);\\n\\n    /**\\n     * @dev An int value doesn't fit in an uint of `bits` size.\\n     */\\n    error SafeCastOverflowedIntToUint(int256 value);\\n\\n    /**\\n     * @dev Value doesn't fit in an int of `bits` size.\\n     */\\n    error SafeCastOverflowedIntDowncast(uint8 bits, int256 value);\\n\\n    /**\\n     * @dev An uint value doesn't fit in an int of `bits` size.\\n     */\\n    error SafeCastOverflowedUintToInt(uint256 value);\\n\\n    /**\\n     * @dev Returns the downcasted uint248 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint248).\\n     *\\n     * Counterpart to Solidity's `uint248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     */\\n    function toUint248(uint256 value) internal pure returns (uint248) {\\n        if (value > type(uint248).max) {\\n            revert SafeCastOverflowedUintDowncast(248, value);\\n        }\\n        return uint248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint240 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint240).\\n     *\\n     * Counterpart to Solidity's `uint240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     */\\n    function toUint240(uint256 value) internal pure returns (uint240) {\\n        if (value > type(uint240).max) {\\n            revert SafeCastOverflowedUintDowncast(240, value);\\n        }\\n        return uint240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint232 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint232).\\n     *\\n     * Counterpart to Solidity's `uint232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     */\\n    function toUint232(uint256 value) internal pure returns (uint232) {\\n        if (value > type(uint232).max) {\\n            revert SafeCastOverflowedUintDowncast(232, value);\\n        }\\n        return uint232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        if (value > type(uint224).max) {\\n            revert SafeCastOverflowedUintDowncast(224, value);\\n        }\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint216 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint216).\\n     *\\n     * Counterpart to Solidity's `uint216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     */\\n    function toUint216(uint256 value) internal pure returns (uint216) {\\n        if (value > type(uint216).max) {\\n            revert SafeCastOverflowedUintDowncast(216, value);\\n        }\\n        return uint216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint208 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint208).\\n     *\\n     * Counterpart to Solidity's `uint208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     */\\n    function toUint208(uint256 value) internal pure returns (uint208) {\\n        if (value > type(uint208).max) {\\n            revert SafeCastOverflowedUintDowncast(208, value);\\n        }\\n        return uint208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint200 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint200).\\n     *\\n     * Counterpart to Solidity's `uint200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     */\\n    function toUint200(uint256 value) internal pure returns (uint200) {\\n        if (value > type(uint200).max) {\\n            revert SafeCastOverflowedUintDowncast(200, value);\\n        }\\n        return uint200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint192 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint192).\\n     *\\n     * Counterpart to Solidity's `uint192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     */\\n    function toUint192(uint256 value) internal pure returns (uint192) {\\n        if (value > type(uint192).max) {\\n            revert SafeCastOverflowedUintDowncast(192, value);\\n        }\\n        return uint192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint184 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint184).\\n     *\\n     * Counterpart to Solidity's `uint184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     */\\n    function toUint184(uint256 value) internal pure returns (uint184) {\\n        if (value > type(uint184).max) {\\n            revert SafeCastOverflowedUintDowncast(184, value);\\n        }\\n        return uint184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint176 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint176).\\n     *\\n     * Counterpart to Solidity's `uint176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     */\\n    function toUint176(uint256 value) internal pure returns (uint176) {\\n        if (value > type(uint176).max) {\\n            revert SafeCastOverflowedUintDowncast(176, value);\\n        }\\n        return uint176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint168 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint168).\\n     *\\n     * Counterpart to Solidity's `uint168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     */\\n    function toUint168(uint256 value) internal pure returns (uint168) {\\n        if (value > type(uint168).max) {\\n            revert SafeCastOverflowedUintDowncast(168, value);\\n        }\\n        return uint168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint160 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint160).\\n     *\\n     * Counterpart to Solidity's `uint160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     */\\n    function toUint160(uint256 value) internal pure returns (uint160) {\\n        if (value > type(uint160).max) {\\n            revert SafeCastOverflowedUintDowncast(160, value);\\n        }\\n        return uint160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint152 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint152).\\n     *\\n     * Counterpart to Solidity's `uint152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     */\\n    function toUint152(uint256 value) internal pure returns (uint152) {\\n        if (value > type(uint152).max) {\\n            revert SafeCastOverflowedUintDowncast(152, value);\\n        }\\n        return uint152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint144 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint144).\\n     *\\n     * Counterpart to Solidity's `uint144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     */\\n    function toUint144(uint256 value) internal pure returns (uint144) {\\n        if (value > type(uint144).max) {\\n            revert SafeCastOverflowedUintDowncast(144, value);\\n        }\\n        return uint144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint136 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint136).\\n     *\\n     * Counterpart to Solidity's `uint136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     */\\n    function toUint136(uint256 value) internal pure returns (uint136) {\\n        if (value > type(uint136).max) {\\n            revert SafeCastOverflowedUintDowncast(136, value);\\n        }\\n        return uint136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        if (value > type(uint128).max) {\\n            revert SafeCastOverflowedUintDowncast(128, value);\\n        }\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint120 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint120).\\n     *\\n     * Counterpart to Solidity's `uint120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     */\\n    function toUint120(uint256 value) internal pure returns (uint120) {\\n        if (value > type(uint120).max) {\\n            revert SafeCastOverflowedUintDowncast(120, value);\\n        }\\n        return uint120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint112 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint112).\\n     *\\n     * Counterpart to Solidity's `uint112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     */\\n    function toUint112(uint256 value) internal pure returns (uint112) {\\n        if (value > type(uint112).max) {\\n            revert SafeCastOverflowedUintDowncast(112, value);\\n        }\\n        return uint112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint104 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint104).\\n     *\\n     * Counterpart to Solidity's `uint104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     */\\n    function toUint104(uint256 value) internal pure returns (uint104) {\\n        if (value > type(uint104).max) {\\n            revert SafeCastOverflowedUintDowncast(104, value);\\n        }\\n        return uint104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        if (value > type(uint96).max) {\\n            revert SafeCastOverflowedUintDowncast(96, value);\\n        }\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint88 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint88).\\n     *\\n     * Counterpart to Solidity's `uint88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     */\\n    function toUint88(uint256 value) internal pure returns (uint88) {\\n        if (value > type(uint88).max) {\\n            revert SafeCastOverflowedUintDowncast(88, value);\\n        }\\n        return uint88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint80 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint80).\\n     *\\n     * Counterpart to Solidity's `uint80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     */\\n    function toUint80(uint256 value) internal pure returns (uint80) {\\n        if (value > type(uint80).max) {\\n            revert SafeCastOverflowedUintDowncast(80, value);\\n        }\\n        return uint80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint72 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint72).\\n     *\\n     * Counterpart to Solidity's `uint72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     */\\n    function toUint72(uint256 value) internal pure returns (uint72) {\\n        if (value > type(uint72).max) {\\n            revert SafeCastOverflowedUintDowncast(72, value);\\n        }\\n        return uint72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        if (value > type(uint64).max) {\\n            revert SafeCastOverflowedUintDowncast(64, value);\\n        }\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint56 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint56).\\n     *\\n     * Counterpart to Solidity's `uint56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     */\\n    function toUint56(uint256 value) internal pure returns (uint56) {\\n        if (value > type(uint56).max) {\\n            revert SafeCastOverflowedUintDowncast(56, value);\\n        }\\n        return uint56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint48 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint48).\\n     *\\n     * Counterpart to Solidity's `uint48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     */\\n    function toUint48(uint256 value) internal pure returns (uint48) {\\n        if (value > type(uint48).max) {\\n            revert SafeCastOverflowedUintDowncast(48, value);\\n        }\\n        return uint48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint40 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint40).\\n     *\\n     * Counterpart to Solidity's `uint40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     */\\n    function toUint40(uint256 value) internal pure returns (uint40) {\\n        if (value > type(uint40).max) {\\n            revert SafeCastOverflowedUintDowncast(40, value);\\n        }\\n        return uint40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        if (value > type(uint32).max) {\\n            revert SafeCastOverflowedUintDowncast(32, value);\\n        }\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint24 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint24).\\n     *\\n     * Counterpart to Solidity's `uint24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     */\\n    function toUint24(uint256 value) internal pure returns (uint24) {\\n        if (value > type(uint24).max) {\\n            revert SafeCastOverflowedUintDowncast(24, value);\\n        }\\n        return uint24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        if (value > type(uint16).max) {\\n            revert SafeCastOverflowedUintDowncast(16, value);\\n        }\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        if (value > type(uint8).max) {\\n            revert SafeCastOverflowedUintDowncast(8, value);\\n        }\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        if (value < 0) {\\n            revert SafeCastOverflowedIntToUint(value);\\n        }\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int248 from int256, reverting on\\n     * overflow (when the input is less than smallest int248 or\\n     * greater than largest int248).\\n     *\\n     * Counterpart to Solidity's `int248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     */\\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\\n        downcasted = int248(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(248, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int240 from int256, reverting on\\n     * overflow (when the input is less than smallest int240 or\\n     * greater than largest int240).\\n     *\\n     * Counterpart to Solidity's `int240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     */\\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\\n        downcasted = int240(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(240, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int232 from int256, reverting on\\n     * overflow (when the input is less than smallest int232 or\\n     * greater than largest int232).\\n     *\\n     * Counterpart to Solidity's `int232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     */\\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\\n        downcasted = int232(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(232, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int224 from int256, reverting on\\n     * overflow (when the input is less than smallest int224 or\\n     * greater than largest int224).\\n     *\\n     * Counterpart to Solidity's `int224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\\n        downcasted = int224(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(224, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int216 from int256, reverting on\\n     * overflow (when the input is less than smallest int216 or\\n     * greater than largest int216).\\n     *\\n     * Counterpart to Solidity's `int216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     */\\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\\n        downcasted = int216(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(216, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int208 from int256, reverting on\\n     * overflow (when the input is less than smallest int208 or\\n     * greater than largest int208).\\n     *\\n     * Counterpart to Solidity's `int208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     */\\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\\n        downcasted = int208(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(208, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int200 from int256, reverting on\\n     * overflow (when the input is less than smallest int200 or\\n     * greater than largest int200).\\n     *\\n     * Counterpart to Solidity's `int200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     */\\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\\n        downcasted = int200(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(200, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int192 from int256, reverting on\\n     * overflow (when the input is less than smallest int192 or\\n     * greater than largest int192).\\n     *\\n     * Counterpart to Solidity's `int192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     */\\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\\n        downcasted = int192(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(192, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int184 from int256, reverting on\\n     * overflow (when the input is less than smallest int184 or\\n     * greater than largest int184).\\n     *\\n     * Counterpart to Solidity's `int184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     */\\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\\n        downcasted = int184(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(184, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int176 from int256, reverting on\\n     * overflow (when the input is less than smallest int176 or\\n     * greater than largest int176).\\n     *\\n     * Counterpart to Solidity's `int176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     */\\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\\n        downcasted = int176(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(176, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int168 from int256, reverting on\\n     * overflow (when the input is less than smallest int168 or\\n     * greater than largest int168).\\n     *\\n     * Counterpart to Solidity's `int168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     */\\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\\n        downcasted = int168(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(168, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int160 from int256, reverting on\\n     * overflow (when the input is less than smallest int160 or\\n     * greater than largest int160).\\n     *\\n     * Counterpart to Solidity's `int160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     */\\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\\n        downcasted = int160(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(160, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int152 from int256, reverting on\\n     * overflow (when the input is less than smallest int152 or\\n     * greater than largest int152).\\n     *\\n     * Counterpart to Solidity's `int152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     */\\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\\n        downcasted = int152(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(152, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int144 from int256, reverting on\\n     * overflow (when the input is less than smallest int144 or\\n     * greater than largest int144).\\n     *\\n     * Counterpart to Solidity's `int144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     */\\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\\n        downcasted = int144(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(144, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int136 from int256, reverting on\\n     * overflow (when the input is less than smallest int136 or\\n     * greater than largest int136).\\n     *\\n     * Counterpart to Solidity's `int136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     */\\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\\n        downcasted = int136(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(136, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\\n        downcasted = int128(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(128, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int120 from int256, reverting on\\n     * overflow (when the input is less than smallest int120 or\\n     * greater than largest int120).\\n     *\\n     * Counterpart to Solidity's `int120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     */\\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\\n        downcasted = int120(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(120, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int112 from int256, reverting on\\n     * overflow (when the input is less than smallest int112 or\\n     * greater than largest int112).\\n     *\\n     * Counterpart to Solidity's `int112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     */\\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\\n        downcasted = int112(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(112, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int104 from int256, reverting on\\n     * overflow (when the input is less than smallest int104 or\\n     * greater than largest int104).\\n     *\\n     * Counterpart to Solidity's `int104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     */\\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\\n        downcasted = int104(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(104, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int96 from int256, reverting on\\n     * overflow (when the input is less than smallest int96 or\\n     * greater than largest int96).\\n     *\\n     * Counterpart to Solidity's `int96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\\n        downcasted = int96(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(96, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int88 from int256, reverting on\\n     * overflow (when the input is less than smallest int88 or\\n     * greater than largest int88).\\n     *\\n     * Counterpart to Solidity's `int88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     */\\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\\n        downcasted = int88(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(88, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int80 from int256, reverting on\\n     * overflow (when the input is less than smallest int80 or\\n     * greater than largest int80).\\n     *\\n     * Counterpart to Solidity's `int80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     */\\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\\n        downcasted = int80(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(80, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int72 from int256, reverting on\\n     * overflow (when the input is less than smallest int72 or\\n     * greater than largest int72).\\n     *\\n     * Counterpart to Solidity's `int72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     */\\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\\n        downcasted = int72(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(72, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\\n        downcasted = int64(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(64, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int56 from int256, reverting on\\n     * overflow (when the input is less than smallest int56 or\\n     * greater than largest int56).\\n     *\\n     * Counterpart to Solidity's `int56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     */\\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\\n        downcasted = int56(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(56, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int48 from int256, reverting on\\n     * overflow (when the input is less than smallest int48 or\\n     * greater than largest int48).\\n     *\\n     * Counterpart to Solidity's `int48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     */\\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\\n        downcasted = int48(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(48, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int40 from int256, reverting on\\n     * overflow (when the input is less than smallest int40 or\\n     * greater than largest int40).\\n     *\\n     * Counterpart to Solidity's `int40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     */\\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\\n        downcasted = int40(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(40, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\\n        downcasted = int32(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(32, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int24 from int256, reverting on\\n     * overflow (when the input is less than smallest int24 or\\n     * greater than largest int24).\\n     *\\n     * Counterpart to Solidity's `int24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     */\\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\\n        downcasted = int24(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(24, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\\n        downcasted = int16(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(16, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     */\\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\\n        downcasted = int8(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(8, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        if (value > uint256(type(int256).max)) {\\n            revert SafeCastOverflowedUintToInt(value);\\n        }\\n        return int256(value);\\n    }\\n\\n    /**\\n     * @dev Cast a boolean (false or true) to a uint256 (0 or 1) with no jump.\\n     */\\n    function toUint(bool b) internal pure returns (uint256 u) {\\n        assembly (\\\"memory-safe\\\") {\\n            u := iszero(iszero(b))\\n        }\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/math/SignedMath.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {SafeCast} from \\\"./SafeCast.sol\\\";\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Branchless ternary evaluation for `a ? b : c`. Gas costs are constant.\\n     *\\n     * IMPORTANT: This function may reduce bytecode size and consume less gas when used standalone.\\n     * However, the compiler may optimize Solidity ternary operations (i.e. `a ? b : c`) to only compute\\n     * one branch when needed, making this function more expensive.\\n     */\\n    function ternary(bool condition, int256 a, int256 b) internal pure returns (int256) {\\n        unchecked {\\n            // branchless ternary works because:\\n            // b ^ (a ^ b) == a\\n            // b ^ 0 == b\\n            return b ^ ((a ^ b) * int256(SafeCast.toUint(condition)));\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return ternary(a > b, a, b);\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return ternary(a < b, a, b);\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // Formula from the \\\"Bit Twiddling Hacks\\\" by Sean Eron Anderson.\\n            // Since `n` is a signed integer, the generated bytecode will use the SAR opcode to perform the right shift,\\n            // taking advantage of the most significant (or \\\"sign\\\" bit) in two's complement representation.\\n            // This opcode adds new most significant bits set to the value of the previous most significant bit. As a result,\\n            // the mask will either be `bytes32(0)` (if n is positive) or `~bytes32(0)` (if n is negative).\\n            int256 mask = n >> 255;\\n\\n            // A `bytes32(0)` mask leaves the input unchanged, while a `~bytes32(0)` mask complements it.\\n            return uint256((n + mask) ^ mask);\\n        }\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/Panic.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Panic.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Helper library for emitting standardized panic codes.\\n *\\n * ```solidity\\n * contract Example {\\n *      using Panic for uint256;\\n *\\n *      // Use any of the declared internal constants\\n *      function foo() { Panic.GENERIC.panic(); }\\n *\\n *      // Alternatively\\n *      function foo() { Panic.panic(Panic.GENERIC); }\\n * }\\n * ```\\n *\\n * Follows the list from https://github.com/ethereum/solidity/blob/v0.8.24/libsolutil/ErrorCodes.h[libsolutil].\\n *\\n * _Available since v5.1._\\n */\\n// slither-disable-next-line unused-state\\nlibrary Panic {\\n    /// @dev generic / unspecified error\\n    uint256 internal constant GENERIC = 0x00;\\n    /// @dev used by the assert() builtin\\n    uint256 internal constant ASSERT = 0x01;\\n    /// @dev arithmetic underflow or overflow\\n    uint256 internal constant UNDER_OVERFLOW = 0x11;\\n    /// @dev division or modulo by zero\\n    uint256 internal constant DIVISION_BY_ZERO = 0x12;\\n    /// @dev enum conversion error\\n    uint256 internal constant ENUM_CONVERSION_ERROR = 0x21;\\n    /// @dev invalid encoding in storage\\n    uint256 internal constant STORAGE_ENCODING_ERROR = 0x22;\\n    /// @dev empty array pop\\n    uint256 internal constant EMPTY_ARRAY_POP = 0x31;\\n    /// @dev array out of bounds access\\n    uint256 internal constant ARRAY_OUT_OF_BOUNDS = 0x32;\\n    /// @dev resource error (too large allocation or too large array)\\n    uint256 internal constant RESOURCE_ERROR = 0x41;\\n    /// @dev calling invalid internal function\\n    uint256 internal constant INVALID_INTERNAL_FUNCTION = 0x51;\\n\\n    /// @dev Reverts with a panic code. Recommended to use with\\n    /// the internal constants with predefined codes.\\n    function panic(uint256 code) internal pure {\\n        assembly (\\\"memory-safe\\\") {\\n            mstore(0x00, 0x4e487b71)\\n            mstore(0x20, code)\\n            revert(0x1c, 0x24)\\n        }\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/Strings.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.2.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"./math/Math.sol\\\";\\nimport {SafeCast} from \\\"./math/SafeCast.sol\\\";\\nimport {SignedMath} from \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    using SafeCast for *;\\n\\n    bytes16 private constant HEX_DIGITS = \\\"0123456789abcdef\\\";\\n    uint8 private constant ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev The `value` string doesn't fit in the specified `length`.\\n     */\\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\\n\\n    /**\\n     * @dev The string being parsed contains characters that are not in scope of the given base.\\n     */\\n    error StringsInvalidChar();\\n\\n    /**\\n     * @dev The string being parsed is not a properly formatted address.\\n     */\\n    error StringsInvalidAddressFormat();\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            assembly (\\\"memory-safe\\\") {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                assembly (\\\"memory-safe\\\") {\\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toStringSigned(int256 value) internal pure returns (string memory) {\\n        return string.concat(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value)));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        uint256 localValue = value;\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\\n            localValue >>= 4;\\n        }\\n        if (localValue != 0) {\\n            revert StringsInsufficientHexLength(value, length);\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\\n     * representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its checksummed ASCII `string` hexadecimal\\n     * representation, according to EIP-55.\\n     */\\n    function toChecksumHexString(address addr) internal pure returns (string memory) {\\n        bytes memory buffer = bytes(toHexString(addr));\\n\\n        // hash the hex part of buffer (skip length + 2 bytes, length 40)\\n        uint256 hashValue;\\n        assembly (\\\"memory-safe\\\") {\\n            hashValue := shr(96, keccak256(add(buffer, 0x22), 40))\\n        }\\n\\n        for (uint256 i = 41; i > 1; --i) {\\n            // possible values for buffer[i] are 48 (0) to 57 (9) and 97 (a) to 102 (f)\\n            if (hashValue & 0xf > 7 && uint8(buffer[i]) > 96) {\\n                // case shift by xoring with 0x20\\n                buffer[i] ^= 0x20;\\n            }\\n            hashValue >>= 4;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n\\n    /**\\n     * @dev Parse a decimal string and returns the value as a `uint256`.\\n     *\\n     * Requirements:\\n     * - The string must be formatted as `[0-9]*`\\n     * - The result must fit into an `uint256` type\\n     */\\n    function parseUint(string memory input) internal pure returns (uint256) {\\n        return parseUint(input, 0, bytes(input).length);\\n    }\\n\\n    /**\\n     * @dev Variant of {parseUint} that parses a substring of `input` located between position `begin` (included) and\\n     * `end` (excluded).\\n     *\\n     * Requirements:\\n     * - The substring must be formatted as `[0-9]*`\\n     * - The result must fit into an `uint256` type\\n     */\\n    function parseUint(string memory input, uint256 begin, uint256 end) internal pure returns (uint256) {\\n        (bool success, uint256 value) = tryParseUint(input, begin, end);\\n        if (!success) revert StringsInvalidChar();\\n        return value;\\n    }\\n\\n    /**\\n     * @dev Variant of {parseUint-string} that returns false if the parsing fails because of an invalid character.\\n     *\\n     * NOTE: This function will revert if the result does not fit in a `uint256`.\\n     */\\n    function tryParseUint(string memory input) internal pure returns (bool success, uint256 value) {\\n        return _tryParseUintUncheckedBounds(input, 0, bytes(input).length);\\n    }\\n\\n    /**\\n     * @dev Variant of {parseUint-string-uint256-uint256} that returns false if the parsing fails because of an invalid\\n     * character.\\n     *\\n     * NOTE: This function will revert if the result does not fit in a `uint256`.\\n     */\\n    function tryParseUint(\\n        string memory input,\\n        uint256 begin,\\n        uint256 end\\n    ) internal pure returns (bool success, uint256 value) {\\n        if (end > bytes(input).length || begin > end) return (false, 0);\\n        return _tryParseUintUncheckedBounds(input, begin, end);\\n    }\\n\\n    /**\\n     * @dev Implementation of {tryParseUint} that does not check bounds. Caller should make sure that\\n     * `begin <= end <= input.length`. Other inputs would result in undefined behavior.\\n     */\\n    function _tryParseUintUncheckedBounds(\\n        string memory input,\\n        uint256 begin,\\n        uint256 end\\n    ) private pure returns (bool success, uint256 value) {\\n        bytes memory buffer = bytes(input);\\n\\n        uint256 result = 0;\\n        for (uint256 i = begin; i < end; ++i) {\\n            uint8 chr = _tryParseChr(bytes1(_unsafeReadBytesOffset(buffer, i)));\\n            if (chr > 9) return (false, 0);\\n            result *= 10;\\n            result += chr;\\n        }\\n        return (true, result);\\n    }\\n\\n    /**\\n     * @dev Parse a decimal string and returns the value as a `int256`.\\n     *\\n     * Requirements:\\n     * - The string must be formatted as `[-+]?[0-9]*`\\n     * - The result must fit in an `int256` type.\\n     */\\n    function parseInt(string memory input) internal pure returns (int256) {\\n        return parseInt(input, 0, bytes(input).length);\\n    }\\n\\n    /**\\n     * @dev Variant of {parseInt-string} that parses a substring of `input` located between position `begin` (included) and\\n     * `end` (excluded).\\n     *\\n     * Requirements:\\n     * - The substring must be formatted as `[-+]?[0-9]*`\\n     * - The result must fit in an `int256` type.\\n     */\\n    function parseInt(string memory input, uint256 begin, uint256 end) internal pure returns (int256) {\\n        (bool success, int256 value) = tryParseInt(input, begin, end);\\n        if (!success) revert StringsInvalidChar();\\n        return value;\\n    }\\n\\n    /**\\n     * @dev Variant of {parseInt-string} that returns false if the parsing fails because of an invalid character or if\\n     * the result does not fit in a `int256`.\\n     *\\n     * NOTE: This function will revert if the absolute value of the result does not fit in a `uint256`.\\n     */\\n    function tryParseInt(string memory input) internal pure returns (bool success, int256 value) {\\n        return _tryParseIntUncheckedBounds(input, 0, bytes(input).length);\\n    }\\n\\n    uint256 private constant ABS_MIN_INT256 = 2 ** 255;\\n\\n    /**\\n     * @dev Variant of {parseInt-string-uint256-uint256} that returns false if the parsing fails because of an invalid\\n     * character or if the result does not fit in a `int256`.\\n     *\\n     * NOTE: This function will revert if the absolute value of the result does not fit in a `uint256`.\\n     */\\n    function tryParseInt(\\n        string memory input,\\n        uint256 begin,\\n        uint256 end\\n    ) internal pure returns (bool success, int256 value) {\\n        if (end > bytes(input).length || begin > end) return (false, 0);\\n        return _tryParseIntUncheckedBounds(input, begin, end);\\n    }\\n\\n    /**\\n     * @dev Implementation of {tryParseInt} that does not check bounds. Caller should make sure that\\n     * `begin <= end <= input.length`. Other inputs would result in undefined behavior.\\n     */\\n    function _tryParseIntUncheckedBounds(\\n        string memory input,\\n        uint256 begin,\\n        uint256 end\\n    ) private pure returns (bool success, int256 value) {\\n        bytes memory buffer = bytes(input);\\n\\n        // Check presence of a negative sign.\\n        bytes1 sign = begin == end ? bytes1(0) : bytes1(_unsafeReadBytesOffset(buffer, begin)); // don't do out-of-bound (possibly unsafe) read if sub-string is empty\\n        bool positiveSign = sign == bytes1(\\\"+\\\");\\n        bool negativeSign = sign == bytes1(\\\"-\\\");\\n        uint256 offset = (positiveSign || negativeSign).toUint();\\n\\n        (bool absSuccess, uint256 absValue) = tryParseUint(input, begin + offset, end);\\n\\n        if (absSuccess && absValue < ABS_MIN_INT256) {\\n            return (true, negativeSign ? -int256(absValue) : int256(absValue));\\n        } else if (absSuccess && negativeSign && absValue == ABS_MIN_INT256) {\\n            return (true, type(int256).min);\\n        } else return (false, 0);\\n    }\\n\\n    /**\\n     * @dev Parse a hexadecimal string (with or without \\\"0x\\\" prefix), and returns the value as a `uint256`.\\n     *\\n     * Requirements:\\n     * - The string must be formatted as `(0x)?[0-9a-fA-F]*`\\n     * - The result must fit in an `uint256` type.\\n     */\\n    function parseHexUint(string memory input) internal pure returns (uint256) {\\n        return parseHexUint(input, 0, bytes(input).length);\\n    }\\n\\n    /**\\n     * @dev Variant of {parseHexUint} that parses a substring of `input` located between position `begin` (included) and\\n     * `end` (excluded).\\n     *\\n     * Requirements:\\n     * - The substring must be formatted as `(0x)?[0-9a-fA-F]*`\\n     * - The result must fit in an `uint256` type.\\n     */\\n    function parseHexUint(string memory input, uint256 begin, uint256 end) internal pure returns (uint256) {\\n        (bool success, uint256 value) = tryParseHexUint(input, begin, end);\\n        if (!success) revert StringsInvalidChar();\\n        return value;\\n    }\\n\\n    /**\\n     * @dev Variant of {parseHexUint-string} that returns false if the parsing fails because of an invalid character.\\n     *\\n     * NOTE: This function will revert if the result does not fit in a `uint256`.\\n     */\\n    function tryParseHexUint(string memory input) internal pure returns (bool success, uint256 value) {\\n        return _tryParseHexUintUncheckedBounds(input, 0, bytes(input).length);\\n    }\\n\\n    /**\\n     * @dev Variant of {parseHexUint-string-uint256-uint256} that returns false if the parsing fails because of an\\n     * invalid character.\\n     *\\n     * NOTE: This function will revert if the result does not fit in a `uint256`.\\n     */\\n    function tryParseHexUint(\\n        string memory input,\\n        uint256 begin,\\n        uint256 end\\n    ) internal pure returns (bool success, uint256 value) {\\n        if (end > bytes(input).length || begin > end) return (false, 0);\\n        return _tryParseHexUintUncheckedBounds(input, begin, end);\\n    }\\n\\n    /**\\n     * @dev Implementation of {tryParseHexUint} that does not check bounds. Caller should make sure that\\n     * `begin <= end <= input.length`. Other inputs would result in undefined behavior.\\n     */\\n    function _tryParseHexUintUncheckedBounds(\\n        string memory input,\\n        uint256 begin,\\n        uint256 end\\n    ) private pure returns (bool success, uint256 value) {\\n        bytes memory buffer = bytes(input);\\n\\n        // skip 0x prefix if present\\n        bool hasPrefix = (end > begin + 1) && bytes2(_unsafeReadBytesOffset(buffer, begin)) == bytes2(\\\"0x\\\"); // don't do out-of-bound (possibly unsafe) read if sub-string is empty\\n        uint256 offset = hasPrefix.toUint() * 2;\\n\\n        uint256 result = 0;\\n        for (uint256 i = begin + offset; i < end; ++i) {\\n            uint8 chr = _tryParseChr(bytes1(_unsafeReadBytesOffset(buffer, i)));\\n            if (chr > 15) return (false, 0);\\n            result *= 16;\\n            unchecked {\\n                // Multiplying by 16 is equivalent to a shift of 4 bits (with additional overflow check).\\n                // This guaratees that adding a value < 16 will not cause an overflow, hence the unchecked.\\n                result += chr;\\n            }\\n        }\\n        return (true, result);\\n    }\\n\\n    /**\\n     * @dev Parse a hexadecimal string (with or without \\\"0x\\\" prefix), and returns the value as an `address`.\\n     *\\n     * Requirements:\\n     * - The string must be formatted as `(0x)?[0-9a-fA-F]{40}`\\n     */\\n    function parseAddress(string memory input) internal pure returns (address) {\\n        return parseAddress(input, 0, bytes(input).length);\\n    }\\n\\n    /**\\n     * @dev Variant of {parseAddress} that parses a substring of `input` located between position `begin` (included) and\\n     * `end` (excluded).\\n     *\\n     * Requirements:\\n     * - The substring must be formatted as `(0x)?[0-9a-fA-F]{40}`\\n     */\\n    function parseAddress(string memory input, uint256 begin, uint256 end) internal pure returns (address) {\\n        (bool success, address value) = tryParseAddress(input, begin, end);\\n        if (!success) revert StringsInvalidAddressFormat();\\n        return value;\\n    }\\n\\n    /**\\n     * @dev Variant of {parseAddress-string} that returns false if the parsing fails because the input is not a properly\\n     * formatted address. See {parseAddress} requirements.\\n     */\\n    function tryParseAddress(string memory input) internal pure returns (bool success, address value) {\\n        return tryParseAddress(input, 0, bytes(input).length);\\n    }\\n\\n    /**\\n     * @dev Variant of {parseAddress-string-uint256-uint256} that returns false if the parsing fails because input is not a properly\\n     * formatted address. See {parseAddress} requirements.\\n     */\\n    function tryParseAddress(\\n        string memory input,\\n        uint256 begin,\\n        uint256 end\\n    ) internal pure returns (bool success, address value) {\\n        if (end > bytes(input).length || begin > end) return (false, address(0));\\n\\n        bool hasPrefix = (end > begin + 1) && bytes2(_unsafeReadBytesOffset(bytes(input), begin)) == bytes2(\\\"0x\\\"); // don't do out-of-bound (possibly unsafe) read if sub-string is empty\\n        uint256 expectedLength = 40 + hasPrefix.toUint() * 2;\\n\\n        // check that input is the correct length\\n        if (end - begin == expectedLength) {\\n            // length guarantees that this does not overflow, and value is at most type(uint160).max\\n            (bool s, uint256 v) = _tryParseHexUintUncheckedBounds(input, begin, end);\\n            return (s, address(uint160(v)));\\n        } else {\\n            return (false, address(0));\\n        }\\n    }\\n\\n    function _tryParseChr(bytes1 chr) private pure returns (uint8) {\\n        uint8 value = uint8(chr);\\n\\n        // Try to parse `chr`:\\n        // - Case 1: [0-9]\\n        // - Case 2: [a-f]\\n        // - Case 3: [A-F]\\n        // - otherwise not supported\\n        unchecked {\\n            if (value > 47 && value < 58) value -= 48;\\n            else if (value > 96 && value < 103) value -= 87;\\n            else if (value > 64 && value < 71) value -= 55;\\n            else return type(uint8).max;\\n        }\\n\\n        return value;\\n    }\\n\\n    /**\\n     * @dev Reads a bytes32 from a bytes array without bounds checking.\\n     *\\n     * NOTE: making this function internal would mean it could be used with memory unsafe offset, and marking the\\n     * assembly block as such would prevent some optimizations.\\n     */\\n    function _unsafeReadBytesOffset(bytes memory buffer, uint256 offset) private pure returns (bytes32 value) {\\n        // This is not memory safe in the general case, but all calls to this private function are within bounds.\\n        assembly (\\\"memory-safe\\\") {\\n            value := mload(add(buffer, add(0x20, offset)))\\n        }\\n    }\\n}\\n\"\n    },\n    \"contracts/CCIPSimulator.sol\": {\n      \"content\": \"//SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.19;\\r\\n\\r\\nimport {CCIPLocalSimulator} from \\\"@chainlink/local/src/ccip/CCIPLocalSimulator.sol\\\";\\r\\n\"\n    },\n    \"contracts/MyToken.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n// Compatible with OpenZeppelin Contracts ^5.0.0\\r\\npragma solidity ^0.8.22;\\r\\n\\r\\nimport {ERC721} from \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\r\\nimport {ERC721Burnable} from \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Burnable.sol\\\";\\r\\nimport {ERC721Enumerable} from \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\\\";\\r\\nimport {ERC721URIStorage} from \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\\\";\\r\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\n//这是一个copy的合约，从它的主网上\\r\\ncontract MyToken is ERC721, ERC721Enumerable, ERC721URIStorage, ERC721Burnable, Ownable {\\r\\n    uint256 private _nextTokenId;\\r\\n    //metadata 元数据的链接\\r\\n    //https://obvious-fuchsia-lizard.myfilebase.com/ipfs/xxx == ipfs://xxx\\r\\n    string constant META_DATA = \\\"ipfs://QmbFK1Y2ic2H2UXvyxGmQiybAqyAkPPegCbLodJGW3bqMf\\\";\\r\\n\\r\\n    constructor(string memory tokenName, string memory tokenSymbol)\\r\\n        ERC721(tokenName, tokenSymbol)\\r\\n        Ownable(msg.sender)\\r\\n    {}\\r\\n    //safeMint函数，用于铸造NFT\\r\\n    function safeMint(address to)\\r\\n        public\\r\\n        onlyOwner\\r\\n        returns (uint256)\\r\\n    {\\r\\n        uint256 tokenId = _nextTokenId++;\\r\\n        _safeMint(to, tokenId);\\r\\n        _setTokenURI(tokenId, META_DATA);\\r\\n        return tokenId;\\r\\n    }\\r\\n\\r\\n    // The following functions are overrides required by Solidity.\\r\\n\\r\\n    function _update(address to, uint256 tokenId, address auth)\\r\\n        internal\\r\\n        override(ERC721, ERC721Enumerable)\\r\\n        returns (address)\\r\\n    {\\r\\n        return super._update(to, tokenId, auth);\\r\\n    }\\r\\n\\r\\n    function _increaseBalance(address account, uint128 value)\\r\\n        internal\\r\\n        override(ERC721, ERC721Enumerable)\\r\\n    {\\r\\n        super._increaseBalance(account, value);\\r\\n    }\\r\\n\\r\\n    function tokenURI(uint256 tokenId)\\r\\n        public\\r\\n        view\\r\\n        override(ERC721, ERC721URIStorage)\\r\\n        returns (string memory)\\r\\n    {\\r\\n        return super.tokenURI(tokenId);\\r\\n    }\\r\\n\\r\\n    function supportsInterface(bytes4 interfaceId)\\r\\n        public\\r\\n        view\\r\\n        override(ERC721, ERC721Enumerable, ERC721URIStorage)\\r\\n        returns (bool)\\r\\n    {\\r\\n        return super.supportsInterface(interfaceId);\\r\\n    }\\r\\n}\"\n    },\n    \"contracts/NFTPoolBurnAndMint.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.24;\\r\\n\\r\\n/*\\r\\n用于燃烧和铸造，新链上的NFT池子\\r\\n从NFTPoolLockAndRelease copy的，根据功能不同进行一些修改\\r\\n    1.先把原链池子传来的信息进行解码在_ccipReceive函数\\r\\n    2.修改了构造函数，增加了nftAddr参数\\r\\n    3.import {WrappedMyToken} from \\\"./WrappedMyToken.sol\\\"; 引入了自己的NFT合约\\r\\n    4.使用WrappedMyToken中的mintWithSpecificTokenId函数进行铸造\\r\\n\\r\\n    5.构建一个burnAndSendNFT函数，用于燃烧NFT并发送CCIP交易\\r\\n */\\r\\nimport {IRouterClient} from \\\"@chainlink/contracts-ccip/src/v0.8/ccip/interfaces/IRouterClient.sol\\\";\\r\\nimport {OwnerIsCreator} from \\\"@chainlink/contracts-ccip/src/v0.8/shared/access/OwnerIsCreator.sol\\\";\\r\\nimport {Client} from \\\"@chainlink/contracts-ccip/src/v0.8/ccip/libraries/Client.sol\\\";\\r\\nimport {CCIPReceiver} from \\\"@chainlink/contracts-ccip/src/v0.8/ccip/applications/CCIPReceiver.sol\\\";\\r\\nimport {IERC20} from \\\"@chainlink/contracts-ccip/src/v0.8/vendor/openzeppelin-solidity/v4.8.3/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport {SafeERC20} from \\\"@chainlink/contracts-ccip/src/v0.8/vendor/openzeppelin-solidity/v4.8.3/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport {WrappedMyToken} from \\\"./WrappedMyToken.sol\\\";\\r\\n\\r\\n/**\\r\\n * THIS IS AN EXAMPLE CONTRACT THAT USES HARDCODED VALUES FOR CLARITY.\\r\\n * THIS IS AN EXAMPLE CONTRACT THAT USES UN-AUDITED CODE.\\r\\n * DO NOT USE THIS CODE IN PRODUCTION.\\r\\n */\\r\\n\\r\\n/// @title - A simple messenger contract for sending/receiving string data across chains.\\r\\ncontract NFTPoolBurnAndMint is CCIPReceiver, OwnerIsCreator {\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    // Custom errors to provide more descriptive revert messages.\\r\\n    error NotEnoughBalance(uint256 currentBalance, uint256 calculatedFees); // Used to make sure contract has enough balance.\\r\\n    error NothingToWithdraw(); // Used when trying to withdraw Ether but there's nothing to withdraw.\\r\\n    error FailedToWithdrawEth(address owner, address target, uint256 value); // Used when the withdrawal of Ether fails.\\r\\n    error InvalidReceiverAddress(); // Used when the receiver address is 0.\\r\\n\\r\\n    // Event emitted when a message is sent to another chain.\\r\\n    event MessageSent(\\r\\n        bytes32 indexed messageId, // The unique ID of the CCIP message.\\r\\n        uint64 indexed destinationChainSelector, // The chain selector of the destination chain.\\r\\n        address receiver, // The address of the receiver on the destination chain.\\r\\n        bytes text, // The text being sent.\\r\\n        address feeToken, // the token address used to pay CCIP fees.\\r\\n        uint256 fees // The fees paid for sending the CCIP message.\\r\\n    );\\r\\n\\r\\n    // Event emitted when a message is received from another chain.\\r\\n    event TokenMinted(\\r\\n        uint256 tokenId,\\r\\n        address newOwner\\r\\n    );\\r\\n\\r\\n    bytes32 private s_lastReceivedMessageId; // Store the last received messageId.\\r\\n    string private s_lastReceivedText; // Store the last received text.\\r\\n\\r\\n    IERC20 private s_linkToken;\\r\\n\\r\\n    WrappedMyToken public wnft;//我的NFT合约\\r\\n    //存储原链上传来的数据\\r\\n    struct RequestData{\\r\\n        uint256 tokenId;\\r\\n        address newOwner;\\r\\n    }\\r\\n\\r\\n    /// @notice Constructor initializes the contract with the router address.\\r\\n    /// @param _router The address of the router contract.\\r\\n    /// @param _link The address of the link contract.\\r\\n    constructor(address _router, address _link,address nftAddr) CCIPReceiver(_router) {\\r\\n        s_linkToken = IERC20(_link);\\r\\n        wnft = WrappedMyToken(nftAddr);\\r\\n    }\\r\\n\\r\\n    /// @dev Modifier that checks the receiver address is not 0.\\r\\n    /// @param _receiver The receiver address.\\r\\n    modifier validateReceiver(address _receiver) {\\r\\n        if (_receiver == address(0)) revert InvalidReceiverAddress();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    // burn NFT and send CCIP transaction（自己写的）\\r\\n    function burnAndSendNFT(\\r\\n        uint256 tokenId,\\r\\n        address newOwner,\\r\\n        uint64 destChainSelector,\\r\\n        address destReceiver\\r\\n    ) public returns (bytes32){\\r\\n        //wnft.transferFrom REC-721的方法，用于转移NFT \\r\\n        wnft.transferFrom(msg.sender, address(this), tokenId);\\r\\n        //wnft.burn 燃烧NFT旧的\\r\\n        wnft.burn(tokenId);\\r\\n        //下属操作就是chainlink的sendMessagePayLINK中的操作,发送CCIP消息\\r\\n        //abi.encode 编码 为了传输数据\\r\\n        bytes memory payload = abi.encode(tokenId, newOwner);\\r\\n        // send request to Chainlink CCIP to send the NFT to the other Chain \\r\\n        bytes32 messageId = sendMessagePayLINK(destChainSelector, destReceiver, payload);\\r\\n        return messageId;\\r\\n    }\\r\\n\\r\\n\\r\\n    /// @notice Sends data to receiver on the destination chain.\\r\\n    /// @notice Pay for fees in LINK.\\r\\n    /// @dev Assumes your contract has sufficient LINK.\\r\\n    /// @param _destinationChainSelector The identifier (aka selector) for the destination blockchain.\\r\\n    /// @param _receiver The address of the recipient on the destination blockchain.\\r\\n    /// @param _text The text to be sent.\\r\\n    /// @return messageId The ID of the CCIP message that was sent.\\r\\n    function sendMessagePayLINK(\\r\\n        uint64 _destinationChainSelector,\\r\\n        address _receiver,\\r\\n        bytes memory _text\\r\\n    )\\r\\n        internal\\r\\n        returns (bytes32 messageId)\\r\\n    {\\r\\n        // Create an EVM2AnyMessage struct in memory with necessary information for sending a cross-chain message\\r\\n        Client.EVM2AnyMessage memory evm2AnyMessage = _buildCCIPMessage(\\r\\n            _receiver,\\r\\n            _text,\\r\\n            address(s_linkToken)\\r\\n        );\\r\\n\\r\\n        // Initialize a router client instance to interact with cross-chain router\\r\\n        IRouterClient router = IRouterClient(this.getRouter());\\r\\n\\r\\n        // Get the fee required to send the CCIP message\\r\\n        uint256 fees = router.getFee(_destinationChainSelector, evm2AnyMessage);\\r\\n\\r\\n        if (fees > s_linkToken.balanceOf(address(this)))\\r\\n            revert NotEnoughBalance(s_linkToken.balanceOf(address(this)), fees);\\r\\n\\r\\n        // approve the Router to transfer LINK tokens on contract's behalf. It will spend the fees in LINK\\r\\n        s_linkToken.approve(address(router), fees);\\r\\n\\r\\n        // Send the CCIP message through the router and store the returned CCIP message ID\\r\\n        messageId = router.ccipSend(_destinationChainSelector, evm2AnyMessage);\\r\\n\\r\\n        // Emit an event with message details\\r\\n        emit MessageSent(\\r\\n            messageId,\\r\\n            _destinationChainSelector,\\r\\n            _receiver,\\r\\n            _text,\\r\\n            address(s_linkToken),\\r\\n            fees\\r\\n        );\\r\\n\\r\\n        // Return the CCIP message ID\\r\\n        return messageId;\\r\\n    }\\r\\n\\r\\n    /// handle a received message\\r\\n    function _ccipReceive(\\r\\n        Client.Any2EVMMessage memory any2EvmMessage\\r\\n    )\\r\\n        internal\\r\\n        override\\r\\n    {\\r\\n        // abi-decoding 解码 \\r\\n        RequestData memory rd = abi.decode(any2EvmMessage.data, (RequestData));\\r\\n        uint256 tokenId = rd.tokenId;\\r\\n        address newOwner = rd.newOwner;\\r\\n        //铸造NFT\\r\\n        wnft.mintWithSpecificTokenId(newOwner, tokenId);\\r\\n        emit TokenMinted(tokenId,newOwner);\\r\\n    }\\r\\n\\r\\n    /// @notice Construct a CCIP message.\\r\\n    /// @dev This function will create an EVM2AnyMessage struct with all the necessary information for sending a text.\\r\\n    /// @param _receiver The address of the receiver.\\r\\n    /// @param _data The string data to be sent.\\r\\n    /// @param _feeTokenAddress The address of the token used for fees. Set address(0) for native gas.\\r\\n    /// @return Client.EVM2AnyMessage Returns an EVM2AnyMessage struct which contains information for sending a CCIP message.\\r\\n    function _buildCCIPMessage(\\r\\n        address _receiver,\\r\\n        bytes memory _data,\\r\\n        address _feeTokenAddress\\r\\n    ) private pure returns (Client.EVM2AnyMessage memory) {\\r\\n        // Create an EVM2AnyMessage struct in memory with necessary information for sending a cross-chain message\\r\\n        return\\r\\n            Client.EVM2AnyMessage({\\r\\n                receiver: abi.encode(_receiver), // ABI-encoded receiver address\\r\\n                data: _data, // ABI-encoded string\\r\\n                tokenAmounts: new Client.EVMTokenAmount[](0), // Empty array as no tokens are transferred\\r\\n                extraArgs: Client._argsToBytes(\\r\\n                    // Additional arguments, setting gas limit and allowing out-of-order execution.\\r\\n                    // Best Practice: For simplicity, the values are hardcoded. It is advisable to use a more dynamic approach\\r\\n                    // where you set the extra arguments off-chain. This allows adaptation depending on the lanes, messages,\\r\\n                    // and ensures compatibility with future CCIP upgrades. Read more about it here: https://docs.chain.link/ccip/best-practices#using-extraargs\\r\\n                    Client.EVMExtraArgsV2({\\r\\n                        gasLimit: 200_000, // Gas limit for the callback on the destination chain\\r\\n                        allowOutOfOrderExecution: true // Allows the message to be executed out of order relative to other messages from the same sender\\r\\n                    })\\r\\n                ),\\r\\n                // Set the feeToken to a feeTokenAddress, indicating specific asset will be used for fees\\r\\n                feeToken: _feeTokenAddress\\r\\n            });\\r\\n    }\\r\\n\\r\\n    /// @notice Fetches the details of the last received message.\\r\\n    /// @return messageId The ID of the last received message.\\r\\n    /// @return text The last received text.\\r\\n    function getLastReceivedMessageDetails()\\r\\n        external\\r\\n        view\\r\\n        returns (bytes32 messageId, string memory text)\\r\\n    {\\r\\n        return (s_lastReceivedMessageId, s_lastReceivedText);\\r\\n    }\\r\\n\\r\\n    /// @notice Fallback function to allow the contract to receive Ether.\\r\\n    /// @dev This function has no function body, making it a default function for receiving Ether.\\r\\n    /// It is automatically called when Ether is sent to the contract without any data.\\r\\n    receive() external payable {}\\r\\n\\r\\n    /// @notice Allows the contract owner to withdraw the entire balance of Ether from the contract.\\r\\n    /// @dev This function reverts if there are no funds to withdraw or if the transfer fails.\\r\\n    /// It should only be callable by the owner of the contract.\\r\\n    /// @param _beneficiary The address to which the Ether should be sent.\\r\\n    function withdraw(address _beneficiary) public onlyOwner {\\r\\n        // Retrieve the balance of this contract\\r\\n        uint256 amount = address(this).balance;\\r\\n\\r\\n        // Revert if there is nothing to withdraw\\r\\n        if (amount == 0) revert NothingToWithdraw();\\r\\n\\r\\n        // Attempt to send the funds, capturing the success status and discarding any return data\\r\\n        (bool sent, ) = _beneficiary.call{value: amount}(\\\"\\\");\\r\\n\\r\\n        // Revert if the send failed, with information about the attempted transfer\\r\\n        if (!sent) revert FailedToWithdrawEth(msg.sender, _beneficiary, amount);\\r\\n    }\\r\\n\\r\\n    /// @notice Allows the owner of the contract to withdraw all tokens of a specific ERC20 token.\\r\\n    /// @dev This function reverts with a 'NothingToWithdraw' error if there are no tokens to withdraw.\\r\\n    /// @param _beneficiary The address to which the tokens will be sent.\\r\\n    /// @param _token The contract address of the ERC20 token to be withdrawn.\\r\\n    function withdrawToken(\\r\\n        address _beneficiary,\\r\\n        address _token\\r\\n    ) public onlyOwner {\\r\\n        // Retrieve the balance of this contract\\r\\n        uint256 amount = IERC20(_token).balanceOf(address(this));\\r\\n\\r\\n        // Revert if there is nothing to withdraw\\r\\n        if (amount == 0) revert NothingToWithdraw();\\r\\n\\r\\n        IERC20(_token).safeTransfer(_beneficiary, amount);\\r\\n    }\\r\\n}\\r\\n\"\n    },\n    \"contracts/NFTPoolLockAndRelease.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.24;\\r\\n\\r\\n/*\\r\\n用于锁定和解锁定，原链上的NFT池子\\r\\n从chinlink的ccip文档中copy的，根据课程进行一些修改\\r\\n    1.删除了一些安全限制，用不到的自定义错误,函数,变量等\\r\\n    2.import {MyToken} from \\\"./MyToken.sol\\\"; 引入了自己的NFT合约\\r\\n    3.修改了构造函数，增加了nftAddr参数   \\r\\n    4.增加了lockAndSendNFT函数，用于锁定NFT并发送CCIP交易\\r\\n\\r\\n    5.在_ccipReceive函数中增加了解锁NFT的操作，将NFT从池子中转移到新的拥有者，并记录解锁事件\\r\\n */\\r\\nimport {IRouterClient} from \\\"@chainlink/contracts-ccip/src/v0.8/ccip/interfaces/IRouterClient.sol\\\";\\r\\nimport {OwnerIsCreator} from \\\"@chainlink/contracts-ccip/src/v0.8/shared/access/OwnerIsCreator.sol\\\";\\r\\nimport {Client} from \\\"@chainlink/contracts-ccip/src/v0.8/ccip/libraries/Client.sol\\\";\\r\\nimport {CCIPReceiver} from \\\"@chainlink/contracts-ccip/src/v0.8/ccip/applications/CCIPReceiver.sol\\\";\\r\\nimport {IERC20} from \\\"@chainlink/contracts-ccip/src/v0.8/vendor/openzeppelin-solidity/v4.8.3/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport {SafeERC20} from \\\"@chainlink/contracts-ccip/src/v0.8/vendor/openzeppelin-solidity/v4.8.3/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\nimport {MyToken} from \\\"./MyToken.sol\\\";\\r\\n\\r\\n/**\\r\\n * THIS IS AN EXAMPLE CONTRACT THAT USES HARDCODED VALUES FOR CLARITY.\\r\\n * THIS IS AN EXAMPLE CONTRACT THAT USES UN-AUDITED CODE.\\r\\n * DO NOT USE THIS CODE IN PRODUCTION.\\r\\n */\\r\\n\\r\\n/// @title - A simple messenger contract for sending/receiving string data across chains.\\r\\ncontract NFTPoolLockAndRelease is CCIPReceiver, OwnerIsCreator {\\r\\n    using SafeERC20 for IERC20;\\r\\n\\r\\n    // Custom errors to provide more descriptive revert messages.\\r\\n    error NotEnoughBalance(uint256 currentBalance, uint256 calculatedFees); // Used to make sure contract has enough balance.\\r\\n    error NothingToWithdraw(); // Used when trying to withdraw Ether but there's nothing to withdraw.\\r\\n    error FailedToWithdrawEth(address owner, address target, uint256 value); // Used when the withdrawal of Ether fails.\\r\\n    error InvalidReceiverAddress(); // Used when the receiver address is 0.\\r\\n\\r\\n    // Event emitted when a message is sent to another chain.\\r\\n    event MessageSent(\\r\\n        bytes32 indexed messageId, // The unique ID of the CCIP message.\\r\\n        uint64 indexed destinationChainSelector, // The chain selector of the destination chain.\\r\\n        address receiver, // The address of the receiver on the destination chain.\\r\\n        bytes text, // The text being sent.\\r\\n        address feeToken, // the token address used to pay CCIP fees.\\r\\n        uint256 fees // The fees paid for sending the CCIP message.\\r\\n    );\\r\\n\\r\\n    // Event emitted when a message is received from another chain.\\r\\n    event TokenUnLocked(\\r\\n        uint256 tokenId, \\r\\n        address newOwner\\r\\n    );\\r\\n\\r\\n    bytes32 private s_lastReceivedMessageId; // Store the last received messageId.\\r\\n    string private s_lastReceivedText; // Store the last received text.\\r\\n\\r\\n    IERC20 private s_linkToken;\\r\\n\\r\\n    MyToken public nft; //我的NFT合约\\r\\n    //存储目标链传来的数据\\r\\n    struct RequestData {\\r\\n        uint256 tokenId;\\r\\n        address newOwner;\\r\\n    }\\r\\n\\r\\n    /// @notice Constructor initializes the contract with the router address.\\r\\n    /// @param _router The address of the router contract.\\r\\n    /// @param _link The address of the link contract.\\r\\n    constructor(\\r\\n        address _router,\\r\\n        address _link,\\r\\n        address nftAddr\\r\\n    ) CCIPReceiver(_router) {\\r\\n        s_linkToken = IERC20(_link);\\r\\n        nft = MyToken(nftAddr);\\r\\n    }\\r\\n\\r\\n    /// @dev Modifier that checks the receiver address is not 0.\\r\\n    /// @param _receiver The receiver address.\\r\\n    modifier validateReceiver(address _receiver) {\\r\\n        if (_receiver == address(0)) revert InvalidReceiverAddress();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    // lock NFT and send CCIP transaction（自己写的）\\r\\n    function lockAndSendNFT(\\r\\n        uint256 tokenId,\\r\\n        address newOwner,\\r\\n        uint64 destChainSelector,\\r\\n        address destReceiver\\r\\n    ) public returns (bytes32) {\\r\\n        // tansfer the NFT from owner to the pool\\r\\n        //nft.transferFrom REC-721的方法，用于转移NFT 这一步就是锁定NFT\\r\\n        nft.transferFrom(msg.sender, address(this), tokenId);\\r\\n        //下属操作就是chainlink的sendMessagePayLINK中的操作\\r\\n        //abi.encode 编码 为了传输数据\\r\\n        bytes memory payload = abi.encode(tokenId, newOwner);\\r\\n        // send request to Chainlink CCIP to send the NFT to the other Chain\\r\\n        bytes32 messageId = sendMessagePayLINK(\\r\\n            destChainSelector,\\r\\n            destReceiver,\\r\\n            payload\\r\\n        );\\r\\n        return messageId;\\r\\n    }\\r\\n\\r\\n    /// @notice Sends data to receiver on the destination chain.\\r\\n    /// @notice Pay for fees in LINK.\\r\\n    /// @dev Assumes your contract has sufficient LINK.\\r\\n    /// @param _destinationChainSelector The identifier (aka selector) for the destination blockchain.\\r\\n    /// @param _receiver The address of the recipient on the destination blockchain.\\r\\n    /// @param _text The text to be sent.\\r\\n    /// @return messageId The ID of the CCIP message that was sent.\\r\\n    function sendMessagePayLINK(\\r\\n        uint64 _destinationChainSelector,\\r\\n        address _receiver,\\r\\n        bytes memory _text\\r\\n    ) internal returns (bytes32 messageId) {\\r\\n        // Create an EVM2AnyMessage struct in memory with necessary information for sending a cross-chain message\\r\\n        Client.EVM2AnyMessage memory evm2AnyMessage = _buildCCIPMessage(\\r\\n            _receiver,\\r\\n            _text,\\r\\n            address(s_linkToken)\\r\\n        );\\r\\n\\r\\n        // Initialize a router client instance to interact with cross-chain router\\r\\n        IRouterClient router = IRouterClient(this.getRouter());\\r\\n\\r\\n        // Get the fee required to send the CCIP message\\r\\n        uint256 fees = router.getFee(_destinationChainSelector, evm2AnyMessage);\\r\\n\\r\\n        if (fees > s_linkToken.balanceOf(address(this)))\\r\\n            revert NotEnoughBalance(s_linkToken.balanceOf(address(this)), fees);\\r\\n\\r\\n        // approve the Router to transfer LINK tokens on contract's behalf. It will spend the fees in LINK\\r\\n        s_linkToken.approve(address(router), fees);\\r\\n\\r\\n        // Send the CCIP message through the router and store the returned CCIP message ID\\r\\n        messageId = router.ccipSend(_destinationChainSelector, evm2AnyMessage);\\r\\n\\r\\n        // Emit an event with message details\\r\\n        emit MessageSent(\\r\\n            messageId,\\r\\n            _destinationChainSelector,\\r\\n            _receiver,\\r\\n            _text,\\r\\n            address(s_linkToken),\\r\\n            fees\\r\\n        );\\r\\n\\r\\n        // Return the CCIP message ID\\r\\n        return messageId;\\r\\n    }\\r\\n\\r\\n    /// handle a received message\\r\\n    function _ccipReceive(\\r\\n        Client.Any2EVMMessage memory any2EvmMessage\\r\\n    ) internal override {\\r\\n        // abi-decoding 解码\\r\\n        RequestData memory rd = abi.decode(any2EvmMessage.data, (RequestData));\\r\\n        uint256 tokenId = rd.tokenId;\\r\\n        address newOwner = rd.newOwner;\\r\\n        //转移池子内的信息给新的拥有者，这一步就是解锁NFT\\r\\n        nft.transferFrom(address(this), newOwner, tokenId);\\r\\n        // emit event\\r\\n        emit TokenUnLocked(tokenId, newOwner);\\r\\n    }\\r\\n\\r\\n    /// @notice Construct a CCIP message.\\r\\n    /// @dev This function will create an EVM2AnyMessage struct with all the necessary information for sending a text.\\r\\n    /// @param _receiver The address of the receiver.\\r\\n    /// @param _data The string data to be sent.\\r\\n    /// @param _feeTokenAddress The address of the token used for fees. Set address(0) for native gas.\\r\\n    /// @return Client.EVM2AnyMessage Returns an EVM2AnyMessage struct which contains information for sending a CCIP message.\\r\\n    function _buildCCIPMessage(\\r\\n        address _receiver,\\r\\n        bytes memory _data,\\r\\n        address _feeTokenAddress\\r\\n    ) private pure returns (Client.EVM2AnyMessage memory) {\\r\\n        // Create an EVM2AnyMessage struct in memory with necessary information for sending a cross-chain message\\r\\n        return\\r\\n            Client.EVM2AnyMessage({\\r\\n                receiver: abi.encode(_receiver), // ABI-encoded receiver address\\r\\n                data: _data, // ABI-encoded string\\r\\n                tokenAmounts: new Client.EVMTokenAmount[](0), // Empty array as no tokens are transferred\\r\\n                extraArgs: Client._argsToBytes(\\r\\n                    // Additional arguments, setting gas limit and allowing out-of-order execution.\\r\\n                    // Best Practice: For simplicity, the values are hardcoded. It is advisable to use a more dynamic approach\\r\\n                    // where you set the extra arguments off-chain. This allows adaptation depending on the lanes, messages,\\r\\n                    // and ensures compatibility with future CCIP upgrades. Read more about it here: https://docs.chain.link/ccip/best-practices#using-extraargs\\r\\n                    Client.EVMExtraArgsV2({\\r\\n                        gasLimit: 200_000, // Gas limit for the callback on the destination chain\\r\\n                        allowOutOfOrderExecution: true // Allows the message to be executed out of order relative to other messages from the same sender\\r\\n                    })\\r\\n                ),\\r\\n                // Set the feeToken to a feeTokenAddress, indicating specific asset will be used for fees\\r\\n                feeToken: _feeTokenAddress\\r\\n            });\\r\\n    }\\r\\n\\r\\n    /// @notice Fetches the details of the last received message.\\r\\n    /// @return messageId The ID of the last received message.\\r\\n    /// @return text The last received text.\\r\\n    function getLastReceivedMessageDetails()\\r\\n        external\\r\\n        view\\r\\n        returns (bytes32 messageId, string memory text)\\r\\n    {\\r\\n        return (s_lastReceivedMessageId, s_lastReceivedText);\\r\\n    }\\r\\n\\r\\n    /// @notice Fallback function to allow the contract to receive Ether.\\r\\n    /// @dev This function has no function body, making it a default function for receiving Ether.\\r\\n    /// It is automatically called when Ether is sent to the contract without any data.\\r\\n    receive() external payable {}\\r\\n\\r\\n    /// @notice Allows the contract owner to withdraw the entire balance of Ether from the contract.\\r\\n    /// @dev This function reverts if there are no funds to withdraw or if the transfer fails.\\r\\n    /// It should only be callable by the owner of the contract.\\r\\n    /// @param _beneficiary The address to which the Ether should be sent.\\r\\n    function withdraw(address _beneficiary) public onlyOwner {\\r\\n        // Retrieve the balance of this contract\\r\\n        uint256 amount = address(this).balance;\\r\\n\\r\\n        // Revert if there is nothing to withdraw\\r\\n        if (amount == 0) revert NothingToWithdraw();\\r\\n\\r\\n        // Attempt to send the funds, capturing the success status and discarding any return data\\r\\n        (bool sent, ) = _beneficiary.call{value: amount}(\\\"\\\");\\r\\n\\r\\n        // Revert if the send failed, with information about the attempted transfer\\r\\n        if (!sent) revert FailedToWithdrawEth(msg.sender, _beneficiary, amount);\\r\\n    }\\r\\n\\r\\n    /// @notice Allows the owner of the contract to withdraw all tokens of a specific ERC20 token.\\r\\n    /// @dev This function reverts with a 'NothingToWithdraw' error if there are no tokens to withdraw.\\r\\n    /// @param _beneficiary The address to which the tokens will be sent.\\r\\n    /// @param _token The contract address of the ERC20 token to be withdrawn.\\r\\n    function withdrawToken(\\r\\n        address _beneficiary,\\r\\n        address _token\\r\\n    ) public onlyOwner {\\r\\n        // Retrieve the balance of this contract\\r\\n        uint256 amount = IERC20(_token).balanceOf(address(this));\\r\\n\\r\\n        // Revert if there is nothing to withdraw\\r\\n        if (amount == 0) revert NothingToWithdraw();\\r\\n\\r\\n        IERC20(_token).safeTransfer(_beneficiary, amount);\\r\\n    }\\r\\n}\\r\\n\"\n    },\n    \"contracts/WrappedMyToken.sol\": {\n      \"content\": \"//SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.20;\\r\\n\\r\\nimport {MyToken} from \\\"./MyToken.sol\\\";\\r\\n//封装MyToken合约\\r\\ncontract WrappedMyToken is MyToken {\\r\\n    constructor(string memory tokenName, string memory tokenSymbol) \\r\\n    MyToken(tokenName, tokenSymbol) {}//给父合约传递参数进行初始化\\r\\n    //正常项目 是需要权限控制的！\\r\\n    function mintWithSpecificTokenId(address to, uint256 _tokenId) public {\\r\\n        _safeMint(to, _tokenId);\\r\\n    }\\r\\n}\\r\\n\"\n    }\n  },\n  \"settings\": {\n    \"evmVersion\": \"paris\",\n    \"optimizer\": {\n      \"enabled\": false,\n      \"runs\": 200\n    },\n    \"outputSelection\": {\n      \"*\": {\n        \"*\": [\n          \"abi\",\n          \"evm.bytecode\",\n          \"evm.deployedBytecode\",\n          \"evm.methodIdentifiers\",\n          \"metadata\",\n          \"devdoc\",\n          \"userdoc\",\n          \"storageLayout\",\n          \"evm.gasEstimates\"\n        ],\n        \"\": [\n          \"ast\"\n        ]\n      }\n    },\n    \"metadata\": {\n      \"useLiteralContent\": true\n    }\n  }\n}",
      "solcInputHash": "427b21860ce725cf979fc9591899482a",
      "transactionHash": "0x5cc19e53268867901b877a7e8f813cb71129610c7db8a34b8de1da8e90aa9ee1",
      "args": [
        "WrappedMyToken",
        "WNFT"
      ]
    },
    "decoded": {
      "from": "0x75dE0BcCAF8Da933f02903FF537BEc013BAfA090",
      "gasPrice": "3640596",
      "maxFeePerGas": "3640596",
      "maxPriorityFeePerGas": "1242869",
      "gasLimit": "2652016",
      "to": null,
      "value": "0",
      "nonce": 120,
      "data": "0x608060405234801561001057600080fd5b506040516133f43803806133f48339818101604052810190610032919061031f565b8181338282816000908161004691906105b8565b50806001908161005691906105b8565b505050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036100cb5760006040517f1e4fbdf70000000000000000000000000000000000000000000000000000000081526004016100c291906106cb565b60405180910390fd5b6100da816100e460201b60201c565b50505050506106e6565b6000600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600b60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610211826101c8565b810181811067ffffffffffffffff821117156102305761022f6101d9565b5b80604052505050565b60006102436101aa565b905061024f8282610208565b919050565b600067ffffffffffffffff82111561026f5761026e6101d9565b5b610278826101c8565b9050602081019050919050565b60005b838110156102a3578082015181840152602081019050610288565b60008484015250505050565b60006102c26102bd84610254565b610239565b9050828152602081018484840111156102de576102dd6101c3565b5b6102e9848285610285565b509392505050565b600082601f830112610306576103056101be565b5b81516103168482602086016102af565b91505092915050565b60008060408385031215610336576103356101b4565b5b600083015167ffffffffffffffff811115610354576103536101b9565b5b610360858286016102f1565b925050602083015167ffffffffffffffff811115610381576103806101b9565b5b61038d858286016102f1565b9150509250929050565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806103e957607f821691505b6020821081036103fc576103fb6103a2565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026104647fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82610427565b61046e8683610427565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b60006104b56104b06104ab84610486565b610490565b610486565b9050919050565b6000819050919050565b6104cf8361049a565b6104e36104db826104bc565b848454610434565b825550505050565b600090565b6104f86104eb565b6105038184846104c6565b505050565b5b818110156105275761051c6000826104f0565b600181019050610509565b5050565b601f82111561056c5761053d81610402565b61054684610417565b81016020851015610555578190505b61056961056185610417565b830182610508565b50505b505050565b600082821c905092915050565b600061058f60001984600802610571565b1980831691505092915050565b60006105a8838361057e565b9150826002028217905092915050565b6105c182610397565b67ffffffffffffffff8111156105da576105d96101d9565b5b6105e482546103d1565b6105ef82828561052b565b600060209050601f8311600181146106225760008415610610578287015190505b61061a858261059c565b865550610682565b601f19841661063086610402565b60005b8281101561065857848901518255600182019150602085019450602081019050610633565b868310156106755784890151610671601f89168261057e565b8355505b6001600288020188555050505b505050505050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006106b58261068a565b9050919050565b6106c5816106aa565b82525050565b60006020820190506106e060008301846106bc565b92915050565b612cff806106f56000396000f3fe608060405234801561001057600080fd5b50600436106101425760003560e01c80634f6ccce7116100b857806395d89b411161007c57806395d89b4114610387578063a22cb465146103a5578063b88d4fde146103c1578063c87b56dd146103dd578063e985e9c51461040d578063f2fde38b1461043d57610142565b80634f6ccce7146102cf5780636352211e146102ff57806370a082311461032f578063715018a61461035f5780638da5cb5b1461036957610142565b806323b872dd1161010a57806323b872dd146101ff5780632f745c591461021b57806330b2c5961461024b57806340d097c31461026757806342842e0e1461029757806342966c68146102b357610142565b806301ffc9a71461014757806306fdde0314610177578063081812fc14610195578063095ea7b3146101c557806318160ddd146101e1575b600080fd5b610161600480360381019061015c919061218d565b610459565b60405161016e91906121d5565b60405180910390f35b61017f61046b565b60405161018c9190612280565b60405180910390f35b6101af60048036038101906101aa91906122d8565b6104fd565b6040516101bc9190612346565b60405180910390f35b6101df60048036038101906101da919061238d565b610519565b005b6101e961052f565b6040516101f691906123dc565b60405180910390f35b610219600480360381019061021491906123f7565b61053c565b005b6102356004803603810190610230919061238d565b61063e565b60405161024291906123dc565b60405180910390f35b6102656004803603810190610260919061238d565b6106e7565b005b610281600480360381019061027c919061244a565b6106f5565b60405161028e91906123dc565b60405180910390f35b6102b160048036038101906102ac91906123f7565b61074f565b005b6102cd60048036038101906102c891906122d8565b61076f565b005b6102e960048036038101906102e491906122d8565b610786565b6040516102f691906123dc565b60405180910390f35b610319600480360381019061031491906122d8565b6107fc565b6040516103269190612346565b60405180910390f35b6103496004803603810190610344919061244a565b61080e565b60405161035691906123dc565b60405180910390f35b6103676108c8565b005b6103716108dc565b60405161037e9190612346565b60405180910390f35b61038f610906565b60405161039c9190612280565b60405180910390f35b6103bf60048036038101906103ba91906124a3565b610998565b005b6103db60048036038101906103d69190612618565b6109ae565b005b6103f760048036038101906103f291906122d8565b6109d3565b6040516104049190612280565b60405180910390f35b6104276004803603810190610422919061269b565b6109e5565b60405161043491906121d5565b60405180910390f35b6104576004803603810190610452919061244a565b610a79565b005b600061046482610aff565b9050919050565b60606000805461047a9061270a565b80601f01602080910402602001604051908101604052809291908181526020018280546104a69061270a565b80156104f35780601f106104c8576101008083540402835291602001916104f3565b820191906000526020600020905b8154815290600101906020018083116104d657829003601f168201915b5050505050905090565b600061050882610b60565b5061051282610be8565b9050919050565b61052b8282610526610c25565b610c2d565b5050565b6000600880549050905090565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036105ae5760006040517f64a0ae920000000000000000000000000000000000000000000000000000000081526004016105a59190612346565b60405180910390fd5b60006105c283836105bd610c25565b610c3f565b90508373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610638578382826040517f64283d7b00000000000000000000000000000000000000000000000000000000815260040161062f9392919061273b565b60405180910390fd5b50505050565b60006106498361080e565b821061068e5782826040517fa57d13dc000000000000000000000000000000000000000000000000000000008152600401610685929190612772565b60405180910390fd5b600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002054905092915050565b6106f18282610c55565b5050565b60006106ff610c73565b6000600c6000815480929190610714906127ca565b9190505590506107248382610c55565b61074681604051806060016040528060358152602001612c9560359139610cfa565b80915050919050565b61076a838383604051806020016040528060008152506109ae565b505050565b61078260008261077d610c25565b610c3f565b5050565b600061079061052f565b82106107d6576000826040517fa57d13dc0000000000000000000000000000000000000000000000000000000081526004016107cd929190612772565b60405180910390fd5b600882815481106107ea576107e9612812565b5b90600052602060002001549050919050565b600061080782610b60565b9050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036108815760006040517f89c62b640000000000000000000000000000000000000000000000000000000081526004016108789190612346565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6108d0610c73565b6108da6000610d56565b565b6000600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6060600180546109159061270a565b80601f01602080910402602001604051908101604052809291908181526020018280546109419061270a565b801561098e5780601f106109635761010080835404028352916020019161098e565b820191906000526020600020905b81548152906001019060200180831161097157829003601f168201915b5050505050905090565b6109aa6109a3610c25565b8383610e1c565b5050565b6109b984848461053c565b6109cd6109c4610c25565b85858585610f8b565b50505050565b60606109de8261113c565b9050919050565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b610a81610c73565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610af35760006040517f1e4fbdf7000000000000000000000000000000000000000000000000000000008152600401610aea9190612346565b60405180910390fd5b610afc81610d56565b50565b6000634906490660e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480610b595750610b588261124f565b5b9050919050565b600080610b6c836112c9565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610bdf57826040517f7e273289000000000000000000000000000000000000000000000000000000008152600401610bd691906123dc565b60405180910390fd5b80915050919050565b60006004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600033905090565b610c3a8383836001611306565b505050565b6000610c4c8484846114cb565b90509392505050565b610c6f8282604051806020016040528060008152506115e8565b5050565b610c7b610c25565b73ffffffffffffffffffffffffffffffffffffffff16610c996108dc565b73ffffffffffffffffffffffffffffffffffffffff1614610cf857610cbc610c25565b6040517f118cdaa7000000000000000000000000000000000000000000000000000000008152600401610cef9190612346565b60405180910390fd5b565b80600a60008481526020019081526020016000209081610d1a91906129ed565b507ff8e1a15aba9398e019f0b49df1a4fde98ee17ae345cb5f6b5e2c27f5033e8ce782604051610d4a91906123dc565b60405180910390a15050565b6000600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600b60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610e8d57816040517f5b08ba18000000000000000000000000000000000000000000000000000000008152600401610e849190612346565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051610f7e91906121d5565b60405180910390a3505050565b60008373ffffffffffffffffffffffffffffffffffffffff163b1115611135578273ffffffffffffffffffffffffffffffffffffffff1663150b7a02868685856040518563ffffffff1660e01b8152600401610fea9493929190612b14565b6020604051808303816000875af192505050801561102657506040513d601f19601f820116820180604052508101906110239190612b75565b60015b6110aa573d8060008114611056576040519150601f19603f3d011682016040523d82523d6000602084013e61105b565b606091505b5060008151036110a257836040517f64a0ae920000000000000000000000000000000000000000000000000000000081526004016110999190612346565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161461113357836040517f64a0ae9200000000000000000000000000000000000000000000000000000000815260040161112a9190612346565b60405180910390fd5b505b5050505050565b606061114782610b60565b506000600a600084815260200190815260200160002080546111689061270a565b80601f01602080910402602001604051908101604052809291908181526020018280546111949061270a565b80156111e15780601f106111b6576101008083540402835291602001916111e1565b820191906000526020600020905b8154815290600101906020018083116111c457829003601f168201915b5050505050905060006111f261160c565b9050600081510361120757819250505061124a565b60008251111561123c578082604051602001611224929190612bde565b6040516020818303038152906040529250505061124a565b61124584611623565b925050505b919050565b60007f780e9d63000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806112c257506112c18261168c565b5b9050919050565b60006002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b808061133f5750600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614155b1561147357600061134f84610b60565b9050600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141580156113ba57508273ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614155b80156113cd57506113cb81846109e5565b155b1561140f57826040517fa9fbf51f0000000000000000000000000000000000000000000000000000000081526004016114069190612346565b60405180910390fd5b811561147157838573ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45b505b836004600085815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050505050565b6000806114d985858561176e565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361151d5761151884611988565b61155c565b8473ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161461155b5761155a81856119d1565b5b5b600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff160361159e5761159984611abc565b6115dd565b8473ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146115dc576115db8585611b8d565b5b5b809150509392505050565b6115f28383611c18565b6116076115fd610c25565b6000858585610f8b565b505050565b606060405180602001604052806000815250905090565b606061162e82610b60565b50600061163961160c565b905060008151116116595760405180602001604052806000815250611684565b8061166384611d11565b604051602001611674929190612bde565b6040516020818303038152906040525b915050919050565b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061175757507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80611767575061176682611ddf565b5b9050919050565b60008061177a846112c9565b9050600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16146117bc576117bb818486611e49565b5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161461184d576117fe600085600080611306565b6001600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055505b600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16146118d0576001600360008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055505b846002600086815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550838573ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4809150509392505050565b6008805490506009600083815260200190815260200160002081905550600881908060018154018082558091505060019003906000526020600020016000909190919091505550565b60006119dc8361080e565b90506000600760008481526020019081526020016000205490506000600660008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050828214611a885760008160008581526020019081526020016000205490508082600085815260200190815260200160002081905550826007600083815260200190815260200160002081905550505b6007600085815260200190815260200160002060009055806000848152602001908152602001600020600090555050505050565b60006001600880549050611ad09190612c02565b9050600060096000848152602001908152602001600020549050600060088381548110611b0057611aff612812565b5b906000526020600020015490508060088381548110611b2257611b21612812565b5b906000526020600020018190555081600960008381526020019081526020016000208190555060096000858152602001908152602001600020600090556008805480611b7157611b70612c36565b5b6001900381819060005260206000200160009055905550505050565b60006001611b9a8461080e565b611ba49190612c02565b905081600660008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002081905550806007600084815260200190815260200160002081905550505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611c8a5760006040517f64a0ae92000000000000000000000000000000000000000000000000000000008152600401611c819190612346565b60405180910390fd5b6000611c9883836000610c3f565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614611d0c5760006040517f73c6ac6e000000000000000000000000000000000000000000000000000000008152600401611d039190612346565b60405180910390fd5b505050565b606060006001611d2084611f0d565b01905060008167ffffffffffffffff811115611d3f57611d3e6124ed565b5b6040519080825280601f01601f191660200182016040528015611d715781602001600182028036833780820191505090505b509050600082602001820190505b600115611dd4578080600190039150507f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a8581611dc857611dc7612c65565b5b04945060008503611d7f575b819350505050919050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b611e54838383612060565b611f0857600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603611ec957806040517f7e273289000000000000000000000000000000000000000000000000000000008152600401611ec091906123dc565b60405180910390fd5b81816040517f177e802f000000000000000000000000000000000000000000000000000000008152600401611eff929190612772565b60405180910390fd5b505050565b600080600090507a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008310611f6b577a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008381611f6157611f60612c65565b5b0492506040810190505b6d04ee2d6d415b85acef81000000008310611fa8576d04ee2d6d415b85acef81000000008381611f9e57611f9d612c65565b5b0492506020810190505b662386f26fc100008310611fd757662386f26fc100008381611fcd57611fcc612c65565b5b0492506010810190505b6305f5e1008310612000576305f5e1008381611ff657611ff5612c65565b5b0492506008810190505b612710831061202557612710838161201b5761201a612c65565b5b0492506004810190505b60648310612048576064838161203e5761203d612c65565b5b0492506002810190505b600a8310612057576001810190505b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415801561211857508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614806120d957506120d884846109e5565b5b8061211757508273ffffffffffffffffffffffffffffffffffffffff166120ff83610be8565b73ffffffffffffffffffffffffffffffffffffffff16145b5b90509392505050565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b61216a81612135565b811461217557600080fd5b50565b60008135905061218781612161565b92915050565b6000602082840312156121a3576121a261212b565b5b60006121b184828501612178565b91505092915050565b60008115159050919050565b6121cf816121ba565b82525050565b60006020820190506121ea60008301846121c6565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561222a57808201518184015260208101905061220f565b60008484015250505050565b6000601f19601f8301169050919050565b6000612252826121f0565b61225c81856121fb565b935061226c81856020860161220c565b61227581612236565b840191505092915050565b6000602082019050818103600083015261229a8184612247565b905092915050565b6000819050919050565b6122b5816122a2565b81146122c057600080fd5b50565b6000813590506122d2816122ac565b92915050565b6000602082840312156122ee576122ed61212b565b5b60006122fc848285016122c3565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061233082612305565b9050919050565b61234081612325565b82525050565b600060208201905061235b6000830184612337565b92915050565b61236a81612325565b811461237557600080fd5b50565b60008135905061238781612361565b92915050565b600080604083850312156123a4576123a361212b565b5b60006123b285828601612378565b92505060206123c3858286016122c3565b9150509250929050565b6123d6816122a2565b82525050565b60006020820190506123f160008301846123cd565b92915050565b6000806000606084860312156124105761240f61212b565b5b600061241e86828701612378565b935050602061242f86828701612378565b9250506040612440868287016122c3565b9150509250925092565b6000602082840312156124605761245f61212b565b5b600061246e84828501612378565b91505092915050565b612480816121ba565b811461248b57600080fd5b50565b60008135905061249d81612477565b92915050565b600080604083850312156124ba576124b961212b565b5b60006124c885828601612378565b92505060206124d98582860161248e565b9150509250929050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61252582612236565b810181811067ffffffffffffffff82111715612544576125436124ed565b5b80604052505050565b6000612557612121565b9050612563828261251c565b919050565b600067ffffffffffffffff821115612583576125826124ed565b5b61258c82612236565b9050602081019050919050565b82818337600083830152505050565b60006125bb6125b684612568565b61254d565b9050828152602081018484840111156125d7576125d66124e8565b5b6125e2848285612599565b509392505050565b600082601f8301126125ff576125fe6124e3565b5b813561260f8482602086016125a8565b91505092915050565b600080600080608085870312156126325761263161212b565b5b600061264087828801612378565b945050602061265187828801612378565b9350506040612662878288016122c3565b925050606085013567ffffffffffffffff81111561268357612682612130565b5b61268f878288016125ea565b91505092959194509250565b600080604083850312156126b2576126b161212b565b5b60006126c085828601612378565b92505060206126d185828601612378565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061272257607f821691505b602082108103612735576127346126db565b5b50919050565b60006060820190506127506000830186612337565b61275d60208301856123cd565b61276a6040830184612337565b949350505050565b60006040820190506127876000830185612337565b61279460208301846123cd565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006127d5826122a2565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036128075761280661279b565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026128a37fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82612866565b6128ad8683612866565b95508019841693508086168417925050509392505050565b6000819050919050565b60006128ea6128e56128e0846122a2565b6128c5565b6122a2565b9050919050565b6000819050919050565b612904836128cf565b612918612910826128f1565b848454612873565b825550505050565b600090565b61292d612920565b6129388184846128fb565b505050565b5b8181101561295c57612951600082612925565b60018101905061293e565b5050565b601f8211156129a15761297281612841565b61297b84612856565b8101602085101561298a578190505b61299e61299685612856565b83018261293d565b50505b505050565b600082821c905092915050565b60006129c4600019846008026129a6565b1980831691505092915050565b60006129dd83836129b3565b9150826002028217905092915050565b6129f6826121f0565b67ffffffffffffffff811115612a0f57612a0e6124ed565b5b612a19825461270a565b612a24828285612960565b600060209050601f831160018114612a575760008415612a45578287015190505b612a4f85826129d1565b865550612ab7565b601f198416612a6586612841565b60005b82811015612a8d57848901518255600182019150602085019450602081019050612a68565b86831015612aaa5784890151612aa6601f8916826129b3565b8355505b6001600288020188555050505b505050505050565b600081519050919050565b600082825260208201905092915050565b6000612ae682612abf565b612af08185612aca565b9350612b0081856020860161220c565b612b0981612236565b840191505092915050565b6000608082019050612b296000830187612337565b612b366020830186612337565b612b4360408301856123cd565b8181036060830152612b558184612adb565b905095945050505050565b600081519050612b6f81612161565b92915050565b600060208284031215612b8b57612b8a61212b565b5b6000612b9984828501612b60565b91505092915050565b600081905092915050565b6000612bb8826121f0565b612bc28185612ba2565b9350612bd281856020860161220c565b80840191505092915050565b6000612bea8285612bad565b9150612bf68284612bad565b91508190509392505050565b6000612c0d826122a2565b9150612c18836122a2565b9250828203905081811115612c3057612c2f61279b565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fdfe697066733a2f2f516d62464b31593269633248325558767978476d51697962417179416b5050656743624c6f644a47573362714d66a2646970667358221220b83569333861773d1457ad47106fd59db66ac713987444b5a148145cd98df5e864736f6c634300081c003300000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000e577261707065644d79546f6b656e0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004574e465400000000000000000000000000000000000000000000000000000000",
      "r": "0xbace836aba3b8507e2b806069f0f72c01e3f51f2d49e36503fb8d7a598bd59fa",
      "s": "0x6db87a783f1353f05b6497adf09f0789e3775d0d2ee3bdb94543af348138d080",
      "v": 0,
      "chainId": 11155111
    }
  }
}